
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009368  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08009474  08009474  00019474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094e8  080094e8  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  080094e8  080094e8  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080094e8  080094e8  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094e8  080094e8  000194e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094ec  080094ec  000194ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  080094f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000eac  2000017c  0800966c  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001028  0800966c  00021028  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY
 13 .debug_info   000150a0  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035d6  00000000  00000000  00035288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a8  00000000  00000000  00038860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e57  00000000  00000000  00039b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a5c2  00000000  00000000  0003a95f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017362  00000000  00000000  00054f21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f165  00000000  00000000  0006c283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d38  00000000  00000000  000fb3e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00100120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800945c 	.word	0x0800945c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	0800945c 	.word	0x0800945c

0800014c <heartbeat>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void heartbeat(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	uint8_t write;
	write = ~(mask>>moveMask) & 1;
 8000152:	4b12      	ldr	r3, [pc, #72]	; (800019c <heartbeat+0x50>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	4a12      	ldr	r2, [pc, #72]	; (80001a0 <heartbeat+0x54>)
 8000158:	7812      	ldrb	r2, [r2, #0]
 800015a:	40d3      	lsrs	r3, r2
 800015c:	f003 0301 	and.w	r3, r3, #1
 8000160:	2b00      	cmp	r3, #0
 8000162:	bf0c      	ite	eq
 8000164:	2301      	moveq	r3, #1
 8000166:	2300      	movne	r3, #0
 8000168:	b2db      	uxtb	r3, r3
 800016a:	71fb      	strb	r3, [r7, #7]
	moveMask++;
 800016c:	4b0c      	ldr	r3, [pc, #48]	; (80001a0 <heartbeat+0x54>)
 800016e:	781b      	ldrb	r3, [r3, #0]
 8000170:	3301      	adds	r3, #1
 8000172:	b2da      	uxtb	r2, r3
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <heartbeat+0x54>)
 8000176:	701a      	strb	r2, [r3, #0]
	moveMask ^= (moveMask & 16);
 8000178:	4b09      	ldr	r3, [pc, #36]	; (80001a0 <heartbeat+0x54>)
 800017a:	781b      	ldrb	r3, [r3, #0]
 800017c:	f023 0310 	bic.w	r3, r3, #16
 8000180:	b2da      	uxtb	r2, r3
 8000182:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <heartbeat+0x54>)
 8000184:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, write);
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	461a      	mov	r2, r3
 800018a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800018e:	4805      	ldr	r0, [pc, #20]	; (80001a4 <heartbeat+0x58>)
 8000190:	f001 f86e 	bl	8001270 <HAL_GPIO_WritePin>
}
 8000194:	bf00      	nop
 8000196:	3708      	adds	r7, #8
 8000198:	46bd      	mov	sp, r7
 800019a:	bd80      	pop	{r7, pc}
 800019c:	20000434 	.word	0x20000434
 80001a0:	20000438 	.word	0x20000438
 80001a4:	40011000 	.word	0x40011000

080001a8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a08      	ldr	r2, [pc, #32]	; (80001d8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80001b6:	4293      	cmp	r3, r2
 80001b8:	d109      	bne.n	80001ce <HAL_TIM_PeriodElapsedCallback+0x26>
		if(time100ms)
 80001ba:	4b08      	ldr	r3, [pc, #32]	; (80001dc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80001bc:	781b      	ldrb	r3, [r3, #0]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d005      	beq.n	80001ce <HAL_TIM_PeriodElapsedCallback+0x26>
			time100ms--;
 80001c2:	4b06      	ldr	r3, [pc, #24]	; (80001dc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80001c4:	781b      	ldrb	r3, [r3, #0]
 80001c6:	3b01      	subs	r3, #1
 80001c8:	b2da      	uxtb	r2, r3
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80001cc:	701a      	strb	r2, [r3, #0]
	}
}
 80001ce:	bf00      	nop
 80001d0:	370c      	adds	r7, #12
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	40012c00 	.word	0x40012c00
 80001dc:	20000430 	.word	0x20000430

080001e0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a0b      	ldr	r2, [pc, #44]	; (800021c <HAL_UART_RxCpltCallback+0x3c>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d10f      	bne.n	8000212 <HAL_UART_RxCpltCallback+0x32>
		rIndW++;
 80001f2:	4b0b      	ldr	r3, [pc, #44]	; (8000220 <HAL_UART_RxCpltCallback+0x40>)
 80001f4:	781b      	ldrb	r3, [r3, #0]
 80001f6:	3301      	adds	r3, #1
 80001f8:	b2da      	uxtb	r2, r3
 80001fa:	4b09      	ldr	r3, [pc, #36]	; (8000220 <HAL_UART_RxCpltCallback+0x40>)
 80001fc:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &rx[rIndW], 1);
 80001fe:	4b08      	ldr	r3, [pc, #32]	; (8000220 <HAL_UART_RxCpltCallback+0x40>)
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	461a      	mov	r2, r3
 8000204:	4b07      	ldr	r3, [pc, #28]	; (8000224 <HAL_UART_RxCpltCallback+0x44>)
 8000206:	4413      	add	r3, r2
 8000208:	2201      	movs	r2, #1
 800020a:	4619      	mov	r1, r3
 800020c:	4806      	ldr	r0, [pc, #24]	; (8000228 <HAL_UART_RxCpltCallback+0x48>)
 800020e:	f003 ff4c 	bl	80040aa <HAL_UART_Receive_IT>
	}
}
 8000212:	bf00      	nop
 8000214:	3708      	adds	r7, #8
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40013800 	.word	0x40013800
 8000220:	20000329 	.word	0x20000329
 8000224:	20000228 	.word	0x20000228
 8000228:	200001e0 	.word	0x200001e0

0800022c <decode>:

int decode(uint8_t index){
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	71fb      	strb	r3, [r7, #7]
	static uint8_t header = 0, ind = 0;

	while(rIndR != index){
 8000236:	e0c6      	b.n	80003c6 <decode+0x19a>
		switch(header){
 8000238:	4b68      	ldr	r3, [pc, #416]	; (80003dc <decode+0x1b0>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	2b06      	cmp	r3, #6
 800023e:	f200 80b7 	bhi.w	80003b0 <decode+0x184>
 8000242:	a201      	add	r2, pc, #4	; (adr r2, 8000248 <decode+0x1c>)
 8000244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000248:	08000265 	.word	0x08000265
 800024c:	0800027d 	.word	0x0800027d
 8000250:	080002a7 	.word	0x080002a7
 8000254:	080002d1 	.word	0x080002d1
 8000258:	080002fb 	.word	0x080002fb
 800025c:	08000311 	.word	0x08000311
 8000260:	08000355 	.word	0x08000355
			case 0:
				if(rx[rIndR] == 'U')
 8000264:	4b5e      	ldr	r3, [pc, #376]	; (80003e0 <decode+0x1b4>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	461a      	mov	r2, r3
 800026a:	4b5e      	ldr	r3, [pc, #376]	; (80003e4 <decode+0x1b8>)
 800026c:	5c9b      	ldrb	r3, [r3, r2]
 800026e:	2b55      	cmp	r3, #85	; 0x55
 8000270:	f040 80a2 	bne.w	80003b8 <decode+0x18c>
					header = 1;
 8000274:	4b59      	ldr	r3, [pc, #356]	; (80003dc <decode+0x1b0>)
 8000276:	2201      	movs	r2, #1
 8000278:	701a      	strb	r2, [r3, #0]
				break;
 800027a:	e09d      	b.n	80003b8 <decode+0x18c>
			case 1:
				if(rx[rIndR] == 'N')
 800027c:	4b58      	ldr	r3, [pc, #352]	; (80003e0 <decode+0x1b4>)
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	461a      	mov	r2, r3
 8000282:	4b58      	ldr	r3, [pc, #352]	; (80003e4 <decode+0x1b8>)
 8000284:	5c9b      	ldrb	r3, [r3, r2]
 8000286:	2b4e      	cmp	r3, #78	; 0x4e
 8000288:	d103      	bne.n	8000292 <decode+0x66>
					header = 2;
 800028a:	4b54      	ldr	r3, [pc, #336]	; (80003dc <decode+0x1b0>)
 800028c:	2202      	movs	r2, #2
 800028e:	701a      	strb	r2, [r3, #0]
				else
					header = 0, rIndR--;
				break;
 8000290:	e093      	b.n	80003ba <decode+0x18e>
					header = 0, rIndR--;
 8000292:	4b52      	ldr	r3, [pc, #328]	; (80003dc <decode+0x1b0>)
 8000294:	2200      	movs	r2, #0
 8000296:	701a      	strb	r2, [r3, #0]
 8000298:	4b51      	ldr	r3, [pc, #324]	; (80003e0 <decode+0x1b4>)
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	3b01      	subs	r3, #1
 800029e:	b2da      	uxtb	r2, r3
 80002a0:	4b4f      	ldr	r3, [pc, #316]	; (80003e0 <decode+0x1b4>)
 80002a2:	701a      	strb	r2, [r3, #0]
				break;
 80002a4:	e089      	b.n	80003ba <decode+0x18e>
			case 2:
				if(rx[rIndR] == 'E')
 80002a6:	4b4e      	ldr	r3, [pc, #312]	; (80003e0 <decode+0x1b4>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	461a      	mov	r2, r3
 80002ac:	4b4d      	ldr	r3, [pc, #308]	; (80003e4 <decode+0x1b8>)
 80002ae:	5c9b      	ldrb	r3, [r3, r2]
 80002b0:	2b45      	cmp	r3, #69	; 0x45
 80002b2:	d103      	bne.n	80002bc <decode+0x90>
					header = 3;
 80002b4:	4b49      	ldr	r3, [pc, #292]	; (80003dc <decode+0x1b0>)
 80002b6:	2203      	movs	r2, #3
 80002b8:	701a      	strb	r2, [r3, #0]
				else
					header = 0, rIndR--;
				break;
 80002ba:	e07e      	b.n	80003ba <decode+0x18e>
					header = 0, rIndR--;
 80002bc:	4b47      	ldr	r3, [pc, #284]	; (80003dc <decode+0x1b0>)
 80002be:	2200      	movs	r2, #0
 80002c0:	701a      	strb	r2, [r3, #0]
 80002c2:	4b47      	ldr	r3, [pc, #284]	; (80003e0 <decode+0x1b4>)
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	3b01      	subs	r3, #1
 80002c8:	b2da      	uxtb	r2, r3
 80002ca:	4b45      	ldr	r3, [pc, #276]	; (80003e0 <decode+0x1b4>)
 80002cc:	701a      	strb	r2, [r3, #0]
				break;
 80002ce:	e074      	b.n	80003ba <decode+0x18e>
			case 3:
				if(rx[rIndR] == 'R')
 80002d0:	4b43      	ldr	r3, [pc, #268]	; (80003e0 <decode+0x1b4>)
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	461a      	mov	r2, r3
 80002d6:	4b43      	ldr	r3, [pc, #268]	; (80003e4 <decode+0x1b8>)
 80002d8:	5c9b      	ldrb	r3, [r3, r2]
 80002da:	2b52      	cmp	r3, #82	; 0x52
 80002dc:	d103      	bne.n	80002e6 <decode+0xba>
					header = 4;
 80002de:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <decode+0x1b0>)
 80002e0:	2204      	movs	r2, #4
 80002e2:	701a      	strb	r2, [r3, #0]
				else
					header = 0, rIndR--;
				break;
 80002e4:	e069      	b.n	80003ba <decode+0x18e>
					header = 0, rIndR--;
 80002e6:	4b3d      	ldr	r3, [pc, #244]	; (80003dc <decode+0x1b0>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	701a      	strb	r2, [r3, #0]
 80002ec:	4b3c      	ldr	r3, [pc, #240]	; (80003e0 <decode+0x1b4>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	3b01      	subs	r3, #1
 80002f2:	b2da      	uxtb	r2, r3
 80002f4:	4b3a      	ldr	r3, [pc, #232]	; (80003e0 <decode+0x1b4>)
 80002f6:	701a      	strb	r2, [r3, #0]
				break;
 80002f8:	e05f      	b.n	80003ba <decode+0x18e>
			case 4:
				length = rx[rIndR];
 80002fa:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <decode+0x1b4>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	461a      	mov	r2, r3
 8000300:	4b38      	ldr	r3, [pc, #224]	; (80003e4 <decode+0x1b8>)
 8000302:	5c9a      	ldrb	r2, [r3, r2]
 8000304:	4b38      	ldr	r3, [pc, #224]	; (80003e8 <decode+0x1bc>)
 8000306:	701a      	strb	r2, [r3, #0]
				header = 5;
 8000308:	4b34      	ldr	r3, [pc, #208]	; (80003dc <decode+0x1b0>)
 800030a:	2205      	movs	r2, #5
 800030c:	701a      	strb	r2, [r3, #0]
				break;
 800030e:	e054      	b.n	80003ba <decode+0x18e>
			case 5:
				if(rx[rIndR] == ':'){
 8000310:	4b33      	ldr	r3, [pc, #204]	; (80003e0 <decode+0x1b4>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	461a      	mov	r2, r3
 8000316:	4b33      	ldr	r3, [pc, #204]	; (80003e4 <decode+0x1b8>)
 8000318:	5c9b      	ldrb	r3, [r3, r2]
 800031a:	2b3a      	cmp	r3, #58	; 0x3a
 800031c:	d110      	bne.n	8000340 <decode+0x114>
					ind = rIndR+1;
 800031e:	4b30      	ldr	r3, [pc, #192]	; (80003e0 <decode+0x1b4>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	3301      	adds	r3, #1
 8000324:	b2da      	uxtb	r2, r3
 8000326:	4b31      	ldr	r3, [pc, #196]	; (80003ec <decode+0x1c0>)
 8000328:	701a      	strb	r2, [r3, #0]
					header = 6;
 800032a:	4b2c      	ldr	r3, [pc, #176]	; (80003dc <decode+0x1b0>)
 800032c:	2206      	movs	r2, #6
 800032e:	701a      	strb	r2, [r3, #0]
					checksum = 'U' ^ 'N' ^ 'E' ^ 'R' ^ length ^ ':';
 8000330:	4b2d      	ldr	r3, [pc, #180]	; (80003e8 <decode+0x1bc>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	f083 0336 	eor.w	r3, r3, #54	; 0x36
 8000338:	b2da      	uxtb	r2, r3
 800033a:	4b2d      	ldr	r3, [pc, #180]	; (80003f0 <decode+0x1c4>)
 800033c:	701a      	strb	r2, [r3, #0]
				} else {
					header = 0;
					rIndR--;
				}
				break;
 800033e:	e03c      	b.n	80003ba <decode+0x18e>
					header = 0;
 8000340:	4b26      	ldr	r3, [pc, #152]	; (80003dc <decode+0x1b0>)
 8000342:	2200      	movs	r2, #0
 8000344:	701a      	strb	r2, [r3, #0]
					rIndR--;
 8000346:	4b26      	ldr	r3, [pc, #152]	; (80003e0 <decode+0x1b4>)
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	3b01      	subs	r3, #1
 800034c:	b2da      	uxtb	r2, r3
 800034e:	4b24      	ldr	r3, [pc, #144]	; (80003e0 <decode+0x1b4>)
 8000350:	701a      	strb	r2, [r3, #0]
				break;
 8000352:	e032      	b.n	80003ba <decode+0x18e>
			case 6:
				length--;
 8000354:	4b24      	ldr	r3, [pc, #144]	; (80003e8 <decode+0x1bc>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	3b01      	subs	r3, #1
 800035a:	b2da      	uxtb	r2, r3
 800035c:	4b22      	ldr	r3, [pc, #136]	; (80003e8 <decode+0x1bc>)
 800035e:	701a      	strb	r2, [r3, #0]
				if(length!=0)
 8000360:	4b21      	ldr	r3, [pc, #132]	; (80003e8 <decode+0x1bc>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d00b      	beq.n	8000380 <decode+0x154>
					checksum ^= rx[rIndR];
 8000368:	4b1d      	ldr	r3, [pc, #116]	; (80003e0 <decode+0x1b4>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	461a      	mov	r2, r3
 800036e:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <decode+0x1b8>)
 8000370:	5c9a      	ldrb	r2, [r3, r2]
 8000372:	4b1f      	ldr	r3, [pc, #124]	; (80003f0 <decode+0x1c4>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	4053      	eors	r3, r2
 8000378:	b2da      	uxtb	r2, r3
 800037a:	4b1d      	ldr	r3, [pc, #116]	; (80003f0 <decode+0x1c4>)
 800037c:	701a      	strb	r2, [r3, #0]
					if(checksum == rx[rIndR])
						encode(ind);
					header = 0;
					rIndR--;
				}
				break;
 800037e:	e01c      	b.n	80003ba <decode+0x18e>
					if(checksum == rx[rIndR])
 8000380:	4b17      	ldr	r3, [pc, #92]	; (80003e0 <decode+0x1b4>)
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	461a      	mov	r2, r3
 8000386:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <decode+0x1b8>)
 8000388:	5c9a      	ldrb	r2, [r3, r2]
 800038a:	4b19      	ldr	r3, [pc, #100]	; (80003f0 <decode+0x1c4>)
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	429a      	cmp	r2, r3
 8000390:	d104      	bne.n	800039c <decode+0x170>
						encode(ind);
 8000392:	4b16      	ldr	r3, [pc, #88]	; (80003ec <decode+0x1c0>)
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	4618      	mov	r0, r3
 8000398:	f000 f82c 	bl	80003f4 <encode>
					header = 0;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <decode+0x1b0>)
 800039e:	2200      	movs	r2, #0
 80003a0:	701a      	strb	r2, [r3, #0]
					rIndR--;
 80003a2:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <decode+0x1b4>)
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	3b01      	subs	r3, #1
 80003a8:	b2da      	uxtb	r2, r3
 80003aa:	4b0d      	ldr	r3, [pc, #52]	; (80003e0 <decode+0x1b4>)
 80003ac:	701a      	strb	r2, [r3, #0]
				break;
 80003ae:	e004      	b.n	80003ba <decode+0x18e>
			default:
				header = 0;
 80003b0:	4b0a      	ldr	r3, [pc, #40]	; (80003dc <decode+0x1b0>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	701a      	strb	r2, [r3, #0]
				break;
 80003b6:	e000      	b.n	80003ba <decode+0x18e>
				break;
 80003b8:	bf00      	nop
		}
		rIndR++;
 80003ba:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <decode+0x1b4>)
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	3301      	adds	r3, #1
 80003c0:	b2da      	uxtb	r2, r3
 80003c2:	4b07      	ldr	r3, [pc, #28]	; (80003e0 <decode+0x1b4>)
 80003c4:	701a      	strb	r2, [r3, #0]
	while(rIndR != index){
 80003c6:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <decode+0x1b4>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	79fa      	ldrb	r2, [r7, #7]
 80003cc:	429a      	cmp	r2, r3
 80003ce:	f47f af33 	bne.w	8000238 <decode+0xc>
	}
	return 0;
 80003d2:	2300      	movs	r3, #0
}
 80003d4:	4618      	mov	r0, r3
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	2000043b 	.word	0x2000043b
 80003e0:	20000328 	.word	0x20000328
 80003e4:	20000228 	.word	0x20000228
 80003e8:	2000042f 	.word	0x2000042f
 80003ec:	2000043c 	.word	0x2000043c
 80003f0:	2000042e 	.word	0x2000042e

080003f4 <encode>:

void encode(uint8_t index){
 80003f4:	b480      	push	{r7}
 80003f6:	b089      	sub	sp, #36	; 0x24
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	4603      	mov	r3, r0
 80003fc:	71fb      	strb	r3, [r7, #7]
	uint8_t auxBuf[20], auxIndex = 0;
 80003fe:	2300      	movs	r3, #0
 8000400:	77fb      	strb	r3, [r7, #31]

	auxBuf[auxIndex++]	= 'U';
 8000402:	7ffb      	ldrb	r3, [r7, #31]
 8000404:	1c5a      	adds	r2, r3, #1
 8000406:	77fa      	strb	r2, [r7, #31]
 8000408:	3320      	adds	r3, #32
 800040a:	443b      	add	r3, r7
 800040c:	2255      	movs	r2, #85	; 0x55
 800040e:	f803 2c18 	strb.w	r2, [r3, #-24]
	auxBuf[auxIndex++]	= 'N';
 8000412:	7ffb      	ldrb	r3, [r7, #31]
 8000414:	1c5a      	adds	r2, r3, #1
 8000416:	77fa      	strb	r2, [r7, #31]
 8000418:	3320      	adds	r3, #32
 800041a:	443b      	add	r3, r7
 800041c:	224e      	movs	r2, #78	; 0x4e
 800041e:	f803 2c18 	strb.w	r2, [r3, #-24]
	auxBuf[auxIndex++]	= 'E';
 8000422:	7ffb      	ldrb	r3, [r7, #31]
 8000424:	1c5a      	adds	r2, r3, #1
 8000426:	77fa      	strb	r2, [r7, #31]
 8000428:	3320      	adds	r3, #32
 800042a:	443b      	add	r3, r7
 800042c:	2245      	movs	r2, #69	; 0x45
 800042e:	f803 2c18 	strb.w	r2, [r3, #-24]
	auxBuf[auxIndex++]	= 'R';
 8000432:	7ffb      	ldrb	r3, [r7, #31]
 8000434:	1c5a      	adds	r2, r3, #1
 8000436:	77fa      	strb	r2, [r7, #31]
 8000438:	3320      	adds	r3, #32
 800043a:	443b      	add	r3, r7
 800043c:	2252      	movs	r2, #82	; 0x52
 800043e:	f803 2c18 	strb.w	r2, [r3, #-24]
	auxBuf[auxIndex++]	=  0 ;
 8000442:	7ffb      	ldrb	r3, [r7, #31]
 8000444:	1c5a      	adds	r2, r3, #1
 8000446:	77fa      	strb	r2, [r7, #31]
 8000448:	3320      	adds	r3, #32
 800044a:	443b      	add	r3, r7
 800044c:	2200      	movs	r2, #0
 800044e:	f803 2c18 	strb.w	r2, [r3, #-24]
	auxBuf[auxIndex++]	= ':';
 8000452:	7ffb      	ldrb	r3, [r7, #31]
 8000454:	1c5a      	adds	r2, r3, #1
 8000456:	77fa      	strb	r2, [r7, #31]
 8000458:	3320      	adds	r3, #32
 800045a:	443b      	add	r3, r7
 800045c:	223a      	movs	r2, #58	; 0x3a
 800045e:	f803 2c18 	strb.w	r2, [r3, #-24]

	switch(rx[index]){
 8000462:	79fb      	ldrb	r3, [r7, #7]
 8000464:	4a2c      	ldr	r2, [pc, #176]	; (8000518 <encode+0x124>)
 8000466:	5cd3      	ldrb	r3, [r2, r3]
 8000468:	2bf0      	cmp	r3, #240	; 0xf0
 800046a:	d112      	bne.n	8000492 <encode+0x9e>
		case ALIVE:
			auxBuf[auxIndex++] = ALIVE;
 800046c:	7ffb      	ldrb	r3, [r7, #31]
 800046e:	1c5a      	adds	r2, r3, #1
 8000470:	77fa      	strb	r2, [r7, #31]
 8000472:	3320      	adds	r3, #32
 8000474:	443b      	add	r3, r7
 8000476:	22f0      	movs	r2, #240	; 0xf0
 8000478:	f803 2c18 	strb.w	r2, [r3, #-24]
			auxBuf[auxIndex++] = ACKNOWLEDGE;
 800047c:	7ffb      	ldrb	r3, [r7, #31]
 800047e:	1c5a      	adds	r2, r3, #1
 8000480:	77fa      	strb	r2, [r7, #31]
 8000482:	3320      	adds	r3, #32
 8000484:	443b      	add	r3, r7
 8000486:	220d      	movs	r2, #13
 8000488:	f803 2c18 	strb.w	r2, [r3, #-24]
			auxBuf[NBYTES] = 0x03;
 800048c:	2303      	movs	r3, #3
 800048e:	733b      	strb	r3, [r7, #12]
			break;
 8000490:	e00a      	b.n	80004a8 <encode+0xb4>
		default:
			auxBuf[auxIndex++]	= 0xFF;
 8000492:	7ffb      	ldrb	r3, [r7, #31]
 8000494:	1c5a      	adds	r2, r3, #1
 8000496:	77fa      	strb	r2, [r7, #31]
 8000498:	3320      	adds	r3, #32
 800049a:	443b      	add	r3, r7
 800049c:	22ff      	movs	r2, #255	; 0xff
 800049e:	f803 2c18 	strb.w	r2, [r3, #-24]
			auxBuf[NBYTES]		= 0x02;
 80004a2:	2302      	movs	r3, #2
 80004a4:	733b      	strb	r3, [r7, #12]
			break;
 80004a6:	bf00      	nop
	}

	checksum = 0;
 80004a8:	4b1c      	ldr	r3, [pc, #112]	; (800051c <encode+0x128>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < auxIndex; i++){
 80004ae:	2300      	movs	r3, #0
 80004b0:	77bb      	strb	r3, [r7, #30]
 80004b2:	e01c      	b.n	80004ee <encode+0xfa>
		checksum ^= auxBuf[i];
 80004b4:	7fbb      	ldrb	r3, [r7, #30]
 80004b6:	3320      	adds	r3, #32
 80004b8:	443b      	add	r3, r7
 80004ba:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80004be:	4b17      	ldr	r3, [pc, #92]	; (800051c <encode+0x128>)
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	4053      	eors	r3, r2
 80004c4:	b2da      	uxtb	r2, r3
 80004c6:	4b15      	ldr	r3, [pc, #84]	; (800051c <encode+0x128>)
 80004c8:	701a      	strb	r2, [r3, #0]
		tx[tIndW++] = auxBuf[i];
 80004ca:	7fba      	ldrb	r2, [r7, #30]
 80004cc:	4b14      	ldr	r3, [pc, #80]	; (8000520 <encode+0x12c>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	1c59      	adds	r1, r3, #1
 80004d2:	b2c8      	uxtb	r0, r1
 80004d4:	4912      	ldr	r1, [pc, #72]	; (8000520 <encode+0x12c>)
 80004d6:	7008      	strb	r0, [r1, #0]
 80004d8:	4619      	mov	r1, r3
 80004da:	f102 0320 	add.w	r3, r2, #32
 80004de:	443b      	add	r3, r7
 80004e0:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80004e4:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <encode+0x130>)
 80004e6:	545a      	strb	r2, [r3, r1]
	for(uint8_t i = 0; i < auxIndex; i++){
 80004e8:	7fbb      	ldrb	r3, [r7, #30]
 80004ea:	3301      	adds	r3, #1
 80004ec:	77bb      	strb	r3, [r7, #30]
 80004ee:	7fba      	ldrb	r2, [r7, #30]
 80004f0:	7ffb      	ldrb	r3, [r7, #31]
 80004f2:	429a      	cmp	r2, r3
 80004f4:	d3de      	bcc.n	80004b4 <encode+0xc0>
	}

	tx[tIndW++] = checksum;
 80004f6:	4b0a      	ldr	r3, [pc, #40]	; (8000520 <encode+0x12c>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	1c5a      	adds	r2, r3, #1
 80004fc:	b2d1      	uxtb	r1, r2
 80004fe:	4a08      	ldr	r2, [pc, #32]	; (8000520 <encode+0x12c>)
 8000500:	7011      	strb	r1, [r2, #0]
 8000502:	461a      	mov	r2, r3
 8000504:	4b05      	ldr	r3, [pc, #20]	; (800051c <encode+0x128>)
 8000506:	7819      	ldrb	r1, [r3, #0]
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <encode+0x130>)
 800050a:	5499      	strb	r1, [r3, r2]
}
 800050c:	bf00      	nop
 800050e:	3724      	adds	r7, #36	; 0x24
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	20000228 	.word	0x20000228
 800051c:	2000042e 	.word	0x2000042e
 8000520:	2000042d 	.word	0x2000042d
 8000524:	2000032c 	.word	0x2000032c

08000528 <USBReceive>:

void USBReceive(uint8_t *buf, uint16_t len){
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	460b      	mov	r3, r1
 8000532:	807b      	strh	r3, [r7, #2]
	rxUSBData = buf[0];
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	781a      	ldrb	r2, [r3, #0]
 8000538:	4b04      	ldr	r3, [pc, #16]	; (800054c <USBReceive+0x24>)
 800053a:	701a      	strb	r2, [r3, #0]
	newData = 1;
 800053c:	4b04      	ldr	r3, [pc, #16]	; (8000550 <USBReceive+0x28>)
 800053e:	2201      	movs	r2, #1
 8000540:	701a      	strb	r2, [r3, #0]
}
 8000542:	bf00      	nop
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr
 800054c:	20000439 	.word	0x20000439
 8000550:	2000043a 	.word	0x2000043a

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000558:	f000 fae4 	bl	8000b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055c:	f000 f884 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000560:	f000 f956 	bl	8000810 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000564:	f000 f8da 	bl	800071c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000568:	f000 f928 	bl	80007bc <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800056c:	f008 fa4e 	bl	8008a0c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  rIndW = rIndR = 0;
 8000570:	4b2e      	ldr	r3, [pc, #184]	; (800062c <main+0xd8>)
 8000572:	2200      	movs	r2, #0
 8000574:	701a      	strb	r2, [r3, #0]
 8000576:	4b2d      	ldr	r3, [pc, #180]	; (800062c <main+0xd8>)
 8000578:	781a      	ldrb	r2, [r3, #0]
 800057a:	4b2d      	ldr	r3, [pc, #180]	; (8000630 <main+0xdc>)
 800057c:	701a      	strb	r2, [r3, #0]

  time100ms = 10;
 800057e:	4b2d      	ldr	r3, [pc, #180]	; (8000634 <main+0xe0>)
 8000580:	220a      	movs	r2, #10
 8000582:	701a      	strb	r2, [r3, #0]

  mask = 0xFF00;
 8000584:	4b2c      	ldr	r3, [pc, #176]	; (8000638 <main+0xe4>)
 8000586:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 800058a:	601a      	str	r2, [r3, #0]
  moveMask = 0;
 800058c:	4b2b      	ldr	r3, [pc, #172]	; (800063c <main+0xe8>)
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim1);
 8000592:	482b      	ldr	r0, [pc, #172]	; (8000640 <main+0xec>)
 8000594:	f003 f908 	bl	80037a8 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, &rx[rIndW], 1);
 8000598:	4b25      	ldr	r3, [pc, #148]	; (8000630 <main+0xdc>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	461a      	mov	r2, r3
 800059e:	4b29      	ldr	r3, [pc, #164]	; (8000644 <main+0xf0>)
 80005a0:	4413      	add	r3, r2
 80005a2:	2201      	movs	r2, #1
 80005a4:	4619      	mov	r1, r3
 80005a6:	4828      	ldr	r0, [pc, #160]	; (8000648 <main+0xf4>)
 80005a8:	f003 fd7f 	bl	80040aa <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80005ac:	2201      	movs	r2, #1
 80005ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b2:	4826      	ldr	r0, [pc, #152]	; (800064c <main+0xf8>)
 80005b4:	f000 fe5c 	bl	8001270 <HAL_GPIO_WritePin>

  CDC_AttachRxData(USBReceive);
 80005b8:	4825      	ldr	r0, [pc, #148]	; (8000650 <main+0xfc>)
 80005ba:	f008 fb5d 	bl	8008c78 <CDC_AttachRxData>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(!time100ms){
 80005be:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <main+0xe0>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d104      	bne.n	80005d0 <main+0x7c>
		  time100ms = 10;
 80005c6:	4b1b      	ldr	r3, [pc, #108]	; (8000634 <main+0xe0>)
 80005c8:	220a      	movs	r2, #10
 80005ca:	701a      	strb	r2, [r3, #0]
		  heartbeat();
 80005cc:	f7ff fdbe 	bl	800014c <heartbeat>
		  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	  }
	/*If the indices are different, receive (decode) what is on the serial port*/
	  if(rIndR != rIndW)
 80005d0:	4b16      	ldr	r3, [pc, #88]	; (800062c <main+0xd8>)
 80005d2:	781a      	ldrb	r2, [r3, #0]
 80005d4:	4b16      	ldr	r3, [pc, #88]	; (8000630 <main+0xdc>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	429a      	cmp	r2, r3
 80005da:	d004      	beq.n	80005e6 <main+0x92>
		  decode(rIndW);
 80005dc:	4b14      	ldr	r3, [pc, #80]	; (8000630 <main+0xdc>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff fe23 	bl	800022c <decode>

	/* If the indices are different, transmit what is on the serial port */
	  if(tIndR != tIndW)
 80005e6:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <main+0x100>)
 80005e8:	781a      	ldrb	r2, [r3, #0]
 80005ea:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <main+0x104>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d00d      	beq.n	800060e <main+0xba>
		  HAL_UART_Transmit(&huart1, &tx[tIndR++], 1, 1);
 80005f2:	4b18      	ldr	r3, [pc, #96]	; (8000654 <main+0x100>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	1c5a      	adds	r2, r3, #1
 80005f8:	b2d1      	uxtb	r1, r2
 80005fa:	4a16      	ldr	r2, [pc, #88]	; (8000654 <main+0x100>)
 80005fc:	7011      	strb	r1, [r2, #0]
 80005fe:	461a      	mov	r2, r3
 8000600:	4b16      	ldr	r3, [pc, #88]	; (800065c <main+0x108>)
 8000602:	18d1      	adds	r1, r2, r3
 8000604:	2301      	movs	r3, #1
 8000606:	2201      	movs	r2, #1
 8000608:	480f      	ldr	r0, [pc, #60]	; (8000648 <main+0xf4>)
 800060a:	f003 fccb 	bl	8003fa4 <HAL_UART_Transmit>

	/* If there is new data, transmit via USB */
	  if(newData){
 800060e:	4b14      	ldr	r3, [pc, #80]	; (8000660 <main+0x10c>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d0d3      	beq.n	80005be <main+0x6a>
		  if(CDC_Transmit_FS(&rxUSBData, 1) == USBD_OK)
 8000616:	2101      	movs	r1, #1
 8000618:	4812      	ldr	r0, [pc, #72]	; (8000664 <main+0x110>)
 800061a:	f008 fb07 	bl	8008c2c <CDC_Transmit_FS>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d1cc      	bne.n	80005be <main+0x6a>
			  newData = 0;
 8000624:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <main+0x10c>)
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
	  if(!time100ms){
 800062a:	e7c8      	b.n	80005be <main+0x6a>
 800062c:	20000328 	.word	0x20000328
 8000630:	20000329 	.word	0x20000329
 8000634:	20000430 	.word	0x20000430
 8000638:	20000434 	.word	0x20000434
 800063c:	20000438 	.word	0x20000438
 8000640:	20000198 	.word	0x20000198
 8000644:	20000228 	.word	0x20000228
 8000648:	200001e0 	.word	0x200001e0
 800064c:	40011000 	.word	0x40011000
 8000650:	08000529 	.word	0x08000529
 8000654:	2000042c 	.word	0x2000042c
 8000658:	2000042d 	.word	0x2000042d
 800065c:	2000032c 	.word	0x2000032c
 8000660:	2000043a 	.word	0x2000043a
 8000664:	20000439 	.word	0x20000439

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	; 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000672:	2228      	movs	r2, #40	; 0x28
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f008 fec4 	bl	8009404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000698:	2301      	movs	r3, #1
 800069a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800069c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a6:	2301      	movs	r3, #1
 80006a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006b4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006be:	4618      	mov	r0, r3
 80006c0:	f002 fb5c 	bl	8002d7c <HAL_RCC_OscConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006ca:	f000 f907 	bl	80008dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ce:	230f      	movs	r3, #15
 80006d0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d2:	2302      	movs	r3, #2
 80006d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006de:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	2102      	movs	r1, #2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f002 fdc8 	bl	8003280 <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80006f6:	f000 f8f1 	bl	80008dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80006fa:	2310      	movs	r3, #16
 80006fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	4618      	mov	r0, r3
 8000706:	f002 ff49 	bl	800359c <HAL_RCCEx_PeriphCLKConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000710:	f000 f8e4 	bl	80008dc <Error_Handler>
  }
}
 8000714:	bf00      	nop
 8000716:	3750      	adds	r7, #80	; 0x50
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000722:	f107 0308 	add.w	r3, r7, #8
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000730:	463b      	mov	r3, r7
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000738:	4b1e      	ldr	r3, [pc, #120]	; (80007b4 <MX_TIM1_Init+0x98>)
 800073a:	4a1f      	ldr	r2, [pc, #124]	; (80007b8 <MX_TIM1_Init+0x9c>)
 800073c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800073e:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <MX_TIM1_Init+0x98>)
 8000740:	2247      	movs	r2, #71	; 0x47
 8000742:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000744:	4b1b      	ldr	r3, [pc, #108]	; (80007b4 <MX_TIM1_Init+0x98>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 800074a:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <MX_TIM1_Init+0x98>)
 800074c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000750:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000752:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <MX_TIM1_Init+0x98>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000758:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <MX_TIM1_Init+0x98>)
 800075a:	2200      	movs	r2, #0
 800075c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <MX_TIM1_Init+0x98>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000764:	4813      	ldr	r0, [pc, #76]	; (80007b4 <MX_TIM1_Init+0x98>)
 8000766:	f002 ffcf 	bl	8003708 <HAL_TIM_Base_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000770:	f000 f8b4 	bl	80008dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000778:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800077a:	f107 0308 	add.w	r3, r7, #8
 800077e:	4619      	mov	r1, r3
 8000780:	480c      	ldr	r0, [pc, #48]	; (80007b4 <MX_TIM1_Init+0x98>)
 8000782:	f003 f96b 	bl	8003a5c <HAL_TIM_ConfigClockSource>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800078c:	f000 f8a6 	bl	80008dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000790:	2300      	movs	r3, #0
 8000792:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000794:	2300      	movs	r3, #0
 8000796:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000798:	463b      	mov	r3, r7
 800079a:	4619      	mov	r1, r3
 800079c:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_TIM1_Init+0x98>)
 800079e:	f003 fb41 	bl	8003e24 <HAL_TIMEx_MasterConfigSynchronization>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80007a8:	f000 f898 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	3718      	adds	r7, #24
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000198 	.word	0x20000198
 80007b8:	40012c00 	.word	0x40012c00

080007bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007c2:	4a12      	ldr	r2, [pc, #72]	; (800080c <MX_USART1_UART_Init+0x50>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007f4:	f003 fb86 	bl	8003f04 <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007fe:	f000 f86d 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200001e0 	.word	0x200001e0
 800080c:	40013800 	.word	0x40013800

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 0310 	add.w	r3, r7, #16
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000824:	4b2a      	ldr	r3, [pc, #168]	; (80008d0 <MX_GPIO_Init+0xc0>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	4a29      	ldr	r2, [pc, #164]	; (80008d0 <MX_GPIO_Init+0xc0>)
 800082a:	f043 0310 	orr.w	r3, r3, #16
 800082e:	6193      	str	r3, [r2, #24]
 8000830:	4b27      	ldr	r3, [pc, #156]	; (80008d0 <MX_GPIO_Init+0xc0>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	f003 0310 	and.w	r3, r3, #16
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083c:	4b24      	ldr	r3, [pc, #144]	; (80008d0 <MX_GPIO_Init+0xc0>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	4a23      	ldr	r2, [pc, #140]	; (80008d0 <MX_GPIO_Init+0xc0>)
 8000842:	f043 0320 	orr.w	r3, r3, #32
 8000846:	6193      	str	r3, [r2, #24]
 8000848:	4b21      	ldr	r3, [pc, #132]	; (80008d0 <MX_GPIO_Init+0xc0>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	f003 0320 	and.w	r3, r3, #32
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000854:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <MX_GPIO_Init+0xc0>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	4a1d      	ldr	r2, [pc, #116]	; (80008d0 <MX_GPIO_Init+0xc0>)
 800085a:	f043 0304 	orr.w	r3, r3, #4
 800085e:	6193      	str	r3, [r2, #24]
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <MX_GPIO_Init+0xc0>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f003 0304 	and.w	r3, r3, #4
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086c:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <MX_GPIO_Init+0xc0>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	4a17      	ldr	r2, [pc, #92]	; (80008d0 <MX_GPIO_Init+0xc0>)
 8000872:	f043 0308 	orr.w	r3, r3, #8
 8000876:	6193      	str	r3, [r2, #24]
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <MX_GPIO_Init+0xc0>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f003 0308 	and.w	r3, r3, #8
 8000880:	603b      	str	r3, [r7, #0]
 8000882:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800088a:	4812      	ldr	r0, [pc, #72]	; (80008d4 <MX_GPIO_Init+0xc4>)
 800088c:	f000 fcf0 	bl	8001270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000894:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2302      	movs	r3, #2
 80008a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 0310 	add.w	r3, r7, #16
 80008a6:	4619      	mov	r1, r3
 80008a8:	480a      	ldr	r0, [pc, #40]	; (80008d4 <MX_GPIO_Init+0xc4>)
 80008aa:	f000 fb5d 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80008ae:	2310      	movs	r3, #16
 80008b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 0310 	add.w	r3, r7, #16
 80008be:	4619      	mov	r1, r3
 80008c0:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_GPIO_Init+0xc8>)
 80008c2:	f000 fb51 	bl	8000f68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c6:	bf00      	nop
 80008c8:	3720      	adds	r7, #32
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40021000 	.word	0x40021000
 80008d4:	40011000 	.word	0x40011000
 80008d8:	40010c00 	.word	0x40010c00

080008dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e0:	b672      	cpsid	i
}
 80008e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <Error_Handler+0x8>
	...

080008e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <HAL_MspInit+0x5c>)
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	4a14      	ldr	r2, [pc, #80]	; (8000944 <HAL_MspInit+0x5c>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6193      	str	r3, [r2, #24]
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <HAL_MspInit+0x5c>)
 80008fc:	699b      	ldr	r3, [r3, #24]
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <HAL_MspInit+0x5c>)
 8000908:	69db      	ldr	r3, [r3, #28]
 800090a:	4a0e      	ldr	r2, [pc, #56]	; (8000944 <HAL_MspInit+0x5c>)
 800090c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000910:	61d3      	str	r3, [r2, #28]
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <HAL_MspInit+0x5c>)
 8000914:	69db      	ldr	r3, [r3, #28]
 8000916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800091e:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <HAL_MspInit+0x60>)
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	4a04      	ldr	r2, [pc, #16]	; (8000948 <HAL_MspInit+0x60>)
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	3714      	adds	r7, #20
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr
 8000944:	40021000 	.word	0x40021000
 8000948:	40010000 	.word	0x40010000

0800094c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a0d      	ldr	r2, [pc, #52]	; (8000990 <HAL_TIM_Base_MspInit+0x44>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d113      	bne.n	8000986 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <HAL_TIM_Base_MspInit+0x48>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	4a0c      	ldr	r2, [pc, #48]	; (8000994 <HAL_TIM_Base_MspInit+0x48>)
 8000964:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000968:	6193      	str	r3, [r2, #24]
 800096a:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <HAL_TIM_Base_MspInit+0x48>)
 800096c:	699b      	ldr	r3, [r3, #24]
 800096e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	2100      	movs	r1, #0
 800097a:	2019      	movs	r0, #25
 800097c:	f000 fa0b 	bl	8000d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000980:	2019      	movs	r0, #25
 8000982:	f000 fa24 	bl	8000dce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40012c00 	.word	0x40012c00
 8000994:	40021000 	.word	0x40021000

08000998 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b088      	sub	sp, #32
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0310 	add.w	r3, r7, #16
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a20      	ldr	r2, [pc, #128]	; (8000a34 <HAL_UART_MspInit+0x9c>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d139      	bne.n	8000a2c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009b8:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <HAL_UART_MspInit+0xa0>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a1e      	ldr	r2, [pc, #120]	; (8000a38 <HAL_UART_MspInit+0xa0>)
 80009be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <HAL_UART_MspInit+0xa0>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d0:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <HAL_UART_MspInit+0xa0>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	4a18      	ldr	r2, [pc, #96]	; (8000a38 <HAL_UART_MspInit+0xa0>)
 80009d6:	f043 0304 	orr.w	r3, r3, #4
 80009da:	6193      	str	r3, [r2, #24]
 80009dc:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <HAL_UART_MspInit+0xa0>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	f003 0304 	and.w	r3, r3, #4
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f6:	f107 0310 	add.w	r3, r7, #16
 80009fa:	4619      	mov	r1, r3
 80009fc:	480f      	ldr	r0, [pc, #60]	; (8000a3c <HAL_UART_MspInit+0xa4>)
 80009fe:	f000 fab3 	bl	8000f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a10:	f107 0310 	add.w	r3, r7, #16
 8000a14:	4619      	mov	r1, r3
 8000a16:	4809      	ldr	r0, [pc, #36]	; (8000a3c <HAL_UART_MspInit+0xa4>)
 8000a18:	f000 faa6 	bl	8000f68 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2100      	movs	r1, #0
 8000a20:	2025      	movs	r0, #37	; 0x25
 8000a22:	f000 f9b8 	bl	8000d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a26:	2025      	movs	r0, #37	; 0x25
 8000a28:	f000 f9d1 	bl	8000dce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a2c:	bf00      	nop
 8000a2e:	3720      	adds	r7, #32
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40013800 	.word	0x40013800
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40010800 	.word	0x40010800

08000a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a44:	e7fe      	b.n	8000a44 <NMI_Handler+0x4>

08000a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <HardFault_Handler+0x4>

08000a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <MemManage_Handler+0x4>

08000a52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <BusFault_Handler+0x4>

08000a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <UsageFault_Handler+0x4>

08000a5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr

08000a6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr

08000a76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr

08000a82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a86:	f000 f893 	bl	8000bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a94:	4802      	ldr	r0, [pc, #8]	; (8000aa0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000a96:	f000 fd28 	bl	80014ea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000b18 	.word	0x20000b18

08000aa4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000aa8:	4802      	ldr	r0, [pc, #8]	; (8000ab4 <TIM1_UP_IRQHandler+0x10>)
 8000aaa:	f002 fecf 	bl	800384c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000198 	.word	0x20000198

08000ab8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000abc:	4802      	ldr	r0, [pc, #8]	; (8000ac8 <USART1_IRQHandler+0x10>)
 8000abe:	f003 fb19 	bl	80040f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	200001e0 	.word	0x200001e0

08000acc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr

08000ad8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ad8:	f7ff fff8 	bl	8000acc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000adc:	480b      	ldr	r0, [pc, #44]	; (8000b0c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ade:	490c      	ldr	r1, [pc, #48]	; (8000b10 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ae0:	4a0c      	ldr	r2, [pc, #48]	; (8000b14 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae4:	e002      	b.n	8000aec <LoopCopyDataInit>

08000ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aea:	3304      	adds	r3, #4

08000aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af0:	d3f9      	bcc.n	8000ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af2:	4a09      	ldr	r2, [pc, #36]	; (8000b18 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000af4:	4c09      	ldr	r4, [pc, #36]	; (8000b1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af8:	e001      	b.n	8000afe <LoopFillZerobss>

08000afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000afc:	3204      	adds	r2, #4

08000afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b00:	d3fb      	bcc.n	8000afa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b02:	f008 fc87 	bl	8009414 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b06:	f7ff fd25 	bl	8000554 <main>
  bx lr
 8000b0a:	4770      	bx	lr
  ldr r0, =_sdata
 8000b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b10:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000b14:	080094f0 	.word	0x080094f0
  ldr r2, =_sbss
 8000b18:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000b1c:	20001028 	.word	0x20001028

08000b20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b20:	e7fe      	b.n	8000b20 <ADC1_2_IRQHandler>
	...

08000b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <HAL_Init+0x28>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a07      	ldr	r2, [pc, #28]	; (8000b4c <HAL_Init+0x28>)
 8000b2e:	f043 0310 	orr.w	r3, r3, #16
 8000b32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b34:	2003      	movs	r0, #3
 8000b36:	f000 f923 	bl	8000d80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3a:	200f      	movs	r0, #15
 8000b3c:	f000 f808 	bl	8000b50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b40:	f7ff fed2 	bl	80008e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40022000 	.word	0x40022000

08000b50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <HAL_InitTick+0x54>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_InitTick+0x58>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	4619      	mov	r1, r3
 8000b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 f93b 	bl	8000dea <HAL_SYSTICK_Config>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e00e      	b.n	8000b9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2b0f      	cmp	r3, #15
 8000b82:	d80a      	bhi.n	8000b9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b84:	2200      	movs	r2, #0
 8000b86:	6879      	ldr	r1, [r7, #4]
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295
 8000b8c:	f000 f903 	bl	8000d96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b90:	4a06      	ldr	r2, [pc, #24]	; (8000bac <HAL_InitTick+0x5c>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b96:	2300      	movs	r3, #0
 8000b98:	e000      	b.n	8000b9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000000 	.word	0x20000000
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	20000004 	.word	0x20000004

08000bb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <HAL_IncTick+0x1c>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <HAL_IncTick+0x20>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	4a03      	ldr	r2, [pc, #12]	; (8000bd0 <HAL_IncTick+0x20>)
 8000bc2:	6013      	str	r3, [r2, #0]
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	20000440 	.word	0x20000440

08000bd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd8:	4b02      	ldr	r3, [pc, #8]	; (8000be4 <HAL_GetTick+0x10>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr
 8000be4:	20000440 	.word	0x20000440

08000be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <__NVIC_SetPriorityGrouping+0x44>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c04:	4013      	ands	r3, r2
 8000c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1a:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <__NVIC_SetPriorityGrouping+0x44>)
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	60d3      	str	r3, [r2, #12]
}
 8000c20:	bf00      	nop
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c34:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <__NVIC_GetPriorityGrouping+0x18>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	0a1b      	lsrs	r3, r3, #8
 8000c3a:	f003 0307 	and.w	r3, r3, #7
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	db0b      	blt.n	8000c76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	f003 021f 	and.w	r2, r3, #31
 8000c64:	4906      	ldr	r1, [pc, #24]	; (8000c80 <__NVIC_EnableIRQ+0x34>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	095b      	lsrs	r3, r3, #5
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	e000e100 	.word	0xe000e100

08000c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	6039      	str	r1, [r7, #0]
 8000c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	db0a      	blt.n	8000cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	490c      	ldr	r1, [pc, #48]	; (8000cd0 <__NVIC_SetPriority+0x4c>)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	0112      	lsls	r2, r2, #4
 8000ca4:	b2d2      	uxtb	r2, r2
 8000ca6:	440b      	add	r3, r1
 8000ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cac:	e00a      	b.n	8000cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	4908      	ldr	r1, [pc, #32]	; (8000cd4 <__NVIC_SetPriority+0x50>)
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	f003 030f 	and.w	r3, r3, #15
 8000cba:	3b04      	subs	r3, #4
 8000cbc:	0112      	lsls	r2, r2, #4
 8000cbe:	b2d2      	uxtb	r2, r2
 8000cc0:	440b      	add	r3, r1
 8000cc2:	761a      	strb	r2, [r3, #24]
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000e100 	.word	0xe000e100
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b089      	sub	sp, #36	; 0x24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	f1c3 0307 	rsb	r3, r3, #7
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	bf28      	it	cs
 8000cf6:	2304      	movcs	r3, #4
 8000cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	2b06      	cmp	r3, #6
 8000d00:	d902      	bls.n	8000d08 <NVIC_EncodePriority+0x30>
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3b03      	subs	r3, #3
 8000d06:	e000      	b.n	8000d0a <NVIC_EncodePriority+0x32>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43da      	mvns	r2, r3
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d20:	f04f 31ff 	mov.w	r1, #4294967295
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2a:	43d9      	mvns	r1, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	4313      	orrs	r3, r2
         );
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3724      	adds	r7, #36	; 0x24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr

08000d3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d4c:	d301      	bcc.n	8000d52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e00f      	b.n	8000d72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d52:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <SysTick_Config+0x40>)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d5a:	210f      	movs	r1, #15
 8000d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d60:	f7ff ff90 	bl	8000c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d64:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <SysTick_Config+0x40>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d6a:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <SysTick_Config+0x40>)
 8000d6c:	2207      	movs	r2, #7
 8000d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	e000e010 	.word	0xe000e010

08000d80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f7ff ff2d 	bl	8000be8 <__NVIC_SetPriorityGrouping>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
 8000da2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000da8:	f7ff ff42 	bl	8000c30 <__NVIC_GetPriorityGrouping>
 8000dac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	68b9      	ldr	r1, [r7, #8]
 8000db2:	6978      	ldr	r0, [r7, #20]
 8000db4:	f7ff ff90 	bl	8000cd8 <NVIC_EncodePriority>
 8000db8:	4602      	mov	r2, r0
 8000dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dbe:	4611      	mov	r1, r2
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ff5f 	bl	8000c84 <__NVIC_SetPriority>
}
 8000dc6:	bf00      	nop
 8000dc8:	3718      	adds	r7, #24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff ff35 	bl	8000c4c <__NVIC_EnableIRQ>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f7ff ffa2 	bl	8000d3c <SysTick_Config>
 8000df8:	4603      	mov	r3, r0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b085      	sub	sp, #20
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d008      	beq.n	8000e2c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2204      	movs	r2, #4
 8000e1e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2200      	movs	r2, #0
 8000e24:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e020      	b.n	8000e6e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f022 020e 	bic.w	r2, r2, #14
 8000e3a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f022 0201 	bic.w	r2, r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e54:	2101      	movs	r1, #1
 8000e56:	fa01 f202 	lsl.w	r2, r1, r2
 8000e5a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e80:	2300      	movs	r3, #0
 8000e82:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d005      	beq.n	8000e9c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2204      	movs	r2, #4
 8000e94:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	73fb      	strb	r3, [r7, #15]
 8000e9a:	e051      	b.n	8000f40 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f022 020e 	bic.w	r2, r2, #14
 8000eaa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f022 0201 	bic.w	r2, r2, #1
 8000eba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a22      	ldr	r2, [pc, #136]	; (8000f4c <HAL_DMA_Abort_IT+0xd4>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d029      	beq.n	8000f1a <HAL_DMA_Abort_IT+0xa2>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a21      	ldr	r2, [pc, #132]	; (8000f50 <HAL_DMA_Abort_IT+0xd8>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d022      	beq.n	8000f16 <HAL_DMA_Abort_IT+0x9e>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a1f      	ldr	r2, [pc, #124]	; (8000f54 <HAL_DMA_Abort_IT+0xdc>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d01a      	beq.n	8000f10 <HAL_DMA_Abort_IT+0x98>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a1e      	ldr	r2, [pc, #120]	; (8000f58 <HAL_DMA_Abort_IT+0xe0>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d012      	beq.n	8000f0a <HAL_DMA_Abort_IT+0x92>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a1c      	ldr	r2, [pc, #112]	; (8000f5c <HAL_DMA_Abort_IT+0xe4>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d00a      	beq.n	8000f04 <HAL_DMA_Abort_IT+0x8c>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a1b      	ldr	r2, [pc, #108]	; (8000f60 <HAL_DMA_Abort_IT+0xe8>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d102      	bne.n	8000efe <HAL_DMA_Abort_IT+0x86>
 8000ef8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000efc:	e00e      	b.n	8000f1c <HAL_DMA_Abort_IT+0xa4>
 8000efe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f02:	e00b      	b.n	8000f1c <HAL_DMA_Abort_IT+0xa4>
 8000f04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f08:	e008      	b.n	8000f1c <HAL_DMA_Abort_IT+0xa4>
 8000f0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f0e:	e005      	b.n	8000f1c <HAL_DMA_Abort_IT+0xa4>
 8000f10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f14:	e002      	b.n	8000f1c <HAL_DMA_Abort_IT+0xa4>
 8000f16:	2310      	movs	r3, #16
 8000f18:	e000      	b.n	8000f1c <HAL_DMA_Abort_IT+0xa4>
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	4a11      	ldr	r2, [pc, #68]	; (8000f64 <HAL_DMA_Abort_IT+0xec>)
 8000f1e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2201      	movs	r2, #1
 8000f24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	4798      	blx	r3
    } 
  }
  return status;
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40020008 	.word	0x40020008
 8000f50:	4002001c 	.word	0x4002001c
 8000f54:	40020030 	.word	0x40020030
 8000f58:	40020044 	.word	0x40020044
 8000f5c:	40020058 	.word	0x40020058
 8000f60:	4002006c 	.word	0x4002006c
 8000f64:	40020000 	.word	0x40020000

08000f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b08b      	sub	sp, #44	; 0x2c
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f72:	2300      	movs	r3, #0
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f76:	2300      	movs	r3, #0
 8000f78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f7a:	e169      	b.n	8001250 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	69fa      	ldr	r2, [r7, #28]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	f040 8158 	bne.w	800124a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	4a9a      	ldr	r2, [pc, #616]	; (8001208 <HAL_GPIO_Init+0x2a0>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d05e      	beq.n	8001062 <HAL_GPIO_Init+0xfa>
 8000fa4:	4a98      	ldr	r2, [pc, #608]	; (8001208 <HAL_GPIO_Init+0x2a0>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d875      	bhi.n	8001096 <HAL_GPIO_Init+0x12e>
 8000faa:	4a98      	ldr	r2, [pc, #608]	; (800120c <HAL_GPIO_Init+0x2a4>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d058      	beq.n	8001062 <HAL_GPIO_Init+0xfa>
 8000fb0:	4a96      	ldr	r2, [pc, #600]	; (800120c <HAL_GPIO_Init+0x2a4>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d86f      	bhi.n	8001096 <HAL_GPIO_Init+0x12e>
 8000fb6:	4a96      	ldr	r2, [pc, #600]	; (8001210 <HAL_GPIO_Init+0x2a8>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d052      	beq.n	8001062 <HAL_GPIO_Init+0xfa>
 8000fbc:	4a94      	ldr	r2, [pc, #592]	; (8001210 <HAL_GPIO_Init+0x2a8>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d869      	bhi.n	8001096 <HAL_GPIO_Init+0x12e>
 8000fc2:	4a94      	ldr	r2, [pc, #592]	; (8001214 <HAL_GPIO_Init+0x2ac>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d04c      	beq.n	8001062 <HAL_GPIO_Init+0xfa>
 8000fc8:	4a92      	ldr	r2, [pc, #584]	; (8001214 <HAL_GPIO_Init+0x2ac>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d863      	bhi.n	8001096 <HAL_GPIO_Init+0x12e>
 8000fce:	4a92      	ldr	r2, [pc, #584]	; (8001218 <HAL_GPIO_Init+0x2b0>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d046      	beq.n	8001062 <HAL_GPIO_Init+0xfa>
 8000fd4:	4a90      	ldr	r2, [pc, #576]	; (8001218 <HAL_GPIO_Init+0x2b0>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d85d      	bhi.n	8001096 <HAL_GPIO_Init+0x12e>
 8000fda:	2b12      	cmp	r3, #18
 8000fdc:	d82a      	bhi.n	8001034 <HAL_GPIO_Init+0xcc>
 8000fde:	2b12      	cmp	r3, #18
 8000fe0:	d859      	bhi.n	8001096 <HAL_GPIO_Init+0x12e>
 8000fe2:	a201      	add	r2, pc, #4	; (adr r2, 8000fe8 <HAL_GPIO_Init+0x80>)
 8000fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe8:	08001063 	.word	0x08001063
 8000fec:	0800103d 	.word	0x0800103d
 8000ff0:	0800104f 	.word	0x0800104f
 8000ff4:	08001091 	.word	0x08001091
 8000ff8:	08001097 	.word	0x08001097
 8000ffc:	08001097 	.word	0x08001097
 8001000:	08001097 	.word	0x08001097
 8001004:	08001097 	.word	0x08001097
 8001008:	08001097 	.word	0x08001097
 800100c:	08001097 	.word	0x08001097
 8001010:	08001097 	.word	0x08001097
 8001014:	08001097 	.word	0x08001097
 8001018:	08001097 	.word	0x08001097
 800101c:	08001097 	.word	0x08001097
 8001020:	08001097 	.word	0x08001097
 8001024:	08001097 	.word	0x08001097
 8001028:	08001097 	.word	0x08001097
 800102c:	08001045 	.word	0x08001045
 8001030:	08001059 	.word	0x08001059
 8001034:	4a79      	ldr	r2, [pc, #484]	; (800121c <HAL_GPIO_Init+0x2b4>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d013      	beq.n	8001062 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800103a:	e02c      	b.n	8001096 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	623b      	str	r3, [r7, #32]
          break;
 8001042:	e029      	b.n	8001098 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	3304      	adds	r3, #4
 800104a:	623b      	str	r3, [r7, #32]
          break;
 800104c:	e024      	b.n	8001098 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	3308      	adds	r3, #8
 8001054:	623b      	str	r3, [r7, #32]
          break;
 8001056:	e01f      	b.n	8001098 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	330c      	adds	r3, #12
 800105e:	623b      	str	r3, [r7, #32]
          break;
 8001060:	e01a      	b.n	8001098 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d102      	bne.n	8001070 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800106a:	2304      	movs	r3, #4
 800106c:	623b      	str	r3, [r7, #32]
          break;
 800106e:	e013      	b.n	8001098 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d105      	bne.n	8001084 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001078:	2308      	movs	r3, #8
 800107a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	69fa      	ldr	r2, [r7, #28]
 8001080:	611a      	str	r2, [r3, #16]
          break;
 8001082:	e009      	b.n	8001098 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001084:	2308      	movs	r3, #8
 8001086:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	69fa      	ldr	r2, [r7, #28]
 800108c:	615a      	str	r2, [r3, #20]
          break;
 800108e:	e003      	b.n	8001098 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001090:	2300      	movs	r3, #0
 8001092:	623b      	str	r3, [r7, #32]
          break;
 8001094:	e000      	b.n	8001098 <HAL_GPIO_Init+0x130>
          break;
 8001096:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	2bff      	cmp	r3, #255	; 0xff
 800109c:	d801      	bhi.n	80010a2 <HAL_GPIO_Init+0x13a>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	e001      	b.n	80010a6 <HAL_GPIO_Init+0x13e>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3304      	adds	r3, #4
 80010a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	2bff      	cmp	r3, #255	; 0xff
 80010ac:	d802      	bhi.n	80010b4 <HAL_GPIO_Init+0x14c>
 80010ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	e002      	b.n	80010ba <HAL_GPIO_Init+0x152>
 80010b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b6:	3b08      	subs	r3, #8
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	210f      	movs	r1, #15
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	fa01 f303 	lsl.w	r3, r1, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	401a      	ands	r2, r3
 80010cc:	6a39      	ldr	r1, [r7, #32]
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	fa01 f303 	lsl.w	r3, r1, r3
 80010d4:	431a      	orrs	r2, r3
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f000 80b1 	beq.w	800124a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010e8:	4b4d      	ldr	r3, [pc, #308]	; (8001220 <HAL_GPIO_Init+0x2b8>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	4a4c      	ldr	r2, [pc, #304]	; (8001220 <HAL_GPIO_Init+0x2b8>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	6193      	str	r3, [r2, #24]
 80010f4:	4b4a      	ldr	r3, [pc, #296]	; (8001220 <HAL_GPIO_Init+0x2b8>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001100:	4a48      	ldr	r2, [pc, #288]	; (8001224 <HAL_GPIO_Init+0x2bc>)
 8001102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001104:	089b      	lsrs	r3, r3, #2
 8001106:	3302      	adds	r3, #2
 8001108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	f003 0303 	and.w	r3, r3, #3
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	220f      	movs	r2, #15
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	4013      	ands	r3, r2
 8001122:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a40      	ldr	r2, [pc, #256]	; (8001228 <HAL_GPIO_Init+0x2c0>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d013      	beq.n	8001154 <HAL_GPIO_Init+0x1ec>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a3f      	ldr	r2, [pc, #252]	; (800122c <HAL_GPIO_Init+0x2c4>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d00d      	beq.n	8001150 <HAL_GPIO_Init+0x1e8>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a3e      	ldr	r2, [pc, #248]	; (8001230 <HAL_GPIO_Init+0x2c8>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d007      	beq.n	800114c <HAL_GPIO_Init+0x1e4>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a3d      	ldr	r2, [pc, #244]	; (8001234 <HAL_GPIO_Init+0x2cc>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d101      	bne.n	8001148 <HAL_GPIO_Init+0x1e0>
 8001144:	2303      	movs	r3, #3
 8001146:	e006      	b.n	8001156 <HAL_GPIO_Init+0x1ee>
 8001148:	2304      	movs	r3, #4
 800114a:	e004      	b.n	8001156 <HAL_GPIO_Init+0x1ee>
 800114c:	2302      	movs	r3, #2
 800114e:	e002      	b.n	8001156 <HAL_GPIO_Init+0x1ee>
 8001150:	2301      	movs	r3, #1
 8001152:	e000      	b.n	8001156 <HAL_GPIO_Init+0x1ee>
 8001154:	2300      	movs	r3, #0
 8001156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001158:	f002 0203 	and.w	r2, r2, #3
 800115c:	0092      	lsls	r2, r2, #2
 800115e:	4093      	lsls	r3, r2
 8001160:	68fa      	ldr	r2, [r7, #12]
 8001162:	4313      	orrs	r3, r2
 8001164:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001166:	492f      	ldr	r1, [pc, #188]	; (8001224 <HAL_GPIO_Init+0x2bc>)
 8001168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	3302      	adds	r3, #2
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d006      	beq.n	800118e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001180:	4b2d      	ldr	r3, [pc, #180]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	492c      	ldr	r1, [pc, #176]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	608b      	str	r3, [r1, #8]
 800118c:	e006      	b.n	800119c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800118e:	4b2a      	ldr	r3, [pc, #168]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 8001190:	689a      	ldr	r2, [r3, #8]
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	43db      	mvns	r3, r3
 8001196:	4928      	ldr	r1, [pc, #160]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 8001198:	4013      	ands	r3, r2
 800119a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d006      	beq.n	80011b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011a8:	4b23      	ldr	r3, [pc, #140]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 80011aa:	68da      	ldr	r2, [r3, #12]
 80011ac:	4922      	ldr	r1, [pc, #136]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	60cb      	str	r3, [r1, #12]
 80011b4:	e006      	b.n	80011c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011b6:	4b20      	ldr	r3, [pc, #128]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 80011b8:	68da      	ldr	r2, [r3, #12]
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	43db      	mvns	r3, r3
 80011be:	491e      	ldr	r1, [pc, #120]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 80011c0:	4013      	ands	r3, r2
 80011c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d006      	beq.n	80011de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011d0:	4b19      	ldr	r3, [pc, #100]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 80011d2:	685a      	ldr	r2, [r3, #4]
 80011d4:	4918      	ldr	r1, [pc, #96]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	4313      	orrs	r3, r2
 80011da:	604b      	str	r3, [r1, #4]
 80011dc:	e006      	b.n	80011ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011de:	4b16      	ldr	r3, [pc, #88]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	4914      	ldr	r1, [pc, #80]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 80011e8:	4013      	ands	r3, r2
 80011ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d021      	beq.n	800123c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	490e      	ldr	r1, [pc, #56]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	600b      	str	r3, [r1, #0]
 8001204:	e021      	b.n	800124a <HAL_GPIO_Init+0x2e2>
 8001206:	bf00      	nop
 8001208:	10320000 	.word	0x10320000
 800120c:	10310000 	.word	0x10310000
 8001210:	10220000 	.word	0x10220000
 8001214:	10210000 	.word	0x10210000
 8001218:	10120000 	.word	0x10120000
 800121c:	10110000 	.word	0x10110000
 8001220:	40021000 	.word	0x40021000
 8001224:	40010000 	.word	0x40010000
 8001228:	40010800 	.word	0x40010800
 800122c:	40010c00 	.word	0x40010c00
 8001230:	40011000 	.word	0x40011000
 8001234:	40011400 	.word	0x40011400
 8001238:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <HAL_GPIO_Init+0x304>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	43db      	mvns	r3, r3
 8001244:	4909      	ldr	r1, [pc, #36]	; (800126c <HAL_GPIO_Init+0x304>)
 8001246:	4013      	ands	r3, r2
 8001248:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800124a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124c:	3301      	adds	r3, #1
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001256:	fa22 f303 	lsr.w	r3, r2, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	f47f ae8e 	bne.w	8000f7c <HAL_GPIO_Init+0x14>
  }
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	372c      	adds	r7, #44	; 0x2c
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr
 800126c:	40010400 	.word	0x40010400

08001270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	807b      	strh	r3, [r7, #2]
 800127c:	4613      	mov	r3, r2
 800127e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001280:	787b      	ldrb	r3, [r7, #1]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001286:	887a      	ldrh	r2, [r7, #2]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800128c:	e003      	b.n	8001296 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800128e:	887b      	ldrh	r3, [r7, #2]
 8001290:	041a      	lsls	r2, r3, #16
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	611a      	str	r2, [r3, #16]
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr

080012a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012a2:	b08b      	sub	sp, #44	; 0x2c
 80012a4:	af06      	add	r7, sp, #24
 80012a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e0f1      	b.n	8001496 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d106      	bne.n	80012cc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f007 fdf2 	bl	8008eb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2203      	movs	r2, #3
 80012d0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f003 fcb1 	bl	8004c40 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	603b      	str	r3, [r7, #0]
 80012e4:	687e      	ldr	r6, [r7, #4]
 80012e6:	466d      	mov	r5, sp
 80012e8:	f106 0410 	add.w	r4, r6, #16
 80012ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012f0:	6823      	ldr	r3, [r4, #0]
 80012f2:	602b      	str	r3, [r5, #0]
 80012f4:	1d33      	adds	r3, r6, #4
 80012f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012f8:	6838      	ldr	r0, [r7, #0]
 80012fa:	f003 fc7b 	bl	8004bf4 <USB_CoreInit>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d005      	beq.n	8001310 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2202      	movs	r2, #2
 8001308:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e0c2      	b.n	8001496 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2100      	movs	r1, #0
 8001316:	4618      	mov	r0, r3
 8001318:	f003 fcac 	bl	8004c74 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800131c:	2300      	movs	r3, #0
 800131e:	73fb      	strb	r3, [r7, #15]
 8001320:	e040      	b.n	80013a4 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	1c5a      	adds	r2, r3, #1
 8001328:	4613      	mov	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4413      	add	r3, r2
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	440b      	add	r3, r1
 8001332:	3301      	adds	r3, #1
 8001334:	2201      	movs	r2, #1
 8001336:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	1c5a      	adds	r2, r3, #1
 800133e:	4613      	mov	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	440b      	add	r3, r1
 8001348:	7bfa      	ldrb	r2, [r7, #15]
 800134a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	1c5a      	adds	r2, r3, #1
 8001352:	4613      	mov	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	440b      	add	r3, r1
 800135c:	3303      	adds	r3, #3
 800135e:	2200      	movs	r2, #0
 8001360:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001362:	7bfa      	ldrb	r2, [r7, #15]
 8001364:	6879      	ldr	r1, [r7, #4]
 8001366:	4613      	mov	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	440b      	add	r3, r1
 8001370:	3338      	adds	r3, #56	; 0x38
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001376:	7bfa      	ldrb	r2, [r7, #15]
 8001378:	6879      	ldr	r1, [r7, #4]
 800137a:	4613      	mov	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	440b      	add	r3, r1
 8001384:	333c      	adds	r3, #60	; 0x3c
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800138a:	7bfa      	ldrb	r2, [r7, #15]
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	4613      	mov	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	440b      	add	r3, r1
 8001398:	3340      	adds	r3, #64	; 0x40
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	3301      	adds	r3, #1
 80013a2:	73fb      	strb	r3, [r7, #15]
 80013a4:	7bfa      	ldrb	r2, [r7, #15]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d3b9      	bcc.n	8001322 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	73fb      	strb	r3, [r7, #15]
 80013b2:	e044      	b.n	800143e <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013b4:	7bfa      	ldrb	r2, [r7, #15]
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	440b      	add	r3, r1
 80013c2:	f203 1369 	addw	r3, r3, #361	; 0x169
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013ca:	7bfa      	ldrb	r2, [r7, #15]
 80013cc:	6879      	ldr	r1, [r7, #4]
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	440b      	add	r3, r1
 80013d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013dc:	7bfa      	ldrb	r2, [r7, #15]
 80013de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013e0:	7bfa      	ldrb	r2, [r7, #15]
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	4613      	mov	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	440b      	add	r3, r1
 80013ee:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80013f2:	2200      	movs	r2, #0
 80013f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013f6:	7bfa      	ldrb	r2, [r7, #15]
 80013f8:	6879      	ldr	r1, [r7, #4]
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	440b      	add	r3, r1
 8001404:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800140c:	7bfa      	ldrb	r2, [r7, #15]
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	440b      	add	r3, r1
 800141a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001422:	7bfa      	ldrb	r2, [r7, #15]
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	4613      	mov	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	440b      	add	r3, r1
 8001430:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	3301      	adds	r3, #1
 800143c:	73fb      	strb	r3, [r7, #15]
 800143e:	7bfa      	ldrb	r2, [r7, #15]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	429a      	cmp	r2, r3
 8001446:	d3b5      	bcc.n	80013b4 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	603b      	str	r3, [r7, #0]
 800144e:	687e      	ldr	r6, [r7, #4]
 8001450:	466d      	mov	r5, sp
 8001452:	f106 0410 	add.w	r4, r6, #16
 8001456:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001458:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800145a:	6823      	ldr	r3, [r4, #0]
 800145c:	602b      	str	r3, [r5, #0]
 800145e:	1d33      	adds	r3, r6, #4
 8001460:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001462:	6838      	ldr	r0, [r7, #0]
 8001464:	f003 fc12 	bl	8004c8c <USB_DevInit>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d005      	beq.n	800147a <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2202      	movs	r2, #2
 8001472:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e00d      	b.n	8001496 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2201      	movs	r2, #1
 8001486:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f005 fe93 	bl	80071ba <USB_DevDisconnect>

  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800149e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d101      	bne.n	80014b4 <HAL_PCD_Start+0x16>
 80014b0:	2302      	movs	r3, #2
 80014b2:	e016      	b.n	80014e2 <HAL_PCD_Start+0x44>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2201      	movs	r2, #1
 80014b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f003 fba7 	bl	8004c14 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80014c6:	2101      	movs	r1, #1
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f007 ff64 	bl	8009396 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f005 fe67 	bl	80071a6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b088      	sub	sp, #32
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f005 fe69 	bl	80071ce <USB_ReadInterrupts>
 80014fc:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f000 fb1b 	bl	8001b44 <PCD_EP_ISR_Handler>

    return;
 800150e:	e119      	b.n	8001744 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001516:	2b00      	cmp	r3, #0
 8001518:	d013      	beq.n	8001542 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001522:	b29a      	uxth	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800152c:	b292      	uxth	r2, r2
 800152e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f007 fd37 	bl	8008fa6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001538:	2100      	movs	r1, #0
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 f905 	bl	800174a <HAL_PCD_SetAddress>

    return;
 8001540:	e100      	b.n	8001744 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d00c      	beq.n	8001566 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001554:	b29a      	uxth	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800155e:	b292      	uxth	r2, r2
 8001560:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001564:	e0ee      	b.n	8001744 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d00c      	beq.n	800158a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001578:	b29a      	uxth	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001582:	b292      	uxth	r2, r2
 8001584:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001588:	e0dc      	b.n	8001744 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d027      	beq.n	80015e4 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800159c:	b29a      	uxth	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 0204 	bic.w	r2, r2, #4
 80015a6:	b292      	uxth	r2, r2
 80015a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 0208 	bic.w	r2, r2, #8
 80015be:	b292      	uxth	r2, r2
 80015c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f007 fd27 	bl	8009018 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80015dc:	b292      	uxth	r2, r2
 80015de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80015e2:	e0af      	b.n	8001744 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 8083 	beq.w	80016f6 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80015f0:	2300      	movs	r3, #0
 80015f2:	77fb      	strb	r3, [r7, #31]
 80015f4:	e010      	b.n	8001618 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	461a      	mov	r2, r3
 80015fc:	7ffb      	ldrb	r3, [r7, #31]
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	441a      	add	r2, r3
 8001602:	7ffb      	ldrb	r3, [r7, #31]
 8001604:	8812      	ldrh	r2, [r2, #0]
 8001606:	b292      	uxth	r2, r2
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	3320      	adds	r3, #32
 800160c:	443b      	add	r3, r7
 800160e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001612:	7ffb      	ldrb	r3, [r7, #31]
 8001614:	3301      	adds	r3, #1
 8001616:	77fb      	strb	r3, [r7, #31]
 8001618:	7ffb      	ldrb	r3, [r7, #31]
 800161a:	2b07      	cmp	r3, #7
 800161c:	d9eb      	bls.n	80015f6 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001626:	b29a      	uxth	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f042 0201 	orr.w	r2, r2, #1
 8001630:	b292      	uxth	r2, r2
 8001632:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800163e:	b29a      	uxth	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0201 	bic.w	r2, r2, #1
 8001648:	b292      	uxth	r2, r2
 800164a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800164e:	bf00      	nop
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001658:	b29b      	uxth	r3, r3
 800165a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0f6      	beq.n	8001650 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800166a:	b29a      	uxth	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001674:	b292      	uxth	r2, r2
 8001676:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800167a:	2300      	movs	r3, #0
 800167c:	77fb      	strb	r3, [r7, #31]
 800167e:	e00f      	b.n	80016a0 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001680:	7ffb      	ldrb	r3, [r7, #31]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6812      	ldr	r2, [r2, #0]
 8001686:	4611      	mov	r1, r2
 8001688:	7ffa      	ldrb	r2, [r7, #31]
 800168a:	0092      	lsls	r2, r2, #2
 800168c:	440a      	add	r2, r1
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	3320      	adds	r3, #32
 8001692:	443b      	add	r3, r7
 8001694:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001698:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800169a:	7ffb      	ldrb	r3, [r7, #31]
 800169c:	3301      	adds	r3, #1
 800169e:	77fb      	strb	r3, [r7, #31]
 80016a0:	7ffb      	ldrb	r3, [r7, #31]
 80016a2:	2b07      	cmp	r3, #7
 80016a4:	d9ec      	bls.n	8001680 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f042 0208 	orr.w	r2, r2, #8
 80016b8:	b292      	uxth	r2, r2
 80016ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016d0:	b292      	uxth	r2, r2
 80016d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016de:	b29a      	uxth	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f042 0204 	orr.w	r2, r2, #4
 80016e8:	b292      	uxth	r2, r2
 80016ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f007 fc78 	bl	8008fe4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80016f4:	e026      	b.n	8001744 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d00f      	beq.n	8001720 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001708:	b29a      	uxth	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001712:	b292      	uxth	r2, r2
 8001714:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f007 fc36 	bl	8008f8a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800171e:	e011      	b.n	8001744 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00c      	beq.n	8001744 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001732:	b29a      	uxth	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800173c:	b292      	uxth	r2, r2
 800173e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001742:	bf00      	nop
  }
}
 8001744:	3720      	adds	r7, #32
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
 8001752:	460b      	mov	r3, r1
 8001754:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800175c:	2b01      	cmp	r3, #1
 800175e:	d101      	bne.n	8001764 <HAL_PCD_SetAddress+0x1a>
 8001760:	2302      	movs	r3, #2
 8001762:	e013      	b.n	800178c <HAL_PCD_SetAddress+0x42>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	78fa      	ldrb	r2, [r7, #3]
 8001770:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	78fa      	ldrb	r2, [r7, #3]
 800177a:	4611      	mov	r1, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f005 fcff 	bl	8007180 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	4608      	mov	r0, r1
 800179e:	4611      	mov	r1, r2
 80017a0:	461a      	mov	r2, r3
 80017a2:	4603      	mov	r3, r0
 80017a4:	70fb      	strb	r3, [r7, #3]
 80017a6:	460b      	mov	r3, r1
 80017a8:	803b      	strh	r3, [r7, #0]
 80017aa:	4613      	mov	r3, r2
 80017ac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	da0e      	bge.n	80017d8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017ba:	78fb      	ldrb	r3, [r7, #3]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	1c5a      	adds	r2, r3, #1
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2201      	movs	r2, #1
 80017d4:	705a      	strb	r2, [r3, #1]
 80017d6:	e00e      	b.n	80017f6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017d8:	78fb      	ldrb	r3, [r7, #3]
 80017da:	f003 0207 	and.w	r2, r3, #7
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2200      	movs	r2, #0
 80017f4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80017f6:	78fb      	ldrb	r3, [r7, #3]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001802:	883a      	ldrh	r2, [r7, #0]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	78ba      	ldrb	r2, [r7, #2]
 800180c:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800180e:	78bb      	ldrb	r3, [r7, #2]
 8001810:	2b02      	cmp	r3, #2
 8001812:	d102      	bne.n	800181a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001820:	2b01      	cmp	r3, #1
 8001822:	d101      	bne.n	8001828 <HAL_PCD_EP_Open+0x94>
 8001824:	2302      	movs	r3, #2
 8001826:	e00e      	b.n	8001846 <HAL_PCD_EP_Open+0xb2>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68f9      	ldr	r1, [r7, #12]
 8001836:	4618      	mov	r0, r3
 8001838:	f003 fa48 	bl	8004ccc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001844:	7afb      	ldrb	r3, [r7, #11]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b084      	sub	sp, #16
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
 8001856:	460b      	mov	r3, r1
 8001858:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800185a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800185e:	2b00      	cmp	r3, #0
 8001860:	da0e      	bge.n	8001880 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001862:	78fb      	ldrb	r3, [r7, #3]
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	1c5a      	adds	r2, r3, #1
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2201      	movs	r2, #1
 800187c:	705a      	strb	r2, [r3, #1]
 800187e:	e00e      	b.n	800189e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001880:	78fb      	ldrb	r3, [r7, #3]
 8001882:	f003 0207 	and.w	r2, r3, #7
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2200      	movs	r2, #0
 800189c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800189e:	78fb      	ldrb	r3, [r7, #3]
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d101      	bne.n	80018b8 <HAL_PCD_EP_Close+0x6a>
 80018b4:	2302      	movs	r3, #2
 80018b6:	e00e      	b.n	80018d6 <HAL_PCD_EP_Close+0x88>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	68f9      	ldr	r1, [r7, #12]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f003 fdc0 	bl	800544c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	607a      	str	r2, [r7, #4]
 80018e8:	603b      	str	r3, [r7, #0]
 80018ea:	460b      	mov	r3, r1
 80018ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018ee:	7afb      	ldrb	r3, [r7, #11]
 80018f0:	f003 0207 	and.w	r2, r3, #7
 80018f4:	4613      	mov	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	4413      	add	r3, r2
 8001904:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2200      	movs	r2, #0
 8001916:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	2200      	movs	r2, #0
 800191c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800191e:	7afb      	ldrb	r3, [r7, #11]
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	b2da      	uxtb	r2, r3
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6979      	ldr	r1, [r7, #20]
 8001930:	4618      	mov	r0, r3
 8001932:	f003 ff77 	bl	8005824 <USB_EPStartXfer>

  return HAL_OK;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800194c:	78fb      	ldrb	r3, [r7, #3]
 800194e:	f003 0207 	and.w	r2, r3, #7
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	4613      	mov	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	440b      	add	r3, r1
 800195e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001962:	681b      	ldr	r3, [r3, #0]
}
 8001964:	4618      	mov	r0, r3
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr

0800196e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b086      	sub	sp, #24
 8001972:	af00      	add	r7, sp, #0
 8001974:	60f8      	str	r0, [r7, #12]
 8001976:	607a      	str	r2, [r7, #4]
 8001978:	603b      	str	r3, [r7, #0]
 800197a:	460b      	mov	r3, r1
 800197c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800197e:	7afb      	ldrb	r3, [r7, #11]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	1c5a      	adds	r2, r3, #1
 8001986:	4613      	mov	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	4413      	add	r3, r2
 8001992:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	2200      	movs	r2, #0
 80019b2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	2201      	movs	r2, #1
 80019b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019ba:	7afb      	ldrb	r3, [r7, #11]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6979      	ldr	r1, [r7, #20]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f003 ff29 	bl	8005824 <USB_EPStartXfer>

  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80019e8:	78fb      	ldrb	r3, [r7, #3]
 80019ea:	f003 0207 	and.w	r2, r3, #7
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d901      	bls.n	80019fa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e04c      	b.n	8001a94 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80019fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	da0e      	bge.n	8001a20 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a02:	78fb      	ldrb	r3, [r7, #3]
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	1c5a      	adds	r2, r3, #1
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	705a      	strb	r2, [r3, #1]
 8001a1e:	e00c      	b.n	8001a3a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a20:	78fa      	ldrb	r2, [r7, #3]
 8001a22:	4613      	mov	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2200      	movs	r2, #0
 8001a38:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a40:	78fb      	ldrb	r3, [r7, #3]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d101      	bne.n	8001a5a <HAL_PCD_EP_SetStall+0x7e>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e01c      	b.n	8001a94 <HAL_PCD_EP_SetStall+0xb8>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68f9      	ldr	r1, [r7, #12]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f005 fa8c 	bl	8006f86 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a6e:	78fb      	ldrb	r3, [r7, #3]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d108      	bne.n	8001a8a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001a82:	4619      	mov	r1, r3
 8001a84:	4610      	mov	r0, r2
 8001a86:	f005 fbb1 	bl	80071ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001aa8:	78fb      	ldrb	r3, [r7, #3]
 8001aaa:	f003 020f 	and.w	r2, r3, #15
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d901      	bls.n	8001aba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e040      	b.n	8001b3c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001aba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	da0e      	bge.n	8001ae0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ac2:	78fb      	ldrb	r3, [r7, #3]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	4613      	mov	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2201      	movs	r2, #1
 8001adc:	705a      	strb	r2, [r3, #1]
 8001ade:	e00e      	b.n	8001afe <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ae0:	78fb      	ldrb	r3, [r7, #3]
 8001ae2:	f003 0207 	and.w	r2, r3, #7
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2200      	movs	r2, #0
 8001afc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b04:	78fb      	ldrb	r3, [r7, #3]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d101      	bne.n	8001b1e <HAL_PCD_EP_ClrStall+0x82>
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	e00e      	b.n	8001b3c <HAL_PCD_EP_ClrStall+0xa0>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68f9      	ldr	r1, [r7, #12]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f005 fa7a 	bl	8007026 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b096      	sub	sp, #88	; 0x58
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b4c:	e3bf      	b.n	80022ce <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b56:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001b5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	f003 030f 	and.w	r3, r3, #15
 8001b64:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001b68:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f040 8179 	bne.w	8001e64 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001b72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001b76:	f003 0310 	and.w	r3, r3, #16
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d152      	bne.n	8001c24 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b8e:	81fb      	strh	r3, [r7, #14]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	89fb      	ldrh	r3, [r7, #14]
 8001b96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3328      	adds	r3, #40	; 0x28
 8001ba6:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	4413      	add	r3, r2
 8001bbc:	3302      	adds	r3, #2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6812      	ldr	r2, [r2, #0]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001bd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bd2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bd6:	695a      	ldr	r2, [r3, #20]
 8001bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	441a      	add	r2, r3
 8001bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001be0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001be2:	2100      	movs	r1, #0
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f007 f9b6 	bl	8008f56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 836b 	beq.w	80022ce <PCD_EP_ISR_Handler+0x78a>
 8001bf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f040 8366 	bne.w	80022ce <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	b292      	uxth	r2, r2
 8001c16:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001c22:	e354      	b.n	80022ce <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c2a:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001c36:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d034      	beq.n	8001cac <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	4413      	add	r3, r2
 8001c56:	3306      	adds	r3, #6
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6812      	ldr	r2, [r2, #0]
 8001c5e:	4413      	add	r3, r2
 8001c60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c6c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6818      	ldr	r0, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c7a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c7e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	f005 fb03 	bl	800728c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c92:	4013      	ands	r3, r2
 8001c94:	823b      	strh	r3, [r7, #16]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	8a3a      	ldrh	r2, [r7, #16]
 8001c9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ca0:	b292      	uxth	r2, r2
 8001ca2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f007 f929 	bl	8008efc <HAL_PCD_SetupStageCallback>
 8001caa:	e310      	b.n	80022ce <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001cac:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f280 830c 	bge.w	80022ce <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	83fb      	strh	r3, [r7, #30]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	8bfa      	ldrh	r2, [r7, #30]
 8001ccc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cd0:	b292      	uxth	r2, r2
 8001cd2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	461a      	mov	r2, r3
 8001ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3306      	adds	r3, #6
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	6812      	ldr	r2, [r2, #0]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cfe:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d019      	beq.n	8001d3c <PCD_EP_ISR_Handler+0x1f8>
 8001d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d015      	beq.n	8001d3c <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6818      	ldr	r0, [r3, #0]
 8001d14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d16:	6959      	ldr	r1, [r3, #20]
 8001d18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d1a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d1e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	f005 fab3 	bl	800728c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d28:	695a      	ldr	r2, [r3, #20]
 8001d2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	441a      	add	r2, r3
 8001d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d32:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001d34:	2100      	movs	r1, #0
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f007 f8f2 	bl	8008f20 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001d46:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f040 82bd 	bne.w	80022ce <PCD_EP_ISR_Handler+0x78a>
 8001d54:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d58:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001d5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001d60:	f000 82b5 	beq.w	80022ce <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	61bb      	str	r3, [r7, #24]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	461a      	mov	r2, r3
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	4413      	add	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	801a      	strh	r2, [r3, #0]
 8001d94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	2b3e      	cmp	r3, #62	; 0x3e
 8001d9a:	d91d      	bls.n	8001dd8 <PCD_EP_ISR_Handler+0x294>
 8001d9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	095b      	lsrs	r3, r3, #5
 8001da2:	647b      	str	r3, [r7, #68]	; 0x44
 8001da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	f003 031f 	and.w	r3, r3, #31
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d102      	bne.n	8001db6 <PCD_EP_ISR_Handler+0x272>
 8001db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001db2:	3b01      	subs	r3, #1
 8001db4:	647b      	str	r3, [r7, #68]	; 0x44
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	029b      	lsls	r3, r3, #10
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	801a      	strh	r2, [r3, #0]
 8001dd6:	e026      	b.n	8001e26 <PCD_EP_ISR_Handler+0x2e2>
 8001dd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10a      	bne.n	8001df6 <PCD_EP_ISR_Handler+0x2b2>
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	801a      	strh	r2, [r3, #0]
 8001df4:	e017      	b.n	8001e26 <PCD_EP_ISR_Handler+0x2e2>
 8001df6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	085b      	lsrs	r3, r3, #1
 8001dfc:	647b      	str	r3, [r7, #68]	; 0x44
 8001dfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d002      	beq.n	8001e10 <PCD_EP_ISR_Handler+0x2cc>
 8001e0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	647b      	str	r3, [r7, #68]	; 0x44
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	029b      	lsls	r3, r3, #10
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e36:	827b      	strh	r3, [r7, #18]
 8001e38:	8a7b      	ldrh	r3, [r7, #18]
 8001e3a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001e3e:	827b      	strh	r3, [r7, #18]
 8001e40:	8a7b      	ldrh	r3, [r7, #18]
 8001e42:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e46:	827b      	strh	r3, [r7, #18]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	8a7b      	ldrh	r3, [r7, #18]
 8001e4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	8013      	strh	r3, [r2, #0]
 8001e62:	e234      	b.n	80022ce <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e78:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f280 80fc 	bge.w	800207a <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	461a      	mov	r2, r3
 8001e88:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e98:	4013      	ands	r3, r2
 8001e9a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001eb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001eb4:	b292      	uxth	r2, r2
 8001eb6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001eb8:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	4413      	add	r3, r2
 8001ecc:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001ece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ed0:	7b1b      	ldrb	r3, [r3, #12]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d125      	bne.n	8001f22 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4413      	add	r3, r2
 8001eea:	3306      	adds	r3, #6
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6812      	ldr	r2, [r2, #0]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ef8:	881b      	ldrh	r3, [r3, #0]
 8001efa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001efe:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001f02:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 8092 	beq.w	8002030 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6818      	ldr	r0, [r3, #0]
 8001f10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f12:	6959      	ldr	r1, [r3, #20]
 8001f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f16:	88da      	ldrh	r2, [r3, #6]
 8001f18:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001f1c:	f005 f9b6 	bl	800728c <USB_ReadPMA>
 8001f20:	e086      	b.n	8002030 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f24:	78db      	ldrb	r3, [r3, #3]
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d10a      	bne.n	8001f40 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001f2a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f2e:	461a      	mov	r2, r3
 8001f30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f9d9 	bl	80022ea <HAL_PCD_EP_DB_Receive>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001f3e:	e077      	b.n	8002030 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f5a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	461a      	mov	r2, r3
 8001f64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	441a      	add	r2, r3
 8001f6c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001f70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d024      	beq.n	8001fe8 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	461a      	mov	r2, r3
 8001faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3302      	adds	r3, #2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6812      	ldr	r2, [r2, #0]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fc6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001fca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d02e      	beq.n	8002030 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6818      	ldr	r0, [r3, #0]
 8001fd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd8:	6959      	ldr	r1, [r3, #20]
 8001fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fdc:	891a      	ldrh	r2, [r3, #8]
 8001fde:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001fe2:	f005 f953 	bl	800728c <USB_ReadPMA>
 8001fe6:	e023      	b.n	8002030 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3306      	adds	r3, #6
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	4413      	add	r3, r2
 8002006:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002010:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002014:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002018:	2b00      	cmp	r3, #0
 800201a:	d009      	beq.n	8002030 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002022:	6959      	ldr	r1, [r3, #20]
 8002024:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002026:	895a      	ldrh	r2, [r3, #10]
 8002028:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800202c:	f005 f92e 	bl	800728c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002030:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002032:	69da      	ldr	r2, [r3, #28]
 8002034:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002038:	441a      	add	r2, r3
 800203a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800203c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800203e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002040:	695a      	ldr	r2, [r3, #20]
 8002042:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002046:	441a      	add	r2, r3
 8002048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800204a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800204c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d005      	beq.n	8002060 <PCD_EP_ISR_Handler+0x51c>
 8002054:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	429a      	cmp	r2, r3
 800205e:	d206      	bcs.n	800206e <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	4619      	mov	r1, r3
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f006 ff5a 	bl	8008f20 <HAL_PCD_DataOutStageCallback>
 800206c:	e005      	b.n	800207a <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002074:	4618      	mov	r0, r3
 8002076:	f003 fbd5 	bl	8005824 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800207a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800207e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 8123 	beq.w	80022ce <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8002088:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	4413      	add	r3, r2
 800209a:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80020b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	461a      	mov	r2, r3
 80020c0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	441a      	add	r2, r3
 80020c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80020cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80020d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020da:	78db      	ldrb	r3, [r3, #3]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	f040 80a2 	bne.w	8002226 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 80020e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020e4:	2200      	movs	r2, #0
 80020e6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80020e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020ea:	7b1b      	ldrb	r3, [r3, #12]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 8093 	beq.w	8002218 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020f2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80020f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d046      	beq.n	800218c <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002100:	785b      	ldrb	r3, [r3, #1]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d126      	bne.n	8002154 <PCD_EP_ISR_Handler+0x610>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002114:	b29b      	uxth	r3, r3
 8002116:	461a      	mov	r2, r3
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	4413      	add	r3, r2
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
 800211e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	011a      	lsls	r2, r3, #4
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	4413      	add	r3, r2
 8002128:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800212c:	623b      	str	r3, [r7, #32]
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	b29b      	uxth	r3, r3
 8002134:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002138:	b29a      	uxth	r2, r3
 800213a:	6a3b      	ldr	r3, [r7, #32]
 800213c:	801a      	strh	r2, [r3, #0]
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	b29b      	uxth	r3, r3
 8002144:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002148:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800214c:	b29a      	uxth	r2, r3
 800214e:	6a3b      	ldr	r3, [r7, #32]
 8002150:	801a      	strh	r2, [r3, #0]
 8002152:	e061      	b.n	8002218 <PCD_EP_ISR_Handler+0x6d4>
 8002154:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002156:	785b      	ldrb	r3, [r3, #1]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d15d      	bne.n	8002218 <PCD_EP_ISR_Handler+0x6d4>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800216a:	b29b      	uxth	r3, r3
 800216c:	461a      	mov	r2, r3
 800216e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002170:	4413      	add	r3, r2
 8002172:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002174:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	011a      	lsls	r2, r3, #4
 800217a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217c:	4413      	add	r3, r2
 800217e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002182:	62bb      	str	r3, [r7, #40]	; 0x28
 8002184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002186:	2200      	movs	r2, #0
 8002188:	801a      	strh	r2, [r3, #0]
 800218a:	e045      	b.n	8002218 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002194:	785b      	ldrb	r3, [r3, #1]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d126      	bne.n	80021e8 <PCD_EP_ISR_Handler+0x6a4>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	637b      	str	r3, [r7, #52]	; 0x34
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	461a      	mov	r2, r3
 80021ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ae:	4413      	add	r3, r2
 80021b0:	637b      	str	r3, [r7, #52]	; 0x34
 80021b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	011a      	lsls	r2, r3, #4
 80021b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ba:	4413      	add	r3, r2
 80021bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80021c0:	633b      	str	r3, [r7, #48]	; 0x30
 80021c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c4:	881b      	ldrh	r3, [r3, #0]
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d0:	801a      	strh	r2, [r3, #0]
 80021d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e4:	801a      	strh	r2, [r3, #0]
 80021e6:	e017      	b.n	8002218 <PCD_EP_ISR_Handler+0x6d4>
 80021e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ea:	785b      	ldrb	r3, [r3, #1]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d113      	bne.n	8002218 <PCD_EP_ISR_Handler+0x6d4>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	461a      	mov	r2, r3
 80021fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021fe:	4413      	add	r3, r2
 8002200:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	011a      	lsls	r2, r3, #4
 8002208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800220a:	4413      	add	r3, r2
 800220c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002210:	63bb      	str	r3, [r7, #56]	; 0x38
 8002212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002214:	2200      	movs	r2, #0
 8002216:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	4619      	mov	r1, r3
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f006 fe99 	bl	8008f56 <HAL_PCD_DataInStageCallback>
 8002224:	e053      	b.n	80022ce <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002226:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800222a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222e:	2b00      	cmp	r3, #0
 8002230:	d146      	bne.n	80022c0 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800223a:	b29b      	uxth	r3, r3
 800223c:	461a      	mov	r2, r3
 800223e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	4413      	add	r3, r2
 8002246:	3302      	adds	r3, #2
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6812      	ldr	r2, [r2, #0]
 800224e:	4413      	add	r3, r2
 8002250:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800225a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800225e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002260:	699a      	ldr	r2, [r3, #24]
 8002262:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002266:	429a      	cmp	r2, r3
 8002268:	d907      	bls.n	800227a <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 800226a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800226c:	699a      	ldr	r2, [r3, #24]
 800226e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002272:	1ad2      	subs	r2, r2, r3
 8002274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002276:	619a      	str	r2, [r3, #24]
 8002278:	e002      	b.n	8002280 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 800227a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800227c:	2200      	movs	r2, #0
 800227e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d106      	bne.n	8002296 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002288:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	4619      	mov	r1, r3
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f006 fe61 	bl	8008f56 <HAL_PCD_DataInStageCallback>
 8002294:	e01b      	b.n	80022ce <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002298:	695a      	ldr	r2, [r3, #20]
 800229a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800229e:	441a      	add	r2, r3
 80022a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022a2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80022a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022a6:	69da      	ldr	r2, [r3, #28]
 80022a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80022ac:	441a      	add	r2, r3
 80022ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022b0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80022b8:	4618      	mov	r0, r3
 80022ba:	f003 fab3 	bl	8005824 <USB_EPStartXfer>
 80022be:	e006      	b.n	80022ce <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80022c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80022c4:	461a      	mov	r2, r3
 80022c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 f91b 	bl	8002504 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	b21b      	sxth	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f6ff ac37 	blt.w	8001b4e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3758      	adds	r7, #88	; 0x58
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b088      	sub	sp, #32
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	60f8      	str	r0, [r7, #12]
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	4613      	mov	r3, r2
 80022f6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022f8:	88fb      	ldrh	r3, [r7, #6]
 80022fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d07e      	beq.n	8002400 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800230a:	b29b      	uxth	r3, r3
 800230c:	461a      	mov	r2, r3
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	4413      	add	r3, r2
 8002316:	3302      	adds	r3, #2
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	6812      	ldr	r2, [r2, #0]
 800231e:	4413      	add	r3, r2
 8002320:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002324:	881b      	ldrh	r3, [r3, #0]
 8002326:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800232a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	699a      	ldr	r2, [r3, #24]
 8002330:	8b7b      	ldrh	r3, [r7, #26]
 8002332:	429a      	cmp	r2, r3
 8002334:	d306      	bcc.n	8002344 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	699a      	ldr	r2, [r3, #24]
 800233a:	8b7b      	ldrh	r3, [r7, #26]
 800233c:	1ad2      	subs	r2, r2, r3
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	619a      	str	r2, [r3, #24]
 8002342:	e002      	b.n	800234a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2200      	movs	r2, #0
 8002348:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d123      	bne.n	800239a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4413      	add	r3, r2
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	b29b      	uxth	r3, r3
 8002364:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800236c:	833b      	strh	r3, [r7, #24]
 800236e:	8b3b      	ldrh	r3, [r7, #24]
 8002370:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002374:	833b      	strh	r3, [r7, #24]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	441a      	add	r2, r3
 8002384:	8b3b      	ldrh	r3, [r7, #24]
 8002386:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800238a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800238e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002396:	b29b      	uxth	r3, r3
 8002398:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800239a:	88fb      	ldrh	r3, [r7, #6]
 800239c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d01f      	beq.n	80023e4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	461a      	mov	r2, r3
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023be:	82fb      	strh	r3, [r7, #22]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	461a      	mov	r2, r3
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	441a      	add	r2, r3
 80023ce:	8afb      	ldrh	r3, [r7, #22]
 80023d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80023e4:	8b7b      	ldrh	r3, [r7, #26]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 8087 	beq.w	80024fa <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6818      	ldr	r0, [r3, #0]
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	6959      	ldr	r1, [r3, #20]
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	891a      	ldrh	r2, [r3, #8]
 80023f8:	8b7b      	ldrh	r3, [r7, #26]
 80023fa:	f004 ff47 	bl	800728c <USB_ReadPMA>
 80023fe:	e07c      	b.n	80024fa <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002408:	b29b      	uxth	r3, r3
 800240a:	461a      	mov	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	4413      	add	r3, r2
 8002414:	3306      	adds	r3, #6
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	4413      	add	r3, r2
 800241e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002422:	881b      	ldrh	r3, [r3, #0]
 8002424:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002428:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	699a      	ldr	r2, [r3, #24]
 800242e:	8b7b      	ldrh	r3, [r7, #26]
 8002430:	429a      	cmp	r2, r3
 8002432:	d306      	bcc.n	8002442 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	699a      	ldr	r2, [r3, #24]
 8002438:	8b7b      	ldrh	r3, [r7, #26]
 800243a:	1ad2      	subs	r2, r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	619a      	str	r2, [r3, #24]
 8002440:	e002      	b.n	8002448 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	2200      	movs	r2, #0
 8002446:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d123      	bne.n	8002498 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	461a      	mov	r2, r3
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	881b      	ldrh	r3, [r3, #0]
 8002460:	b29b      	uxth	r3, r3
 8002462:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800246a:	83fb      	strh	r3, [r7, #30]
 800246c:	8bfb      	ldrh	r3, [r7, #30]
 800246e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002472:	83fb      	strh	r3, [r7, #30]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	461a      	mov	r2, r3
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	441a      	add	r2, r3
 8002482:	8bfb      	ldrh	r3, [r7, #30]
 8002484:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002488:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800248c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002494:	b29b      	uxth	r3, r3
 8002496:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002498:	88fb      	ldrh	r3, [r7, #6]
 800249a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d11f      	bne.n	80024e2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024bc:	83bb      	strh	r3, [r7, #28]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	441a      	add	r2, r3
 80024cc:	8bbb      	ldrh	r3, [r7, #28]
 80024ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024de:	b29b      	uxth	r3, r3
 80024e0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80024e2:	8b7b      	ldrh	r3, [r7, #26]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d008      	beq.n	80024fa <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6818      	ldr	r0, [r3, #0]
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	6959      	ldr	r1, [r3, #20]
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	895a      	ldrh	r2, [r3, #10]
 80024f4:	8b7b      	ldrh	r3, [r7, #26]
 80024f6:	f004 fec9 	bl	800728c <USB_ReadPMA>
    }
  }

  return count;
 80024fa:	8b7b      	ldrh	r3, [r7, #26]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3720      	adds	r7, #32
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b0a4      	sub	sp, #144	; 0x90
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	4613      	mov	r3, r2
 8002510:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002512:	88fb      	ldrh	r3, [r7, #6]
 8002514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 81dd 	beq.w	80028d8 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002526:	b29b      	uxth	r3, r3
 8002528:	461a      	mov	r2, r3
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4413      	add	r3, r2
 8002532:	3302      	adds	r3, #2
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	6812      	ldr	r2, [r2, #0]
 800253a:	4413      	add	r3, r2
 800253c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002546:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	699a      	ldr	r2, [r3, #24]
 800254e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002552:	429a      	cmp	r2, r3
 8002554:	d907      	bls.n	8002566 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	699a      	ldr	r2, [r3, #24]
 800255a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800255e:	1ad2      	subs	r2, r2, r3
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	619a      	str	r2, [r3, #24]
 8002564:	e002      	b.n	800256c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2200      	movs	r2, #0
 800256a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	2b00      	cmp	r3, #0
 8002572:	f040 80b9 	bne.w	80026e8 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	785b      	ldrb	r3, [r3, #1]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d126      	bne.n	80025cc <HAL_PCD_EP_DB_Transmit+0xc8>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800258c:	b29b      	uxth	r3, r3
 800258e:	461a      	mov	r2, r3
 8002590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002592:	4413      	add	r3, r2
 8002594:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	011a      	lsls	r2, r3, #4
 800259c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259e:	4413      	add	r3, r2
 80025a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80025a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b4:	801a      	strh	r2, [r3, #0]
 80025b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c8:	801a      	strh	r2, [r3, #0]
 80025ca:	e01a      	b.n	8002602 <HAL_PCD_EP_DB_Transmit+0xfe>
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	785b      	ldrb	r3, [r3, #1]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d116      	bne.n	8002602 <HAL_PCD_EP_DB_Transmit+0xfe>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	637b      	str	r3, [r7, #52]	; 0x34
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	461a      	mov	r2, r3
 80025e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e8:	4413      	add	r3, r2
 80025ea:	637b      	str	r3, [r7, #52]	; 0x34
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	011a      	lsls	r2, r3, #4
 80025f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f4:	4413      	add	r3, r2
 80025f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025fa:	633b      	str	r3, [r7, #48]	; 0x30
 80025fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fe:	2200      	movs	r2, #0
 8002600:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	627b      	str	r3, [r7, #36]	; 0x24
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	785b      	ldrb	r3, [r3, #1]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d126      	bne.n	800265e <HAL_PCD_EP_DB_Transmit+0x15a>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	61fb      	str	r3, [r7, #28]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800261e:	b29b      	uxth	r3, r3
 8002620:	461a      	mov	r2, r3
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	4413      	add	r3, r2
 8002626:	61fb      	str	r3, [r7, #28]
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	011a      	lsls	r2, r3, #4
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	4413      	add	r3, r2
 8002632:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002636:	61bb      	str	r3, [r7, #24]
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	b29b      	uxth	r3, r3
 800263e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002642:	b29a      	uxth	r2, r3
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	801a      	strh	r2, [r3, #0]
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	b29b      	uxth	r3, r3
 800264e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002656:	b29a      	uxth	r2, r3
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	801a      	strh	r2, [r3, #0]
 800265c:	e017      	b.n	800268e <HAL_PCD_EP_DB_Transmit+0x18a>
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	785b      	ldrb	r3, [r3, #1]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d113      	bne.n	800268e <HAL_PCD_EP_DB_Transmit+0x18a>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800266e:	b29b      	uxth	r3, r3
 8002670:	461a      	mov	r2, r3
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	4413      	add	r3, r2
 8002676:	627b      	str	r3, [r7, #36]	; 0x24
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	011a      	lsls	r2, r3, #4
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	4413      	add	r3, r2
 8002682:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002686:	623b      	str	r3, [r7, #32]
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	2200      	movs	r2, #0
 800268c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	4619      	mov	r1, r3
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f006 fc5e 	bl	8008f56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800269a:	88fb      	ldrh	r3, [r7, #6]
 800269c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 82fc 	beq.w	8002c9e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	461a      	mov	r2, r3
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c0:	82fb      	strh	r3, [r7, #22]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	461a      	mov	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	441a      	add	r2, r3
 80026d0:	8afb      	ldrh	r3, [r7, #22]
 80026d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	8013      	strh	r3, [r2, #0]
 80026e6:	e2da      	b.n	8002c9e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026e8:	88fb      	ldrh	r3, [r7, #6]
 80026ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d021      	beq.n	8002736 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	461a      	mov	r2, r3
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	b29b      	uxth	r3, r3
 8002704:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800270c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	461a      	mov	r2, r3
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	441a      	add	r2, r3
 800271e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002722:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002726:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800272a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800272e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002732:	b29b      	uxth	r3, r3
 8002734:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800273c:	2b01      	cmp	r3, #1
 800273e:	f040 82ae 	bne.w	8002c9e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	695a      	ldr	r2, [r3, #20]
 8002746:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800274a:	441a      	add	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	69da      	ldr	r2, [r3, #28]
 8002754:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002758:	441a      	add	r2, r3
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	6a1a      	ldr	r2, [r3, #32]
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	429a      	cmp	r2, r3
 8002768:	d30b      	bcc.n	8002782 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	6a1a      	ldr	r2, [r3, #32]
 8002776:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800277a:	1ad2      	subs	r2, r2, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	621a      	str	r2, [r3, #32]
 8002780:	e017      	b.n	80027b2 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d108      	bne.n	800279c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800278a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800278e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800279a:	e00a      	b.n	80027b2 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2200      	movs	r2, #0
 80027b0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	785b      	ldrb	r3, [r3, #1]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d165      	bne.n	8002886 <HAL_PCD_EP_DB_Transmit+0x382>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	461a      	mov	r2, r3
 80027cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ce:	4413      	add	r3, r2
 80027d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	011a      	lsls	r2, r3, #4
 80027d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027da:	4413      	add	r3, r2
 80027dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80027e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f0:	801a      	strh	r2, [r3, #0]
 80027f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027f6:	2b3e      	cmp	r3, #62	; 0x3e
 80027f8:	d91d      	bls.n	8002836 <HAL_PCD_EP_DB_Transmit+0x332>
 80027fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027fe:	095b      	lsrs	r3, r3, #5
 8002800:	64bb      	str	r3, [r7, #72]	; 0x48
 8002802:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002806:	f003 031f 	and.w	r3, r3, #31
 800280a:	2b00      	cmp	r3, #0
 800280c:	d102      	bne.n	8002814 <HAL_PCD_EP_DB_Transmit+0x310>
 800280e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002810:	3b01      	subs	r3, #1
 8002812:	64bb      	str	r3, [r7, #72]	; 0x48
 8002814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	b29a      	uxth	r2, r3
 800281a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800281c:	b29b      	uxth	r3, r3
 800281e:	029b      	lsls	r3, r3, #10
 8002820:	b29b      	uxth	r3, r3
 8002822:	4313      	orrs	r3, r2
 8002824:	b29b      	uxth	r3, r3
 8002826:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800282a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800282e:	b29a      	uxth	r2, r3
 8002830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002832:	801a      	strh	r2, [r3, #0]
 8002834:	e044      	b.n	80028c0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002836:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10a      	bne.n	8002854 <HAL_PCD_EP_DB_Transmit+0x350>
 800283e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002840:	881b      	ldrh	r3, [r3, #0]
 8002842:	b29b      	uxth	r3, r3
 8002844:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002848:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800284c:	b29a      	uxth	r2, r3
 800284e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002850:	801a      	strh	r2, [r3, #0]
 8002852:	e035      	b.n	80028c0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002854:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002858:	085b      	lsrs	r3, r3, #1
 800285a:	64bb      	str	r3, [r7, #72]	; 0x48
 800285c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b00      	cmp	r3, #0
 8002866:	d002      	beq.n	800286e <HAL_PCD_EP_DB_Transmit+0x36a>
 8002868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800286a:	3301      	adds	r3, #1
 800286c:	64bb      	str	r3, [r7, #72]	; 0x48
 800286e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	b29a      	uxth	r2, r3
 8002874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002876:	b29b      	uxth	r3, r3
 8002878:	029b      	lsls	r3, r3, #10
 800287a:	b29b      	uxth	r3, r3
 800287c:	4313      	orrs	r3, r2
 800287e:	b29a      	uxth	r2, r3
 8002880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002882:	801a      	strh	r2, [r3, #0]
 8002884:	e01c      	b.n	80028c0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	785b      	ldrb	r3, [r3, #1]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d118      	bne.n	80028c0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	647b      	str	r3, [r7, #68]	; 0x44
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800289c:	b29b      	uxth	r3, r3
 800289e:	461a      	mov	r2, r3
 80028a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028a2:	4413      	add	r3, r2
 80028a4:	647b      	str	r3, [r7, #68]	; 0x44
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	011a      	lsls	r2, r3, #4
 80028ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028ae:	4413      	add	r3, r2
 80028b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028b4:	643b      	str	r3, [r7, #64]	; 0x40
 80028b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028be:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6818      	ldr	r0, [r3, #0]
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	6959      	ldr	r1, [r3, #20]
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	891a      	ldrh	r2, [r3, #8]
 80028cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	f004 fc96 	bl	8007202 <USB_WritePMA>
 80028d6:	e1e2      	b.n	8002c9e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	461a      	mov	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4413      	add	r3, r2
 80028ec:	3306      	adds	r3, #6
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	6812      	ldr	r2, [r2, #0]
 80028f4:	4413      	add	r3, r2
 80028f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002900:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	699a      	ldr	r2, [r3, #24]
 8002908:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800290c:	429a      	cmp	r2, r3
 800290e:	d307      	bcc.n	8002920 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	699a      	ldr	r2, [r3, #24]
 8002914:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002918:	1ad2      	subs	r2, r2, r3
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	619a      	str	r2, [r3, #24]
 800291e:	e002      	b.n	8002926 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2200      	movs	r2, #0
 8002924:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	2b00      	cmp	r3, #0
 800292c:	f040 80c0 	bne.w	8002ab0 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	785b      	ldrb	r3, [r3, #1]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d126      	bne.n	8002986 <HAL_PCD_EP_DB_Transmit+0x482>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002946:	b29b      	uxth	r3, r3
 8002948:	461a      	mov	r2, r3
 800294a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800294c:	4413      	add	r3, r2
 800294e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	011a      	lsls	r2, r3, #4
 8002956:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002958:	4413      	add	r3, r2
 800295a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800295e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002960:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002962:	881b      	ldrh	r3, [r3, #0]
 8002964:	b29b      	uxth	r3, r3
 8002966:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800296a:	b29a      	uxth	r2, r3
 800296c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800296e:	801a      	strh	r2, [r3, #0]
 8002970:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002972:	881b      	ldrh	r3, [r3, #0]
 8002974:	b29b      	uxth	r3, r3
 8002976:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800297a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800297e:	b29a      	uxth	r2, r3
 8002980:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002982:	801a      	strh	r2, [r3, #0]
 8002984:	e01a      	b.n	80029bc <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	785b      	ldrb	r3, [r3, #1]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d116      	bne.n	80029bc <HAL_PCD_EP_DB_Transmit+0x4b8>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	667b      	str	r3, [r7, #100]	; 0x64
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800299c:	b29b      	uxth	r3, r3
 800299e:	461a      	mov	r2, r3
 80029a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029a2:	4413      	add	r3, r2
 80029a4:	667b      	str	r3, [r7, #100]	; 0x64
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	011a      	lsls	r2, r3, #4
 80029ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029ae:	4413      	add	r3, r2
 80029b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029b4:	663b      	str	r3, [r7, #96]	; 0x60
 80029b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029b8:	2200      	movs	r2, #0
 80029ba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	677b      	str	r3, [r7, #116]	; 0x74
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	785b      	ldrb	r3, [r3, #1]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d12b      	bne.n	8002a22 <HAL_PCD_EP_DB_Transmit+0x51e>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029d8:	b29b      	uxth	r3, r3
 80029da:	461a      	mov	r2, r3
 80029dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029de:	4413      	add	r3, r2
 80029e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	011a      	lsls	r2, r3, #4
 80029e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ea:	4413      	add	r3, r2
 80029ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029f8:	881b      	ldrh	r3, [r3, #0]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a06:	801a      	strh	r2, [r3, #0]
 8002a08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a0c:	881b      	ldrh	r3, [r3, #0]
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a1e:	801a      	strh	r2, [r3, #0]
 8002a20:	e017      	b.n	8002a52 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	785b      	ldrb	r3, [r3, #1]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d113      	bne.n	8002a52 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	461a      	mov	r2, r3
 8002a36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a38:	4413      	add	r3, r2
 8002a3a:	677b      	str	r3, [r7, #116]	; 0x74
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	011a      	lsls	r2, r3, #4
 8002a42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a44:	4413      	add	r3, r2
 8002a46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a4a:	673b      	str	r3, [r7, #112]	; 0x70
 8002a4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a4e:	2200      	movs	r2, #0
 8002a50:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	4619      	mov	r1, r3
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f006 fa7c 	bl	8008f56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a5e:	88fb      	ldrh	r3, [r7, #6]
 8002a60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f040 811a 	bne.w	8002c9e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a84:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	441a      	add	r2, r3
 8002a96:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002a9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002aa2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	8013      	strh	r3, [r2, #0]
 8002aae:	e0f6      	b.n	8002c9e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ab0:	88fb      	ldrh	r3, [r7, #6]
 8002ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d121      	bne.n	8002afe <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	881b      	ldrh	r3, [r3, #0]
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ad4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	461a      	mov	r2, r3
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	441a      	add	r2, r3
 8002ae6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002aea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002aee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002af2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	f040 80ca 	bne.w	8002c9e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b12:	441a      	add	r2, r3
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	69da      	ldr	r2, [r3, #28]
 8002b1c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b20:	441a      	add	r2, r3
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	6a1a      	ldr	r2, [r3, #32]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d30b      	bcc.n	8002b4a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	6a1a      	ldr	r2, [r3, #32]
 8002b3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b42:	1ad2      	subs	r2, r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	621a      	str	r2, [r3, #32]
 8002b48:	e017      	b.n	8002b7a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d108      	bne.n	8002b64 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002b52:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b62:	e00a      	b.n	8002b7a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	657b      	str	r3, [r7, #84]	; 0x54
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	785b      	ldrb	r3, [r3, #1]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d165      	bne.n	8002c54 <HAL_PCD_EP_DB_Transmit+0x750>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	461a      	mov	r2, r3
 8002b9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b9c:	4413      	add	r3, r2
 8002b9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	011a      	lsls	r2, r3, #4
 8002ba6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ba8:	4413      	add	r3, r2
 8002baa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bae:	65bb      	str	r3, [r7, #88]	; 0x58
 8002bb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bbe:	801a      	strh	r2, [r3, #0]
 8002bc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bc4:	2b3e      	cmp	r3, #62	; 0x3e
 8002bc6:	d91d      	bls.n	8002c04 <HAL_PCD_EP_DB_Transmit+0x700>
 8002bc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bcc:	095b      	lsrs	r3, r3, #5
 8002bce:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bd4:	f003 031f 	and.w	r3, r3, #31
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d102      	bne.n	8002be2 <HAL_PCD_EP_DB_Transmit+0x6de>
 8002bdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bde:	3b01      	subs	r3, #1
 8002be0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002be2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	029b      	lsls	r3, r3, #10
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c00:	801a      	strh	r2, [r3, #0]
 8002c02:	e041      	b.n	8002c88 <HAL_PCD_EP_DB_Transmit+0x784>
 8002c04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10a      	bne.n	8002c22 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002c0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c0e:	881b      	ldrh	r3, [r3, #0]
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c1e:	801a      	strh	r2, [r3, #0]
 8002c20:	e032      	b.n	8002c88 <HAL_PCD_EP_DB_Transmit+0x784>
 8002c22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c26:	085b      	lsrs	r3, r3, #1
 8002c28:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d002      	beq.n	8002c3c <HAL_PCD_EP_DB_Transmit+0x738>
 8002c36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c38:	3301      	adds	r3, #1
 8002c3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c3e:	881b      	ldrh	r3, [r3, #0]
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	029b      	lsls	r3, r3, #10
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c50:	801a      	strh	r2, [r3, #0]
 8002c52:	e019      	b.n	8002c88 <HAL_PCD_EP_DB_Transmit+0x784>
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	785b      	ldrb	r3, [r3, #1]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d115      	bne.n	8002c88 <HAL_PCD_EP_DB_Transmit+0x784>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	461a      	mov	r2, r3
 8002c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c6a:	4413      	add	r3, r2
 8002c6c:	657b      	str	r3, [r7, #84]	; 0x54
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	011a      	lsls	r2, r3, #4
 8002c74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c76:	4413      	add	r3, r2
 8002c78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c7c:	653b      	str	r3, [r7, #80]	; 0x50
 8002c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c86:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6818      	ldr	r0, [r3, #0]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	6959      	ldr	r1, [r3, #20]
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	895a      	ldrh	r2, [r3, #10]
 8002c94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	f004 fab2 	bl	8007202 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cb8:	82bb      	strh	r3, [r7, #20]
 8002cba:	8abb      	ldrh	r3, [r7, #20]
 8002cbc:	f083 0310 	eor.w	r3, r3, #16
 8002cc0:	82bb      	strh	r3, [r7, #20]
 8002cc2:	8abb      	ldrh	r3, [r7, #20]
 8002cc4:	f083 0320 	eor.w	r3, r3, #32
 8002cc8:	82bb      	strh	r3, [r7, #20]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	441a      	add	r2, r3
 8002cd8:	8abb      	ldrh	r3, [r7, #20]
 8002cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3790      	adds	r7, #144	; 0x90
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	607b      	str	r3, [r7, #4]
 8002d02:	460b      	mov	r3, r1
 8002d04:	817b      	strh	r3, [r7, #10]
 8002d06:	4613      	mov	r3, r2
 8002d08:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002d0a:	897b      	ldrh	r3, [r7, #10]
 8002d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00b      	beq.n	8002d2e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d16:	897b      	ldrh	r3, [r7, #10]
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	4613      	mov	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	4413      	add	r3, r2
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	e009      	b.n	8002d42 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d2e:	897a      	ldrh	r2, [r7, #10]
 8002d30:	4613      	mov	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	4413      	add	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002d42:	893b      	ldrh	r3, [r7, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d107      	bne.n	8002d58 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	80da      	strh	r2, [r3, #6]
 8002d56:	e00b      	b.n	8002d70 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	0c1b      	lsrs	r3, r3, #16
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	371c      	adds	r7, #28
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr

08002d7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e272      	b.n	8003274 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 8087 	beq.w	8002eaa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d9c:	4b92      	ldr	r3, [pc, #584]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 030c 	and.w	r3, r3, #12
 8002da4:	2b04      	cmp	r3, #4
 8002da6:	d00c      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002da8:	4b8f      	ldr	r3, [pc, #572]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 030c 	and.w	r3, r3, #12
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d112      	bne.n	8002dda <HAL_RCC_OscConfig+0x5e>
 8002db4:	4b8c      	ldr	r3, [pc, #560]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc0:	d10b      	bne.n	8002dda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc2:	4b89      	ldr	r3, [pc, #548]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d06c      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x12c>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d168      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e24c      	b.n	8003274 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de2:	d106      	bne.n	8002df2 <HAL_RCC_OscConfig+0x76>
 8002de4:	4b80      	ldr	r3, [pc, #512]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a7f      	ldr	r2, [pc, #508]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dee:	6013      	str	r3, [r2, #0]
 8002df0:	e02e      	b.n	8002e50 <HAL_RCC_OscConfig+0xd4>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10c      	bne.n	8002e14 <HAL_RCC_OscConfig+0x98>
 8002dfa:	4b7b      	ldr	r3, [pc, #492]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a7a      	ldr	r2, [pc, #488]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	4b78      	ldr	r3, [pc, #480]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a77      	ldr	r2, [pc, #476]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002e0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	e01d      	b.n	8002e50 <HAL_RCC_OscConfig+0xd4>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e1c:	d10c      	bne.n	8002e38 <HAL_RCC_OscConfig+0xbc>
 8002e1e:	4b72      	ldr	r3, [pc, #456]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a71      	ldr	r2, [pc, #452]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	4b6f      	ldr	r3, [pc, #444]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a6e      	ldr	r2, [pc, #440]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	e00b      	b.n	8002e50 <HAL_RCC_OscConfig+0xd4>
 8002e38:	4b6b      	ldr	r3, [pc, #428]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a6a      	ldr	r2, [pc, #424]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e42:	6013      	str	r3, [r2, #0]
 8002e44:	4b68      	ldr	r3, [pc, #416]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a67      	ldr	r2, [pc, #412]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d013      	beq.n	8002e80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e58:	f7fd febc 	bl	8000bd4 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e60:	f7fd feb8 	bl	8000bd4 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b64      	cmp	r3, #100	; 0x64
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e200      	b.n	8003274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e72:	4b5d      	ldr	r3, [pc, #372]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0f0      	beq.n	8002e60 <HAL_RCC_OscConfig+0xe4>
 8002e7e:	e014      	b.n	8002eaa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e80:	f7fd fea8 	bl	8000bd4 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e88:	f7fd fea4 	bl	8000bd4 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b64      	cmp	r3, #100	; 0x64
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e1ec      	b.n	8003274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e9a:	4b53      	ldr	r3, [pc, #332]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f0      	bne.n	8002e88 <HAL_RCC_OscConfig+0x10c>
 8002ea6:	e000      	b.n	8002eaa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d063      	beq.n	8002f7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002eb6:	4b4c      	ldr	r3, [pc, #304]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f003 030c 	and.w	r3, r3, #12
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00b      	beq.n	8002eda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ec2:	4b49      	ldr	r3, [pc, #292]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f003 030c 	and.w	r3, r3, #12
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d11c      	bne.n	8002f08 <HAL_RCC_OscConfig+0x18c>
 8002ece:	4b46      	ldr	r3, [pc, #280]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d116      	bne.n	8002f08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eda:	4b43      	ldr	r3, [pc, #268]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d005      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x176>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d001      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e1c0      	b.n	8003274 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef2:	4b3d      	ldr	r3, [pc, #244]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	4939      	ldr	r1, [pc, #228]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f06:	e03a      	b.n	8002f7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d020      	beq.n	8002f52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f10:	4b36      	ldr	r3, [pc, #216]	; (8002fec <HAL_RCC_OscConfig+0x270>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f16:	f7fd fe5d 	bl	8000bd4 <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f1c:	e008      	b.n	8002f30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f1e:	f7fd fe59 	bl	8000bd4 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e1a1      	b.n	8003274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f30:	4b2d      	ldr	r3, [pc, #180]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0f0      	beq.n	8002f1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f3c:	4b2a      	ldr	r3, [pc, #168]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	4927      	ldr	r1, [pc, #156]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	600b      	str	r3, [r1, #0]
 8002f50:	e015      	b.n	8002f7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f52:	4b26      	ldr	r3, [pc, #152]	; (8002fec <HAL_RCC_OscConfig+0x270>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f58:	f7fd fe3c 	bl	8000bd4 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f60:	f7fd fe38 	bl	8000bd4 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e180      	b.n	8003274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f72:	4b1d      	ldr	r3, [pc, #116]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f0      	bne.n	8002f60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d03a      	beq.n	8003000 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d019      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f92:	4b17      	ldr	r3, [pc, #92]	; (8002ff0 <HAL_RCC_OscConfig+0x274>)
 8002f94:	2201      	movs	r2, #1
 8002f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f98:	f7fd fe1c 	bl	8000bd4 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fa0:	f7fd fe18 	bl	8000bd4 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e160      	b.n	8003274 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fb2:	4b0d      	ldr	r3, [pc, #52]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0f0      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002fbe:	2001      	movs	r0, #1
 8002fc0:	f000 face 	bl	8003560 <RCC_Delay>
 8002fc4:	e01c      	b.n	8003000 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <HAL_RCC_OscConfig+0x274>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fcc:	f7fd fe02 	bl	8000bd4 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd2:	e00f      	b.n	8002ff4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fd4:	f7fd fdfe 	bl	8000bd4 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d908      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e146      	b.n	8003274 <HAL_RCC_OscConfig+0x4f8>
 8002fe6:	bf00      	nop
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	42420000 	.word	0x42420000
 8002ff0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ff4:	4b92      	ldr	r3, [pc, #584]	; (8003240 <HAL_RCC_OscConfig+0x4c4>)
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1e9      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 80a6 	beq.w	800315a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800300e:	2300      	movs	r3, #0
 8003010:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003012:	4b8b      	ldr	r3, [pc, #556]	; (8003240 <HAL_RCC_OscConfig+0x4c4>)
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10d      	bne.n	800303a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800301e:	4b88      	ldr	r3, [pc, #544]	; (8003240 <HAL_RCC_OscConfig+0x4c4>)
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	4a87      	ldr	r2, [pc, #540]	; (8003240 <HAL_RCC_OscConfig+0x4c4>)
 8003024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003028:	61d3      	str	r3, [r2, #28]
 800302a:	4b85      	ldr	r3, [pc, #532]	; (8003240 <HAL_RCC_OscConfig+0x4c4>)
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003032:	60bb      	str	r3, [r7, #8]
 8003034:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003036:	2301      	movs	r3, #1
 8003038:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800303a:	4b82      	ldr	r3, [pc, #520]	; (8003244 <HAL_RCC_OscConfig+0x4c8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003042:	2b00      	cmp	r3, #0
 8003044:	d118      	bne.n	8003078 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003046:	4b7f      	ldr	r3, [pc, #508]	; (8003244 <HAL_RCC_OscConfig+0x4c8>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a7e      	ldr	r2, [pc, #504]	; (8003244 <HAL_RCC_OscConfig+0x4c8>)
 800304c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003050:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003052:	f7fd fdbf 	bl	8000bd4 <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800305a:	f7fd fdbb 	bl	8000bd4 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b64      	cmp	r3, #100	; 0x64
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e103      	b.n	8003274 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800306c:	4b75      	ldr	r3, [pc, #468]	; (8003244 <HAL_RCC_OscConfig+0x4c8>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0f0      	beq.n	800305a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d106      	bne.n	800308e <HAL_RCC_OscConfig+0x312>
 8003080:	4b6f      	ldr	r3, [pc, #444]	; (8003240 <HAL_RCC_OscConfig+0x4c4>)
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	4a6e      	ldr	r2, [pc, #440]	; (8003240 <HAL_RCC_OscConfig+0x4c4>)
 8003086:	f043 0301 	orr.w	r3, r3, #1
 800308a:	6213      	str	r3, [r2, #32]
 800308c:	e02d      	b.n	80030ea <HAL_RCC_OscConfig+0x36e>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10c      	bne.n	80030b0 <HAL_RCC_OscConfig+0x334>
 8003096:	4b6a      	ldr	r3, [pc, #424]	; (8003240 <HAL_RCC_OscConfig+0x4c4>)
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	4a69      	ldr	r2, [pc, #420]	; (8003240 <HAL_RCC_OscConfig+0x4c4>)
 800309c:	f023 0301 	bic.w	r3, r3, #1
 80030a0:	6213      	str	r3, [r2, #32]
 80030a2:	4b67      	ldr	r3, [pc, #412]	; (8003240 <HAL_RCC_OscConfig+0x4c4>)
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	4a66      	ldr	r2, [pc, #408]	; (8003240 <HAL_RCC_OscConfig+0x4c4>)
 80030a8:	f023 0304 	bic.w	r3, r3, #4
 80030ac:	6213      	str	r3, [r2, #32]
 80030ae:	e01c      	b.n	80030ea <HAL_RCC_OscConfig+0x36e>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	2b05      	cmp	r3, #5
 80030b6:	d10c      	bne.n	80030d2 <HAL_RCC_OscConfig+0x356>
 80030b8:	4b61      	ldr	r3, [pc, #388]	; (8003240 <HAL_RCC_OscConfig+0x4c4>)
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	4a60      	ldr	r2, [pc, #384]	; (8003240 <HAL_RCC_OscConfig+0x4c4>)
 80030be:	f043 0304 	orr.w	r3, r3, #4
 80030c2:	6213      	str	r3, [r2, #32]
 80030c4:	4b5e      	ldr	r3, [pc, #376]	; (8003240 <HAL_RCC_OscConfig+0x4c4>)
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	4a5d      	ldr	r2, [pc, #372]	; (8003240 <HAL_RCC_OscConfig+0x4c4>)
 80030ca:	f043 0301 	orr.w	r3, r3, #1
 80030ce:	6213      	str	r3, [r2, #32]
 80030d0:	e00b      	b.n	80030ea <HAL_RCC_OscConfig+0x36e>
 80030d2:	4b5b      	ldr	r3, [pc, #364]	; (8003240 <HAL_RCC_OscConfig+0x4c4>)
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	4a5a      	ldr	r2, [pc, #360]	; (8003240 <HAL_RCC_OscConfig+0x4c4>)
 80030d8:	f023 0301 	bic.w	r3, r3, #1
 80030dc:	6213      	str	r3, [r2, #32]
 80030de:	4b58      	ldr	r3, [pc, #352]	; (8003240 <HAL_RCC_OscConfig+0x4c4>)
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	4a57      	ldr	r2, [pc, #348]	; (8003240 <HAL_RCC_OscConfig+0x4c4>)
 80030e4:	f023 0304 	bic.w	r3, r3, #4
 80030e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d015      	beq.n	800311e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f2:	f7fd fd6f 	bl	8000bd4 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f8:	e00a      	b.n	8003110 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030fa:	f7fd fd6b 	bl	8000bd4 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	f241 3288 	movw	r2, #5000	; 0x1388
 8003108:	4293      	cmp	r3, r2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e0b1      	b.n	8003274 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003110:	4b4b      	ldr	r3, [pc, #300]	; (8003240 <HAL_RCC_OscConfig+0x4c4>)
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0ee      	beq.n	80030fa <HAL_RCC_OscConfig+0x37e>
 800311c:	e014      	b.n	8003148 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800311e:	f7fd fd59 	bl	8000bd4 <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003124:	e00a      	b.n	800313c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003126:	f7fd fd55 	bl	8000bd4 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	f241 3288 	movw	r2, #5000	; 0x1388
 8003134:	4293      	cmp	r3, r2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e09b      	b.n	8003274 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800313c:	4b40      	ldr	r3, [pc, #256]	; (8003240 <HAL_RCC_OscConfig+0x4c4>)
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1ee      	bne.n	8003126 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003148:	7dfb      	ldrb	r3, [r7, #23]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d105      	bne.n	800315a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800314e:	4b3c      	ldr	r3, [pc, #240]	; (8003240 <HAL_RCC_OscConfig+0x4c4>)
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	4a3b      	ldr	r2, [pc, #236]	; (8003240 <HAL_RCC_OscConfig+0x4c4>)
 8003154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003158:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 8087 	beq.w	8003272 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003164:	4b36      	ldr	r3, [pc, #216]	; (8003240 <HAL_RCC_OscConfig+0x4c4>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f003 030c 	and.w	r3, r3, #12
 800316c:	2b08      	cmp	r3, #8
 800316e:	d061      	beq.n	8003234 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	2b02      	cmp	r3, #2
 8003176:	d146      	bne.n	8003206 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003178:	4b33      	ldr	r3, [pc, #204]	; (8003248 <HAL_RCC_OscConfig+0x4cc>)
 800317a:	2200      	movs	r2, #0
 800317c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317e:	f7fd fd29 	bl	8000bd4 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003186:	f7fd fd25 	bl	8000bd4 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e06d      	b.n	8003274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003198:	4b29      	ldr	r3, [pc, #164]	; (8003240 <HAL_RCC_OscConfig+0x4c4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1f0      	bne.n	8003186 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ac:	d108      	bne.n	80031c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031ae:	4b24      	ldr	r3, [pc, #144]	; (8003240 <HAL_RCC_OscConfig+0x4c4>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	4921      	ldr	r1, [pc, #132]	; (8003240 <HAL_RCC_OscConfig+0x4c4>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031c0:	4b1f      	ldr	r3, [pc, #124]	; (8003240 <HAL_RCC_OscConfig+0x4c4>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a19      	ldr	r1, [r3, #32]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	430b      	orrs	r3, r1
 80031d2:	491b      	ldr	r1, [pc, #108]	; (8003240 <HAL_RCC_OscConfig+0x4c4>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031d8:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <HAL_RCC_OscConfig+0x4cc>)
 80031da:	2201      	movs	r2, #1
 80031dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031de:	f7fd fcf9 	bl	8000bd4 <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e6:	f7fd fcf5 	bl	8000bd4 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e03d      	b.n	8003274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031f8:	4b11      	ldr	r3, [pc, #68]	; (8003240 <HAL_RCC_OscConfig+0x4c4>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0f0      	beq.n	80031e6 <HAL_RCC_OscConfig+0x46a>
 8003204:	e035      	b.n	8003272 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003206:	4b10      	ldr	r3, [pc, #64]	; (8003248 <HAL_RCC_OscConfig+0x4cc>)
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320c:	f7fd fce2 	bl	8000bd4 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003214:	f7fd fcde 	bl	8000bd4 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e026      	b.n	8003274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003226:	4b06      	ldr	r3, [pc, #24]	; (8003240 <HAL_RCC_OscConfig+0x4c4>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x498>
 8003232:	e01e      	b.n	8003272 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d107      	bne.n	800324c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e019      	b.n	8003274 <HAL_RCC_OscConfig+0x4f8>
 8003240:	40021000 	.word	0x40021000
 8003244:	40007000 	.word	0x40007000
 8003248:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800324c:	4b0b      	ldr	r3, [pc, #44]	; (800327c <HAL_RCC_OscConfig+0x500>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	429a      	cmp	r2, r3
 800325e:	d106      	bne.n	800326e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800326a:	429a      	cmp	r2, r3
 800326c:	d001      	beq.n	8003272 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e000      	b.n	8003274 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40021000 	.word	0x40021000

08003280 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e0d0      	b.n	8003436 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003294:	4b6a      	ldr	r3, [pc, #424]	; (8003440 <HAL_RCC_ClockConfig+0x1c0>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d910      	bls.n	80032c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a2:	4b67      	ldr	r3, [pc, #412]	; (8003440 <HAL_RCC_ClockConfig+0x1c0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f023 0207 	bic.w	r2, r3, #7
 80032aa:	4965      	ldr	r1, [pc, #404]	; (8003440 <HAL_RCC_ClockConfig+0x1c0>)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b2:	4b63      	ldr	r3, [pc, #396]	; (8003440 <HAL_RCC_ClockConfig+0x1c0>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d001      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e0b8      	b.n	8003436 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d020      	beq.n	8003312 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d005      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032dc:	4b59      	ldr	r3, [pc, #356]	; (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	4a58      	ldr	r2, [pc, #352]	; (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 80032e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0308 	and.w	r3, r3, #8
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d005      	beq.n	8003300 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032f4:	4b53      	ldr	r3, [pc, #332]	; (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	4a52      	ldr	r2, [pc, #328]	; (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 80032fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80032fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003300:	4b50      	ldr	r3, [pc, #320]	; (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	494d      	ldr	r1, [pc, #308]	; (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 800330e:	4313      	orrs	r3, r2
 8003310:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d040      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d107      	bne.n	8003336 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003326:	4b47      	ldr	r3, [pc, #284]	; (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d115      	bne.n	800335e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e07f      	b.n	8003436 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d107      	bne.n	800334e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800333e:	4b41      	ldr	r3, [pc, #260]	; (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d109      	bne.n	800335e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e073      	b.n	8003436 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334e:	4b3d      	ldr	r3, [pc, #244]	; (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e06b      	b.n	8003436 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800335e:	4b39      	ldr	r3, [pc, #228]	; (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f023 0203 	bic.w	r2, r3, #3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	4936      	ldr	r1, [pc, #216]	; (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 800336c:	4313      	orrs	r3, r2
 800336e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003370:	f7fd fc30 	bl	8000bd4 <HAL_GetTick>
 8003374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003376:	e00a      	b.n	800338e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003378:	f7fd fc2c 	bl	8000bd4 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	f241 3288 	movw	r2, #5000	; 0x1388
 8003386:	4293      	cmp	r3, r2
 8003388:	d901      	bls.n	800338e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e053      	b.n	8003436 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800338e:	4b2d      	ldr	r3, [pc, #180]	; (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f003 020c 	and.w	r2, r3, #12
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	429a      	cmp	r2, r3
 800339e:	d1eb      	bne.n	8003378 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033a0:	4b27      	ldr	r3, [pc, #156]	; (8003440 <HAL_RCC_ClockConfig+0x1c0>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d210      	bcs.n	80033d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ae:	4b24      	ldr	r3, [pc, #144]	; (8003440 <HAL_RCC_ClockConfig+0x1c0>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f023 0207 	bic.w	r2, r3, #7
 80033b6:	4922      	ldr	r1, [pc, #136]	; (8003440 <HAL_RCC_ClockConfig+0x1c0>)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033be:	4b20      	ldr	r3, [pc, #128]	; (8003440 <HAL_RCC_ClockConfig+0x1c0>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d001      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e032      	b.n	8003436 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033dc:	4b19      	ldr	r3, [pc, #100]	; (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	4916      	ldr	r1, [pc, #88]	; (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d009      	beq.n	800340e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033fa:	4b12      	ldr	r3, [pc, #72]	; (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	490e      	ldr	r1, [pc, #56]	; (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 800340a:	4313      	orrs	r3, r2
 800340c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800340e:	f000 f821 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 8003412:	4602      	mov	r2, r0
 8003414:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	091b      	lsrs	r3, r3, #4
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	490a      	ldr	r1, [pc, #40]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 8003420:	5ccb      	ldrb	r3, [r1, r3]
 8003422:	fa22 f303 	lsr.w	r3, r2, r3
 8003426:	4a09      	ldr	r2, [pc, #36]	; (800344c <HAL_RCC_ClockConfig+0x1cc>)
 8003428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800342a:	4b09      	ldr	r3, [pc, #36]	; (8003450 <HAL_RCC_ClockConfig+0x1d0>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f7fd fb8e 	bl	8000b50 <HAL_InitTick>

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40022000 	.word	0x40022000
 8003444:	40021000 	.word	0x40021000
 8003448:	080094bc 	.word	0x080094bc
 800344c:	20000000 	.word	0x20000000
 8003450:	20000004 	.word	0x20000004

08003454 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003454:	b480      	push	{r7}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	2300      	movs	r3, #0
 8003460:	60bb      	str	r3, [r7, #8]
 8003462:	2300      	movs	r3, #0
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	2300      	movs	r3, #0
 8003468:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800346a:	2300      	movs	r3, #0
 800346c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800346e:	4b1e      	ldr	r3, [pc, #120]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f003 030c 	and.w	r3, r3, #12
 800347a:	2b04      	cmp	r3, #4
 800347c:	d002      	beq.n	8003484 <HAL_RCC_GetSysClockFreq+0x30>
 800347e:	2b08      	cmp	r3, #8
 8003480:	d003      	beq.n	800348a <HAL_RCC_GetSysClockFreq+0x36>
 8003482:	e027      	b.n	80034d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003484:	4b19      	ldr	r3, [pc, #100]	; (80034ec <HAL_RCC_GetSysClockFreq+0x98>)
 8003486:	613b      	str	r3, [r7, #16]
      break;
 8003488:	e027      	b.n	80034da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	0c9b      	lsrs	r3, r3, #18
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	4a17      	ldr	r2, [pc, #92]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003494:	5cd3      	ldrb	r3, [r2, r3]
 8003496:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d010      	beq.n	80034c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034a2:	4b11      	ldr	r3, [pc, #68]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	0c5b      	lsrs	r3, r3, #17
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	4a11      	ldr	r2, [pc, #68]	; (80034f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80034ae:	5cd3      	ldrb	r3, [r2, r3]
 80034b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a0d      	ldr	r2, [pc, #52]	; (80034ec <HAL_RCC_GetSysClockFreq+0x98>)
 80034b6:	fb03 f202 	mul.w	r2, r3, r2
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c0:	617b      	str	r3, [r7, #20]
 80034c2:	e004      	b.n	80034ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a0c      	ldr	r2, [pc, #48]	; (80034f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80034c8:	fb02 f303 	mul.w	r3, r2, r3
 80034cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	613b      	str	r3, [r7, #16]
      break;
 80034d2:	e002      	b.n	80034da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034d4:	4b05      	ldr	r3, [pc, #20]	; (80034ec <HAL_RCC_GetSysClockFreq+0x98>)
 80034d6:	613b      	str	r3, [r7, #16]
      break;
 80034d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034da:	693b      	ldr	r3, [r7, #16]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	371c      	adds	r7, #28
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bc80      	pop	{r7}
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	40021000 	.word	0x40021000
 80034ec:	007a1200 	.word	0x007a1200
 80034f0:	080094d4 	.word	0x080094d4
 80034f4:	080094e4 	.word	0x080094e4
 80034f8:	003d0900 	.word	0x003d0900

080034fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003500:	4b02      	ldr	r3, [pc, #8]	; (800350c <HAL_RCC_GetHCLKFreq+0x10>)
 8003502:	681b      	ldr	r3, [r3, #0]
}
 8003504:	4618      	mov	r0, r3
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr
 800350c:	20000000 	.word	0x20000000

08003510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003514:	f7ff fff2 	bl	80034fc <HAL_RCC_GetHCLKFreq>
 8003518:	4602      	mov	r2, r0
 800351a:	4b05      	ldr	r3, [pc, #20]	; (8003530 <HAL_RCC_GetPCLK1Freq+0x20>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	0a1b      	lsrs	r3, r3, #8
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	4903      	ldr	r1, [pc, #12]	; (8003534 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003526:	5ccb      	ldrb	r3, [r1, r3]
 8003528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800352c:	4618      	mov	r0, r3
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40021000 	.word	0x40021000
 8003534:	080094cc 	.word	0x080094cc

08003538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800353c:	f7ff ffde 	bl	80034fc <HAL_RCC_GetHCLKFreq>
 8003540:	4602      	mov	r2, r0
 8003542:	4b05      	ldr	r3, [pc, #20]	; (8003558 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	0adb      	lsrs	r3, r3, #11
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	4903      	ldr	r1, [pc, #12]	; (800355c <HAL_RCC_GetPCLK2Freq+0x24>)
 800354e:	5ccb      	ldrb	r3, [r1, r3]
 8003550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003554:	4618      	mov	r0, r3
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40021000 	.word	0x40021000
 800355c:	080094cc 	.word	0x080094cc

08003560 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003568:	4b0a      	ldr	r3, [pc, #40]	; (8003594 <RCC_Delay+0x34>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a0a      	ldr	r2, [pc, #40]	; (8003598 <RCC_Delay+0x38>)
 800356e:	fba2 2303 	umull	r2, r3, r2, r3
 8003572:	0a5b      	lsrs	r3, r3, #9
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	fb02 f303 	mul.w	r3, r2, r3
 800357a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800357c:	bf00      	nop
  }
  while (Delay --);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	1e5a      	subs	r2, r3, #1
 8003582:	60fa      	str	r2, [r7, #12]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1f9      	bne.n	800357c <RCC_Delay+0x1c>
}
 8003588:	bf00      	nop
 800358a:	bf00      	nop
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	bc80      	pop	{r7}
 8003592:	4770      	bx	lr
 8003594:	20000000 	.word	0x20000000
 8003598:	10624dd3 	.word	0x10624dd3

0800359c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	613b      	str	r3, [r7, #16]
 80035a8:	2300      	movs	r3, #0
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d07d      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80035b8:	2300      	movs	r3, #0
 80035ba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035bc:	4b4f      	ldr	r3, [pc, #316]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10d      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035c8:	4b4c      	ldr	r3, [pc, #304]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	4a4b      	ldr	r2, [pc, #300]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d2:	61d3      	str	r3, [r2, #28]
 80035d4:	4b49      	ldr	r3, [pc, #292]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035dc:	60bb      	str	r3, [r7, #8]
 80035de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035e0:	2301      	movs	r3, #1
 80035e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e4:	4b46      	ldr	r3, [pc, #280]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d118      	bne.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035f0:	4b43      	ldr	r3, [pc, #268]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a42      	ldr	r2, [pc, #264]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035fc:	f7fd faea 	bl	8000bd4 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003602:	e008      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003604:	f7fd fae6 	bl	8000bd4 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b64      	cmp	r3, #100	; 0x64
 8003610:	d901      	bls.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e06d      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003616:	4b3a      	ldr	r3, [pc, #232]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0f0      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003622:	4b36      	ldr	r3, [pc, #216]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800362a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d02e      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	429a      	cmp	r2, r3
 800363e:	d027      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003640:	4b2e      	ldr	r3, [pc, #184]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003648:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800364a:	4b2e      	ldr	r3, [pc, #184]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800364c:	2201      	movs	r2, #1
 800364e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003650:	4b2c      	ldr	r3, [pc, #176]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003652:	2200      	movs	r2, #0
 8003654:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003656:	4a29      	ldr	r2, [pc, #164]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d014      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003666:	f7fd fab5 	bl	8000bd4 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800366c:	e00a      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800366e:	f7fd fab1 	bl	8000bd4 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	f241 3288 	movw	r2, #5000	; 0x1388
 800367c:	4293      	cmp	r3, r2
 800367e:	d901      	bls.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e036      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003684:	4b1d      	ldr	r3, [pc, #116]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0ee      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003690:	4b1a      	ldr	r3, [pc, #104]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	4917      	ldr	r1, [pc, #92]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036a2:	7dfb      	ldrb	r3, [r7, #23]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d105      	bne.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a8:	4b14      	ldr	r3, [pc, #80]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	4a13      	ldr	r2, [pc, #76]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d008      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036c0:	4b0e      	ldr	r3, [pc, #56]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	490b      	ldr	r1, [pc, #44]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0310 	and.w	r3, r3, #16
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d008      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036de:	4b07      	ldr	r3, [pc, #28]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	4904      	ldr	r1, [pc, #16]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	40021000 	.word	0x40021000
 8003700:	40007000 	.word	0x40007000
 8003704:	42420440 	.word	0x42420440

08003708 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e041      	b.n	800379e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d106      	bne.n	8003734 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7fd f90c 	bl	800094c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2202      	movs	r2, #2
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3304      	adds	r3, #4
 8003744:	4619      	mov	r1, r3
 8003746:	4610      	mov	r0, r2
 8003748:	f000 fa74 	bl	8003c34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
	...

080037a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d001      	beq.n	80037c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e03a      	b.n	8003836 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0201 	orr.w	r2, r2, #1
 80037d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a18      	ldr	r2, [pc, #96]	; (8003840 <HAL_TIM_Base_Start_IT+0x98>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00e      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x58>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ea:	d009      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x58>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a14      	ldr	r2, [pc, #80]	; (8003844 <HAL_TIM_Base_Start_IT+0x9c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d004      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x58>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a13      	ldr	r2, [pc, #76]	; (8003848 <HAL_TIM_Base_Start_IT+0xa0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d111      	bne.n	8003824 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2b06      	cmp	r3, #6
 8003810:	d010      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 0201 	orr.w	r2, r2, #1
 8003820:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003822:	e007      	b.n	8003834 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0201 	orr.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr
 8003840:	40012c00 	.word	0x40012c00
 8003844:	40000400 	.word	0x40000400
 8003848:	40000800 	.word	0x40000800

0800384c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b02      	cmp	r3, #2
 8003860:	d122      	bne.n	80038a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b02      	cmp	r3, #2
 800386e:	d11b      	bne.n	80038a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f06f 0202 	mvn.w	r2, #2
 8003878:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f9b4 	bl	8003bfc <HAL_TIM_IC_CaptureCallback>
 8003894:	e005      	b.n	80038a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f9a7 	bl	8003bea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f9b6 	bl	8003c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	f003 0304 	and.w	r3, r3, #4
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	d122      	bne.n	80038fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b04      	cmp	r3, #4
 80038c2:	d11b      	bne.n	80038fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f06f 0204 	mvn.w	r2, #4
 80038cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2202      	movs	r2, #2
 80038d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f98a 	bl	8003bfc <HAL_TIM_IC_CaptureCallback>
 80038e8:	e005      	b.n	80038f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f97d 	bl	8003bea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f98c 	bl	8003c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b08      	cmp	r3, #8
 8003908:	d122      	bne.n	8003950 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f003 0308 	and.w	r3, r3, #8
 8003914:	2b08      	cmp	r3, #8
 8003916:	d11b      	bne.n	8003950 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f06f 0208 	mvn.w	r2, #8
 8003920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2204      	movs	r2, #4
 8003926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f960 	bl	8003bfc <HAL_TIM_IC_CaptureCallback>
 800393c:	e005      	b.n	800394a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f953 	bl	8003bea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f962 	bl	8003c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	f003 0310 	and.w	r3, r3, #16
 800395a:	2b10      	cmp	r3, #16
 800395c:	d122      	bne.n	80039a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f003 0310 	and.w	r3, r3, #16
 8003968:	2b10      	cmp	r3, #16
 800396a:	d11b      	bne.n	80039a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f06f 0210 	mvn.w	r2, #16
 8003974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2208      	movs	r2, #8
 800397a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f936 	bl	8003bfc <HAL_TIM_IC_CaptureCallback>
 8003990:	e005      	b.n	800399e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f929 	bl	8003bea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f938 	bl	8003c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d10e      	bne.n	80039d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d107      	bne.n	80039d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f06f 0201 	mvn.w	r2, #1
 80039c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7fc fbec 	bl	80001a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039da:	2b80      	cmp	r3, #128	; 0x80
 80039dc:	d10e      	bne.n	80039fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e8:	2b80      	cmp	r3, #128	; 0x80
 80039ea:	d107      	bne.n	80039fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 fa7b 	bl	8003ef2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a06:	2b40      	cmp	r3, #64	; 0x40
 8003a08:	d10e      	bne.n	8003a28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a14:	2b40      	cmp	r3, #64	; 0x40
 8003a16:	d107      	bne.n	8003a28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f8fc 	bl	8003c20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	f003 0320 	and.w	r3, r3, #32
 8003a32:	2b20      	cmp	r3, #32
 8003a34:	d10e      	bne.n	8003a54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f003 0320 	and.w	r3, r3, #32
 8003a40:	2b20      	cmp	r3, #32
 8003a42:	d107      	bne.n	8003a54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f06f 0220 	mvn.w	r2, #32
 8003a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 fa46 	bl	8003ee0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a54:	bf00      	nop
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d101      	bne.n	8003a78 <HAL_TIM_ConfigClockSource+0x1c>
 8003a74:	2302      	movs	r3, #2
 8003a76:	e0b4      	b.n	8003be2 <HAL_TIM_ConfigClockSource+0x186>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ab0:	d03e      	beq.n	8003b30 <HAL_TIM_ConfigClockSource+0xd4>
 8003ab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ab6:	f200 8087 	bhi.w	8003bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003abe:	f000 8086 	beq.w	8003bce <HAL_TIM_ConfigClockSource+0x172>
 8003ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac6:	d87f      	bhi.n	8003bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac8:	2b70      	cmp	r3, #112	; 0x70
 8003aca:	d01a      	beq.n	8003b02 <HAL_TIM_ConfigClockSource+0xa6>
 8003acc:	2b70      	cmp	r3, #112	; 0x70
 8003ace:	d87b      	bhi.n	8003bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad0:	2b60      	cmp	r3, #96	; 0x60
 8003ad2:	d050      	beq.n	8003b76 <HAL_TIM_ConfigClockSource+0x11a>
 8003ad4:	2b60      	cmp	r3, #96	; 0x60
 8003ad6:	d877      	bhi.n	8003bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad8:	2b50      	cmp	r3, #80	; 0x50
 8003ada:	d03c      	beq.n	8003b56 <HAL_TIM_ConfigClockSource+0xfa>
 8003adc:	2b50      	cmp	r3, #80	; 0x50
 8003ade:	d873      	bhi.n	8003bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae0:	2b40      	cmp	r3, #64	; 0x40
 8003ae2:	d058      	beq.n	8003b96 <HAL_TIM_ConfigClockSource+0x13a>
 8003ae4:	2b40      	cmp	r3, #64	; 0x40
 8003ae6:	d86f      	bhi.n	8003bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae8:	2b30      	cmp	r3, #48	; 0x30
 8003aea:	d064      	beq.n	8003bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8003aec:	2b30      	cmp	r3, #48	; 0x30
 8003aee:	d86b      	bhi.n	8003bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003af0:	2b20      	cmp	r3, #32
 8003af2:	d060      	beq.n	8003bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8003af4:	2b20      	cmp	r3, #32
 8003af6:	d867      	bhi.n	8003bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d05c      	beq.n	8003bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8003afc:	2b10      	cmp	r3, #16
 8003afe:	d05a      	beq.n	8003bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8003b00:	e062      	b.n	8003bc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b12:	f000 f968 	bl	8003de6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	609a      	str	r2, [r3, #8]
      break;
 8003b2e:	e04f      	b.n	8003bd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b40:	f000 f951 	bl	8003de6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689a      	ldr	r2, [r3, #8]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b52:	609a      	str	r2, [r3, #8]
      break;
 8003b54:	e03c      	b.n	8003bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b62:	461a      	mov	r2, r3
 8003b64:	f000 f8c8 	bl	8003cf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2150      	movs	r1, #80	; 0x50
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 f91f 	bl	8003db2 <TIM_ITRx_SetConfig>
      break;
 8003b74:	e02c      	b.n	8003bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b82:	461a      	mov	r2, r3
 8003b84:	f000 f8e6 	bl	8003d54 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2160      	movs	r1, #96	; 0x60
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 f90f 	bl	8003db2 <TIM_ITRx_SetConfig>
      break;
 8003b94:	e01c      	b.n	8003bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	f000 f8a8 	bl	8003cf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2140      	movs	r1, #64	; 0x40
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 f8ff 	bl	8003db2 <TIM_ITRx_SetConfig>
      break;
 8003bb4:	e00c      	b.n	8003bd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	4610      	mov	r0, r2
 8003bc2:	f000 f8f6 	bl	8003db2 <TIM_ITRx_SetConfig>
      break;
 8003bc6:	e003      	b.n	8003bd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	73fb      	strb	r3, [r7, #15]
      break;
 8003bcc:	e000      	b.n	8003bd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b083      	sub	sp, #12
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bc80      	pop	{r7}
 8003bfa:	4770      	bx	lr

08003bfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bc80      	pop	{r7}
 8003c0c:	4770      	bx	lr

08003c0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bc80      	pop	{r7}
 8003c1e:	4770      	bx	lr

08003c20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bc80      	pop	{r7}
 8003c30:	4770      	bx	lr
	...

08003c34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a29      	ldr	r2, [pc, #164]	; (8003cec <TIM_Base_SetConfig+0xb8>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d00b      	beq.n	8003c64 <TIM_Base_SetConfig+0x30>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c52:	d007      	beq.n	8003c64 <TIM_Base_SetConfig+0x30>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a26      	ldr	r2, [pc, #152]	; (8003cf0 <TIM_Base_SetConfig+0xbc>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d003      	beq.n	8003c64 <TIM_Base_SetConfig+0x30>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a25      	ldr	r2, [pc, #148]	; (8003cf4 <TIM_Base_SetConfig+0xc0>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d108      	bne.n	8003c76 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a1c      	ldr	r2, [pc, #112]	; (8003cec <TIM_Base_SetConfig+0xb8>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d00b      	beq.n	8003c96 <TIM_Base_SetConfig+0x62>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c84:	d007      	beq.n	8003c96 <TIM_Base_SetConfig+0x62>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a19      	ldr	r2, [pc, #100]	; (8003cf0 <TIM_Base_SetConfig+0xbc>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d003      	beq.n	8003c96 <TIM_Base_SetConfig+0x62>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a18      	ldr	r2, [pc, #96]	; (8003cf4 <TIM_Base_SetConfig+0xc0>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d108      	bne.n	8003ca8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a07      	ldr	r2, [pc, #28]	; (8003cec <TIM_Base_SetConfig+0xb8>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d103      	bne.n	8003cdc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	691a      	ldr	r2, [r3, #16]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	615a      	str	r2, [r3, #20]
}
 8003ce2:	bf00      	nop
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr
 8003cec:	40012c00 	.word	0x40012c00
 8003cf0:	40000400 	.word	0x40000400
 8003cf4:	40000800 	.word	0x40000800

08003cf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b087      	sub	sp, #28
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	f023 0201 	bic.w	r2, r3, #1
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f023 030a 	bic.w	r3, r3, #10
 8003d34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	621a      	str	r2, [r3, #32]
}
 8003d4a:	bf00      	nop
 8003d4c:	371c      	adds	r7, #28
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bc80      	pop	{r7}
 8003d52:	4770      	bx	lr

08003d54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	f023 0210 	bic.w	r2, r3, #16
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	031b      	lsls	r3, r3, #12
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d90:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	621a      	str	r2, [r3, #32]
}
 8003da8:	bf00      	nop
 8003daa:	371c      	adds	r7, #28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bc80      	pop	{r7}
 8003db0:	4770      	bx	lr

08003db2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b085      	sub	sp, #20
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
 8003dba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f043 0307 	orr.w	r3, r3, #7
 8003dd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	609a      	str	r2, [r3, #8]
}
 8003ddc:	bf00      	nop
 8003dde:	3714      	adds	r7, #20
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bc80      	pop	{r7}
 8003de4:	4770      	bx	lr

08003de6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b087      	sub	sp, #28
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	60f8      	str	r0, [r7, #12]
 8003dee:	60b9      	str	r1, [r7, #8]
 8003df0:	607a      	str	r2, [r7, #4]
 8003df2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e00:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	021a      	lsls	r2, r3, #8
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	431a      	orrs	r2, r3
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	609a      	str	r2, [r3, #8]
}
 8003e1a:	bf00      	nop
 8003e1c:	371c      	adds	r7, #28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bc80      	pop	{r7}
 8003e22:	4770      	bx	lr

08003e24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d101      	bne.n	8003e3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	e046      	b.n	8003eca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2202      	movs	r2, #2
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a16      	ldr	r2, [pc, #88]	; (8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d00e      	beq.n	8003e9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e88:	d009      	beq.n	8003e9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a12      	ldr	r2, [pc, #72]	; (8003ed8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d004      	beq.n	8003e9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a10      	ldr	r2, [pc, #64]	; (8003edc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d10c      	bne.n	8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ea4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	68ba      	ldr	r2, [r7, #8]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3714      	adds	r7, #20
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bc80      	pop	{r7}
 8003ed2:	4770      	bx	lr
 8003ed4:	40012c00 	.word	0x40012c00
 8003ed8:	40000400 	.word	0x40000400
 8003edc:	40000800 	.word	0x40000800

08003ee0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bc80      	pop	{r7}
 8003ef0:	4770      	bx	lr

08003ef2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bc80      	pop	{r7}
 8003f02:	4770      	bx	lr

08003f04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e042      	b.n	8003f9c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d106      	bne.n	8003f30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7fc fd34 	bl	8000998 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2224      	movs	r2, #36	; 0x24
 8003f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68da      	ldr	r2, [r3, #12]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 fdc5 	bl	8004ad8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	691a      	ldr	r2, [r3, #16]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	695a      	ldr	r2, [r3, #20]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68da      	ldr	r2, [r3, #12]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2220      	movs	r2, #32
 8003f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b08a      	sub	sp, #40	; 0x28
 8003fa8:	af02      	add	r7, sp, #8
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	603b      	str	r3, [r7, #0]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b20      	cmp	r3, #32
 8003fc2:	d16d      	bne.n	80040a0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d002      	beq.n	8003fd0 <HAL_UART_Transmit+0x2c>
 8003fca:	88fb      	ldrh	r3, [r7, #6]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e066      	b.n	80040a2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2221      	movs	r2, #33	; 0x21
 8003fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fe2:	f7fc fdf7 	bl	8000bd4 <HAL_GetTick>
 8003fe6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	88fa      	ldrh	r2, [r7, #6]
 8003fec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	88fa      	ldrh	r2, [r7, #6]
 8003ff2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ffc:	d108      	bne.n	8004010 <HAL_UART_Transmit+0x6c>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d104      	bne.n	8004010 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004006:	2300      	movs	r3, #0
 8004008:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	61bb      	str	r3, [r7, #24]
 800400e:	e003      	b.n	8004018 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004014:	2300      	movs	r3, #0
 8004016:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004018:	e02a      	b.n	8004070 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2200      	movs	r2, #0
 8004022:	2180      	movs	r1, #128	; 0x80
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 fb14 	bl	8004652 <UART_WaitOnFlagUntilTimeout>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e036      	b.n	80040a2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10b      	bne.n	8004052 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	881b      	ldrh	r3, [r3, #0]
 800403e:	461a      	mov	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004048:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	3302      	adds	r3, #2
 800404e:	61bb      	str	r3, [r7, #24]
 8004050:	e007      	b.n	8004062 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	781a      	ldrb	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	3301      	adds	r3, #1
 8004060:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004066:	b29b      	uxth	r3, r3
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004074:	b29b      	uxth	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1cf      	bne.n	800401a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2200      	movs	r2, #0
 8004082:	2140      	movs	r1, #64	; 0x40
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 fae4 	bl	8004652 <UART_WaitOnFlagUntilTimeout>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e006      	b.n	80040a2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800409c:	2300      	movs	r3, #0
 800409e:	e000      	b.n	80040a2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80040a0:	2302      	movs	r3, #2
  }
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3720      	adds	r7, #32
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b084      	sub	sp, #16
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	60f8      	str	r0, [r7, #12]
 80040b2:	60b9      	str	r1, [r7, #8]
 80040b4:	4613      	mov	r3, r2
 80040b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b20      	cmp	r3, #32
 80040c2:	d112      	bne.n	80040ea <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d002      	beq.n	80040d0 <HAL_UART_Receive_IT+0x26>
 80040ca:	88fb      	ldrh	r3, [r7, #6]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e00b      	b.n	80040ec <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80040da:	88fb      	ldrh	r3, [r7, #6]
 80040dc:	461a      	mov	r2, r3
 80040de:	68b9      	ldr	r1, [r7, #8]
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 fb24 	bl	800472e <UART_Start_Receive_IT>
 80040e6:	4603      	mov	r3, r0
 80040e8:	e000      	b.n	80040ec <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80040ea:	2302      	movs	r3, #2
  }
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b0ba      	sub	sp, #232	; 0xe8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800411a:	2300      	movs	r3, #0
 800411c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004120:	2300      	movs	r3, #0
 8004122:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004132:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10f      	bne.n	800415a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800413a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800413e:	f003 0320 	and.w	r3, r3, #32
 8004142:	2b00      	cmp	r3, #0
 8004144:	d009      	beq.n	800415a <HAL_UART_IRQHandler+0x66>
 8004146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800414a:	f003 0320 	and.w	r3, r3, #32
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 fc01 	bl	800495a <UART_Receive_IT>
      return;
 8004158:	e25b      	b.n	8004612 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800415a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800415e:	2b00      	cmp	r3, #0
 8004160:	f000 80de 	beq.w	8004320 <HAL_UART_IRQHandler+0x22c>
 8004164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	d106      	bne.n	800417e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004174:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 80d1 	beq.w	8004320 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800417e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00b      	beq.n	80041a2 <HAL_UART_IRQHandler+0xae>
 800418a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800418e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004192:	2b00      	cmp	r3, #0
 8004194:	d005      	beq.n	80041a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419a:	f043 0201 	orr.w	r2, r3, #1
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a6:	f003 0304 	and.w	r3, r3, #4
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00b      	beq.n	80041c6 <HAL_UART_IRQHandler+0xd2>
 80041ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d005      	beq.n	80041c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041be:	f043 0202 	orr.w	r2, r3, #2
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00b      	beq.n	80041ea <HAL_UART_IRQHandler+0xf6>
 80041d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d005      	beq.n	80041ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e2:	f043 0204 	orr.w	r2, r3, #4
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80041ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ee:	f003 0308 	and.w	r3, r3, #8
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d011      	beq.n	800421a <HAL_UART_IRQHandler+0x126>
 80041f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041fa:	f003 0320 	and.w	r3, r3, #32
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d105      	bne.n	800420e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004202:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b00      	cmp	r3, #0
 800420c:	d005      	beq.n	800421a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004212:	f043 0208 	orr.w	r2, r3, #8
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 81f2 	beq.w	8004608 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004228:	f003 0320 	and.w	r3, r3, #32
 800422c:	2b00      	cmp	r3, #0
 800422e:	d008      	beq.n	8004242 <HAL_UART_IRQHandler+0x14e>
 8004230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004234:	f003 0320 	and.w	r3, r3, #32
 8004238:	2b00      	cmp	r3, #0
 800423a:	d002      	beq.n	8004242 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 fb8c 	bl	800495a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424c:	2b00      	cmp	r3, #0
 800424e:	bf14      	ite	ne
 8004250:	2301      	movne	r3, #1
 8004252:	2300      	moveq	r3, #0
 8004254:	b2db      	uxtb	r3, r3
 8004256:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425e:	f003 0308 	and.w	r3, r3, #8
 8004262:	2b00      	cmp	r3, #0
 8004264:	d103      	bne.n	800426e <HAL_UART_IRQHandler+0x17a>
 8004266:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800426a:	2b00      	cmp	r3, #0
 800426c:	d04f      	beq.n	800430e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 fa96 	bl	80047a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800427e:	2b00      	cmp	r3, #0
 8004280:	d041      	beq.n	8004306 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	3314      	adds	r3, #20
 8004288:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004290:	e853 3f00 	ldrex	r3, [r3]
 8004294:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004298:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800429c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3314      	adds	r3, #20
 80042aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80042ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80042b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80042ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80042be:	e841 2300 	strex	r3, r2, [r1]
 80042c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80042c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1d9      	bne.n	8004282 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d013      	beq.n	80042fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042da:	4a7e      	ldr	r2, [pc, #504]	; (80044d4 <HAL_UART_IRQHandler+0x3e0>)
 80042dc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fc fdc8 	bl	8000e78 <HAL_DMA_Abort_IT>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d016      	beq.n	800431c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042f8:	4610      	mov	r0, r2
 80042fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042fc:	e00e      	b.n	800431c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f993 	bl	800462a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004304:	e00a      	b.n	800431c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f98f 	bl	800462a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800430c:	e006      	b.n	800431c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f98b 	bl	800462a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800431a:	e175      	b.n	8004608 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800431c:	bf00      	nop
    return;
 800431e:	e173      	b.n	8004608 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004324:	2b01      	cmp	r3, #1
 8004326:	f040 814f 	bne.w	80045c8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800432a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800432e:	f003 0310 	and.w	r3, r3, #16
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 8148 	beq.w	80045c8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800433c:	f003 0310 	and.w	r3, r3, #16
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 8141 	beq.w	80045c8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004346:	2300      	movs	r3, #0
 8004348:	60bb      	str	r3, [r7, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	60bb      	str	r3, [r7, #8]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	60bb      	str	r3, [r7, #8]
 800435a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 80b6 	beq.w	80044d8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004378:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 8145 	beq.w	800460c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004386:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800438a:	429a      	cmp	r2, r3
 800438c:	f080 813e 	bcs.w	800460c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004396:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	2b20      	cmp	r3, #32
 80043a0:	f000 8088 	beq.w	80044b4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	330c      	adds	r3, #12
 80043aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043b2:	e853 3f00 	ldrex	r3, [r3]
 80043b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80043ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	330c      	adds	r3, #12
 80043cc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80043d0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80043d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80043dc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80043e0:	e841 2300 	strex	r3, r2, [r1]
 80043e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80043e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1d9      	bne.n	80043a4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	3314      	adds	r3, #20
 80043f6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043fa:	e853 3f00 	ldrex	r3, [r3]
 80043fe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004400:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004402:	f023 0301 	bic.w	r3, r3, #1
 8004406:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	3314      	adds	r3, #20
 8004410:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004414:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004418:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800441c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004420:	e841 2300 	strex	r3, r2, [r1]
 8004424:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004426:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1e1      	bne.n	80043f0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	3314      	adds	r3, #20
 8004432:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004434:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004436:	e853 3f00 	ldrex	r3, [r3]
 800443a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800443c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800443e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004442:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	3314      	adds	r3, #20
 800444c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004450:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004452:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004454:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004456:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004458:	e841 2300 	strex	r3, r2, [r1]
 800445c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800445e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1e3      	bne.n	800442c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2220      	movs	r2, #32
 8004468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	330c      	adds	r3, #12
 8004478:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800447c:	e853 3f00 	ldrex	r3, [r3]
 8004480:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004484:	f023 0310 	bic.w	r3, r3, #16
 8004488:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	330c      	adds	r3, #12
 8004492:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004496:	65ba      	str	r2, [r7, #88]	; 0x58
 8004498:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800449c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800449e:	e841 2300 	strex	r3, r2, [r1]
 80044a2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80044a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1e3      	bne.n	8004472 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7fc fca7 	bl	8000e02 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	4619      	mov	r1, r3
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f8b6 	bl	800463c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044d0:	e09c      	b.n	800460c <HAL_UART_IRQHandler+0x518>
 80044d2:	bf00      	nop
 80044d4:	08004865 	.word	0x08004865
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 808e 	beq.w	8004610 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80044f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 8089 	beq.w	8004610 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	330c      	adds	r3, #12
 8004504:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004508:	e853 3f00 	ldrex	r3, [r3]
 800450c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800450e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004510:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004514:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	330c      	adds	r3, #12
 800451e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004522:	647a      	str	r2, [r7, #68]	; 0x44
 8004524:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004526:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004528:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800452a:	e841 2300 	strex	r3, r2, [r1]
 800452e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1e3      	bne.n	80044fe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	3314      	adds	r3, #20
 800453c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	e853 3f00 	ldrex	r3, [r3]
 8004544:	623b      	str	r3, [r7, #32]
   return(result);
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	f023 0301 	bic.w	r3, r3, #1
 800454c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3314      	adds	r3, #20
 8004556:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800455a:	633a      	str	r2, [r7, #48]	; 0x30
 800455c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004562:	e841 2300 	strex	r3, r2, [r1]
 8004566:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1e3      	bne.n	8004536 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2220      	movs	r2, #32
 8004572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	330c      	adds	r3, #12
 8004582:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	e853 3f00 	ldrex	r3, [r3]
 800458a:	60fb      	str	r3, [r7, #12]
   return(result);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f023 0310 	bic.w	r3, r3, #16
 8004592:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	330c      	adds	r3, #12
 800459c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80045a0:	61fa      	str	r2, [r7, #28]
 80045a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a4:	69b9      	ldr	r1, [r7, #24]
 80045a6:	69fa      	ldr	r2, [r7, #28]
 80045a8:	e841 2300 	strex	r3, r2, [r1]
 80045ac:	617b      	str	r3, [r7, #20]
   return(result);
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1e3      	bne.n	800457c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045be:	4619      	mov	r1, r3
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 f83b 	bl	800463c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045c6:	e023      	b.n	8004610 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80045c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d009      	beq.n	80045e8 <HAL_UART_IRQHandler+0x4f4>
 80045d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 f953 	bl	800488c <UART_Transmit_IT>
    return;
 80045e6:	e014      	b.n	8004612 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00e      	beq.n	8004612 <HAL_UART_IRQHandler+0x51e>
 80045f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d008      	beq.n	8004612 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f992 	bl	800492a <UART_EndTransmit_IT>
    return;
 8004606:	e004      	b.n	8004612 <HAL_UART_IRQHandler+0x51e>
    return;
 8004608:	bf00      	nop
 800460a:	e002      	b.n	8004612 <HAL_UART_IRQHandler+0x51e>
      return;
 800460c:	bf00      	nop
 800460e:	e000      	b.n	8004612 <HAL_UART_IRQHandler+0x51e>
      return;
 8004610:	bf00      	nop
  }
}
 8004612:	37e8      	adds	r7, #232	; 0xe8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	bc80      	pop	{r7}
 8004628:	4770      	bx	lr

0800462a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800462a:	b480      	push	{r7}
 800462c:	b083      	sub	sp, #12
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	bc80      	pop	{r7}
 800463a:	4770      	bx	lr

0800463c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	460b      	mov	r3, r1
 8004646:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	bc80      	pop	{r7}
 8004650:	4770      	bx	lr

08004652 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b090      	sub	sp, #64	; 0x40
 8004656:	af00      	add	r7, sp, #0
 8004658:	60f8      	str	r0, [r7, #12]
 800465a:	60b9      	str	r1, [r7, #8]
 800465c:	603b      	str	r3, [r7, #0]
 800465e:	4613      	mov	r3, r2
 8004660:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004662:	e050      	b.n	8004706 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800466a:	d04c      	beq.n	8004706 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800466c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800466e:	2b00      	cmp	r3, #0
 8004670:	d007      	beq.n	8004682 <UART_WaitOnFlagUntilTimeout+0x30>
 8004672:	f7fc faaf 	bl	8000bd4 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800467e:	429a      	cmp	r2, r3
 8004680:	d241      	bcs.n	8004706 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	330c      	adds	r3, #12
 8004688:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468c:	e853 3f00 	ldrex	r3, [r3]
 8004690:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004698:	63fb      	str	r3, [r7, #60]	; 0x3c
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	330c      	adds	r3, #12
 80046a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046a2:	637a      	str	r2, [r7, #52]	; 0x34
 80046a4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046aa:	e841 2300 	strex	r3, r2, [r1]
 80046ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1e5      	bne.n	8004682 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3314      	adds	r3, #20
 80046bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	e853 3f00 	ldrex	r3, [r3]
 80046c4:	613b      	str	r3, [r7, #16]
   return(result);
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f023 0301 	bic.w	r3, r3, #1
 80046cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	3314      	adds	r3, #20
 80046d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046d6:	623a      	str	r2, [r7, #32]
 80046d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046da:	69f9      	ldr	r1, [r7, #28]
 80046dc:	6a3a      	ldr	r2, [r7, #32]
 80046de:	e841 2300 	strex	r3, r2, [r1]
 80046e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1e5      	bne.n	80046b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2220      	movs	r2, #32
 80046ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e00f      	b.n	8004726 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	4013      	ands	r3, r2
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	429a      	cmp	r2, r3
 8004714:	bf0c      	ite	eq
 8004716:	2301      	moveq	r3, #1
 8004718:	2300      	movne	r3, #0
 800471a:	b2db      	uxtb	r3, r3
 800471c:	461a      	mov	r2, r3
 800471e:	79fb      	ldrb	r3, [r7, #7]
 8004720:	429a      	cmp	r2, r3
 8004722:	d09f      	beq.n	8004664 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3740      	adds	r7, #64	; 0x40
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800472e:	b480      	push	{r7}
 8004730:	b085      	sub	sp, #20
 8004732:	af00      	add	r7, sp, #0
 8004734:	60f8      	str	r0, [r7, #12]
 8004736:	60b9      	str	r1, [r7, #8]
 8004738:	4613      	mov	r3, r2
 800473a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	88fa      	ldrh	r2, [r7, #6]
 8004746:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	88fa      	ldrh	r2, [r7, #6]
 800474c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2222      	movs	r2, #34	; 0x22
 8004758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d007      	beq.n	8004774 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68da      	ldr	r2, [r3, #12]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004772:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	695a      	ldr	r2, [r3, #20]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f042 0201 	orr.w	r2, r2, #1
 8004782:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68da      	ldr	r2, [r3, #12]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f042 0220 	orr.w	r2, r2, #32
 8004792:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	bc80      	pop	{r7}
 800479e:	4770      	bx	lr

080047a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b095      	sub	sp, #84	; 0x54
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	330c      	adds	r3, #12
 80047ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b2:	e853 3f00 	ldrex	r3, [r3]
 80047b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	330c      	adds	r3, #12
 80047c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047c8:	643a      	str	r2, [r7, #64]	; 0x40
 80047ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047d0:	e841 2300 	strex	r3, r2, [r1]
 80047d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1e5      	bne.n	80047a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	3314      	adds	r3, #20
 80047e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	e853 3f00 	ldrex	r3, [r3]
 80047ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	f023 0301 	bic.w	r3, r3, #1
 80047f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	3314      	adds	r3, #20
 80047fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004800:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004804:	e841 2300 	strex	r3, r2, [r1]
 8004808:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1e5      	bne.n	80047dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004814:	2b01      	cmp	r3, #1
 8004816:	d119      	bne.n	800484c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	330c      	adds	r3, #12
 800481e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	e853 3f00 	ldrex	r3, [r3]
 8004826:	60bb      	str	r3, [r7, #8]
   return(result);
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	f023 0310 	bic.w	r3, r3, #16
 800482e:	647b      	str	r3, [r7, #68]	; 0x44
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	330c      	adds	r3, #12
 8004836:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004838:	61ba      	str	r2, [r7, #24]
 800483a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483c:	6979      	ldr	r1, [r7, #20]
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	e841 2300 	strex	r3, r2, [r1]
 8004844:	613b      	str	r3, [r7, #16]
   return(result);
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1e5      	bne.n	8004818 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2220      	movs	r2, #32
 8004850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	631a      	str	r2, [r3, #48]	; 0x30
}
 800485a:	bf00      	nop
 800485c:	3754      	adds	r7, #84	; 0x54
 800485e:	46bd      	mov	sp, r7
 8004860:	bc80      	pop	{r7}
 8004862:	4770      	bx	lr

08004864 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f7ff fed3 	bl	800462a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004884:	bf00      	nop
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b21      	cmp	r3, #33	; 0x21
 800489e:	d13e      	bne.n	800491e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a8:	d114      	bne.n	80048d4 <UART_Transmit_IT+0x48>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d110      	bne.n	80048d4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	461a      	mov	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048c6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	1c9a      	adds	r2, r3, #2
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	621a      	str	r2, [r3, #32]
 80048d2:	e008      	b.n	80048e6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a1b      	ldr	r3, [r3, #32]
 80048d8:	1c59      	adds	r1, r3, #1
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6211      	str	r1, [r2, #32]
 80048de:	781a      	ldrb	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	3b01      	subs	r3, #1
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	4619      	mov	r1, r3
 80048f4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10f      	bne.n	800491a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004908:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68da      	ldr	r2, [r3, #12]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004918:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800491a:	2300      	movs	r3, #0
 800491c:	e000      	b.n	8004920 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800491e:	2302      	movs	r3, #2
  }
}
 8004920:	4618      	mov	r0, r3
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	bc80      	pop	{r7}
 8004928:	4770      	bx	lr

0800492a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b082      	sub	sp, #8
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68da      	ldr	r2, [r3, #12]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004940:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2220      	movs	r2, #32
 8004946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7ff fe64 	bl	8004618 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b08c      	sub	sp, #48	; 0x30
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b22      	cmp	r3, #34	; 0x22
 800496c:	f040 80ae 	bne.w	8004acc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004978:	d117      	bne.n	80049aa <UART_Receive_IT+0x50>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d113      	bne.n	80049aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004982:	2300      	movs	r3, #0
 8004984:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	b29b      	uxth	r3, r3
 8004994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004998:	b29a      	uxth	r2, r3
 800499a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a2:	1c9a      	adds	r2, r3, #2
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	629a      	str	r2, [r3, #40]	; 0x28
 80049a8:	e026      	b.n	80049f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80049b0:	2300      	movs	r3, #0
 80049b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049bc:	d007      	beq.n	80049ce <UART_Receive_IT+0x74>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10a      	bne.n	80049dc <UART_Receive_IT+0x82>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d106      	bne.n	80049dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d8:	701a      	strb	r2, [r3, #0]
 80049da:	e008      	b.n	80049ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049e8:	b2da      	uxtb	r2, r3
 80049ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f2:	1c5a      	adds	r2, r3, #1
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	3b01      	subs	r3, #1
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	4619      	mov	r1, r3
 8004a06:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d15d      	bne.n	8004ac8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68da      	ldr	r2, [r3, #12]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f022 0220 	bic.w	r2, r2, #32
 8004a1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68da      	ldr	r2, [r3, #12]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	695a      	ldr	r2, [r3, #20]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 0201 	bic.w	r2, r2, #1
 8004a3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d135      	bne.n	8004abe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	330c      	adds	r3, #12
 8004a5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	e853 3f00 	ldrex	r3, [r3]
 8004a66:	613b      	str	r3, [r7, #16]
   return(result);
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	f023 0310 	bic.w	r3, r3, #16
 8004a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	330c      	adds	r3, #12
 8004a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a78:	623a      	str	r2, [r7, #32]
 8004a7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7c:	69f9      	ldr	r1, [r7, #28]
 8004a7e:	6a3a      	ldr	r2, [r7, #32]
 8004a80:	e841 2300 	strex	r3, r2, [r1]
 8004a84:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1e5      	bne.n	8004a58 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0310 	and.w	r3, r3, #16
 8004a96:	2b10      	cmp	r3, #16
 8004a98:	d10a      	bne.n	8004ab0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60fb      	str	r3, [r7, #12]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7ff fdc0 	bl	800463c <HAL_UARTEx_RxEventCallback>
 8004abc:	e002      	b.n	8004ac4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7fb fb8e 	bl	80001e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	e002      	b.n	8004ace <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	e000      	b.n	8004ace <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004acc:	2302      	movs	r3, #2
  }
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3730      	adds	r7, #48	; 0x30
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
	...

08004ad8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	689a      	ldr	r2, [r3, #8]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004b12:	f023 030c 	bic.w	r3, r3, #12
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	6812      	ldr	r2, [r2, #0]
 8004b1a:	68b9      	ldr	r1, [r7, #8]
 8004b1c:	430b      	orrs	r3, r1
 8004b1e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	699a      	ldr	r2, [r3, #24]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a2c      	ldr	r2, [pc, #176]	; (8004bec <UART_SetConfig+0x114>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d103      	bne.n	8004b48 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004b40:	f7fe fcfa 	bl	8003538 <HAL_RCC_GetPCLK2Freq>
 8004b44:	60f8      	str	r0, [r7, #12]
 8004b46:	e002      	b.n	8004b4e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b48:	f7fe fce2 	bl	8003510 <HAL_RCC_GetPCLK1Freq>
 8004b4c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	4613      	mov	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	009a      	lsls	r2, r3, #2
 8004b58:	441a      	add	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b64:	4a22      	ldr	r2, [pc, #136]	; (8004bf0 <UART_SetConfig+0x118>)
 8004b66:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6a:	095b      	lsrs	r3, r3, #5
 8004b6c:	0119      	lsls	r1, r3, #4
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	4613      	mov	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4413      	add	r3, r2
 8004b76:	009a      	lsls	r2, r3, #2
 8004b78:	441a      	add	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b84:	4b1a      	ldr	r3, [pc, #104]	; (8004bf0 <UART_SetConfig+0x118>)
 8004b86:	fba3 0302 	umull	r0, r3, r3, r2
 8004b8a:	095b      	lsrs	r3, r3, #5
 8004b8c:	2064      	movs	r0, #100	; 0x64
 8004b8e:	fb00 f303 	mul.w	r3, r0, r3
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	011b      	lsls	r3, r3, #4
 8004b96:	3332      	adds	r3, #50	; 0x32
 8004b98:	4a15      	ldr	r2, [pc, #84]	; (8004bf0 <UART_SetConfig+0x118>)
 8004b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9e:	095b      	lsrs	r3, r3, #5
 8004ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ba4:	4419      	add	r1, r3
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	009a      	lsls	r2, r3, #2
 8004bb0:	441a      	add	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bbc:	4b0c      	ldr	r3, [pc, #48]	; (8004bf0 <UART_SetConfig+0x118>)
 8004bbe:	fba3 0302 	umull	r0, r3, r3, r2
 8004bc2:	095b      	lsrs	r3, r3, #5
 8004bc4:	2064      	movs	r0, #100	; 0x64
 8004bc6:	fb00 f303 	mul.w	r3, r0, r3
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	011b      	lsls	r3, r3, #4
 8004bce:	3332      	adds	r3, #50	; 0x32
 8004bd0:	4a07      	ldr	r2, [pc, #28]	; (8004bf0 <UART_SetConfig+0x118>)
 8004bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	f003 020f 	and.w	r2, r3, #15
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	440a      	add	r2, r1
 8004be2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004be4:	bf00      	nop
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	40013800 	.word	0x40013800
 8004bf0:	51eb851f 	.word	0x51eb851f

08004bf4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004bf4:	b084      	sub	sp, #16
 8004bf6:	b480      	push	{r7}
 8004bf8:	b083      	sub	sp, #12
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
 8004bfe:	f107 0014 	add.w	r0, r7, #20
 8004c02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bc80      	pop	{r7}
 8004c10:	b004      	add	sp, #16
 8004c12:	4770      	bx	lr

08004c14 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c24:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004c28:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3714      	adds	r7, #20
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bc80      	pop	{r7}
 8004c3e:	4770      	bx	lr

08004c40 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c48:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004c4c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	43db      	mvns	r3, r3
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	4013      	ands	r3, r2
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bc80      	pop	{r7}
 8004c72:	4770      	bx	lr

08004c74 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bc80      	pop	{r7}
 8004c8a:	4770      	bx	lr

08004c8c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c8c:	b084      	sub	sp, #16
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	f107 0014 	add.w	r0, r7, #20
 8004c9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bc80      	pop	{r7}
 8004cc8:	b004      	add	sp, #16
 8004cca:	4770      	bx	lr

08004ccc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b09d      	sub	sp, #116	; 0x74
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	78db      	ldrb	r3, [r3, #3]
 8004cfa:	2b03      	cmp	r3, #3
 8004cfc:	d81f      	bhi.n	8004d3e <USB_ActivateEndpoint+0x72>
 8004cfe:	a201      	add	r2, pc, #4	; (adr r2, 8004d04 <USB_ActivateEndpoint+0x38>)
 8004d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d04:	08004d15 	.word	0x08004d15
 8004d08:	08004d31 	.word	0x08004d31
 8004d0c:	08004d47 	.word	0x08004d47
 8004d10:	08004d23 	.word	0x08004d23
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004d14:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d1c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004d20:	e012      	b.n	8004d48 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004d22:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d26:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004d2a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004d2e:	e00b      	b.n	8004d48 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004d30:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d38:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004d3c:	e004      	b.n	8004d48 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004d44:	e000      	b.n	8004d48 <USB_ActivateEndpoint+0x7c>
      break;
 8004d46:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	441a      	add	r2, r3
 8004d52:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	881b      	ldrh	r3, [r3, #0]
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	441a      	add	r2, r3
 8004d98:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004d9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004da0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004da4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	7b1b      	ldrb	r3, [r3, #12]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f040 8178 	bne.w	80050aa <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	785b      	ldrb	r3, [r3, #1]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f000 8084 	beq.w	8004ecc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	61bb      	str	r3, [r7, #24]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	61bb      	str	r3, [r7, #24]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	011a      	lsls	r2, r3, #4
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	4413      	add	r3, r2
 8004de2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	88db      	ldrh	r3, [r3, #6]
 8004dec:	085b      	lsrs	r3, r3, #1
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	005b      	lsls	r3, r3, #1
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	827b      	strh	r3, [r7, #18]
 8004e06:	8a7b      	ldrh	r3, [r7, #18]
 8004e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d01b      	beq.n	8004e48 <USB_ActivateEndpoint+0x17c>
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	881b      	ldrh	r3, [r3, #0]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e26:	823b      	strh	r3, [r7, #16]
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	441a      	add	r2, r3
 8004e32:	8a3b      	ldrh	r3, [r7, #16]
 8004e34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	78db      	ldrb	r3, [r3, #3]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d020      	beq.n	8004e92 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	881b      	ldrh	r3, [r3, #0]
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e66:	81bb      	strh	r3, [r7, #12]
 8004e68:	89bb      	ldrh	r3, [r7, #12]
 8004e6a:	f083 0320 	eor.w	r3, r3, #32
 8004e6e:	81bb      	strh	r3, [r7, #12]
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	441a      	add	r2, r3
 8004e7a:	89bb      	ldrh	r3, [r7, #12]
 8004e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	8013      	strh	r3, [r2, #0]
 8004e90:	e2d5      	b.n	800543e <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4413      	add	r3, r2
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ea8:	81fb      	strh	r3, [r7, #14]
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	441a      	add	r2, r3
 8004eb4:	89fb      	ldrh	r3, [r7, #14]
 8004eb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	8013      	strh	r3, [r2, #0]
 8004eca:	e2b8      	b.n	800543e <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	633b      	str	r3, [r7, #48]	; 0x30
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	461a      	mov	r2, r3
 8004eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004edc:	4413      	add	r3, r2
 8004ede:	633b      	str	r3, [r7, #48]	; 0x30
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	011a      	lsls	r2, r3, #4
 8004ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004eee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	88db      	ldrh	r3, [r3, #6]
 8004ef4:	085b      	lsrs	r3, r3, #1
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efe:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f10:	4413      	add	r3, r2
 8004f12:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	011a      	lsls	r2, r3, #4
 8004f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f22:	627b      	str	r3, [r7, #36]	; 0x24
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	801a      	strh	r2, [r3, #0]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	2b3e      	cmp	r3, #62	; 0x3e
 8004f3a:	d91d      	bls.n	8004f78 <USB_ActivateEndpoint+0x2ac>
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	095b      	lsrs	r3, r3, #5
 8004f42:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	f003 031f 	and.w	r3, r3, #31
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d102      	bne.n	8004f56 <USB_ActivateEndpoint+0x28a>
 8004f50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f52:	3b01      	subs	r3, #1
 8004f54:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	029b      	lsls	r3, r3, #10
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	4313      	orrs	r3, r2
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	801a      	strh	r2, [r3, #0]
 8004f76:	e026      	b.n	8004fc6 <USB_ActivateEndpoint+0x2fa>
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10a      	bne.n	8004f96 <USB_ActivateEndpoint+0x2ca>
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	881b      	ldrh	r3, [r3, #0]
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	801a      	strh	r2, [r3, #0]
 8004f94:	e017      	b.n	8004fc6 <USB_ActivateEndpoint+0x2fa>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	085b      	lsrs	r3, r3, #1
 8004f9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d002      	beq.n	8004fb0 <USB_ActivateEndpoint+0x2e4>
 8004faa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fac:	3301      	adds	r3, #1
 8004fae:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	881b      	ldrh	r3, [r3, #0]
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	029b      	lsls	r3, r3, #10
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4413      	add	r3, r2
 8004fd0:	881b      	ldrh	r3, [r3, #0]
 8004fd2:	847b      	strh	r3, [r7, #34]	; 0x22
 8004fd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d01b      	beq.n	8005016 <USB_ActivateEndpoint+0x34a>
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff4:	843b      	strh	r3, [r7, #32]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	441a      	add	r2, r3
 8005000:	8c3b      	ldrh	r3, [r7, #32]
 8005002:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005006:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800500a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800500e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005012:	b29b      	uxth	r3, r3
 8005014:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d124      	bne.n	8005068 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4413      	add	r3, r2
 8005028:	881b      	ldrh	r3, [r3, #0]
 800502a:	b29b      	uxth	r3, r3
 800502c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005034:	83bb      	strh	r3, [r7, #28]
 8005036:	8bbb      	ldrh	r3, [r7, #28]
 8005038:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800503c:	83bb      	strh	r3, [r7, #28]
 800503e:	8bbb      	ldrh	r3, [r7, #28]
 8005040:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005044:	83bb      	strh	r3, [r7, #28]
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	441a      	add	r2, r3
 8005050:	8bbb      	ldrh	r3, [r7, #28]
 8005052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800505a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800505e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005062:	b29b      	uxth	r3, r3
 8005064:	8013      	strh	r3, [r2, #0]
 8005066:	e1ea      	b.n	800543e <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	881b      	ldrh	r3, [r3, #0]
 8005074:	b29b      	uxth	r3, r3
 8005076:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800507a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507e:	83fb      	strh	r3, [r7, #30]
 8005080:	8bfb      	ldrh	r3, [r7, #30]
 8005082:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005086:	83fb      	strh	r3, [r7, #30]
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	441a      	add	r2, r3
 8005092:	8bfb      	ldrh	r3, [r7, #30]
 8005094:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005098:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800509c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	8013      	strh	r3, [r2, #0]
 80050a8:	e1c9      	b.n	800543e <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	78db      	ldrb	r3, [r3, #3]
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d11e      	bne.n	80050f0 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	b29b      	uxth	r3, r3
 80050c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	441a      	add	r2, r3
 80050d6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80050da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050e2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80050e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	8013      	strh	r3, [r2, #0]
 80050ee:	e01d      	b.n	800512c <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4413      	add	r3, r2
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005106:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	441a      	add	r2, r3
 8005114:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005118:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800511c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005128:	b29b      	uxth	r3, r3
 800512a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005136:	b29b      	uxth	r3, r3
 8005138:	461a      	mov	r2, r3
 800513a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800513c:	4413      	add	r3, r2
 800513e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	011a      	lsls	r2, r3, #4
 8005146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005148:	4413      	add	r3, r2
 800514a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800514e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	891b      	ldrh	r3, [r3, #8]
 8005154:	085b      	lsrs	r3, r3, #1
 8005156:	b29b      	uxth	r3, r3
 8005158:	005b      	lsls	r3, r3, #1
 800515a:	b29a      	uxth	r2, r3
 800515c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800515e:	801a      	strh	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	657b      	str	r3, [r7, #84]	; 0x54
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800516a:	b29b      	uxth	r3, r3
 800516c:	461a      	mov	r2, r3
 800516e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005170:	4413      	add	r3, r2
 8005172:	657b      	str	r3, [r7, #84]	; 0x54
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	011a      	lsls	r2, r3, #4
 800517a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800517c:	4413      	add	r3, r2
 800517e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005182:	653b      	str	r3, [r7, #80]	; 0x50
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	895b      	ldrh	r3, [r3, #10]
 8005188:	085b      	lsrs	r3, r3, #1
 800518a:	b29b      	uxth	r3, r3
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	b29a      	uxth	r2, r3
 8005190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005192:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	785b      	ldrb	r3, [r3, #1]
 8005198:	2b00      	cmp	r3, #0
 800519a:	f040 8093 	bne.w	80052c4 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4413      	add	r3, r2
 80051a8:	881b      	ldrh	r3, [r3, #0]
 80051aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80051ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80051b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d01b      	beq.n	80051f2 <USB_ActivateEndpoint+0x526>
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	881b      	ldrh	r3, [r3, #0]
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	441a      	add	r2, r3
 80051dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80051de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4413      	add	r3, r2
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005200:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005206:	2b00      	cmp	r3, #0
 8005208:	d01b      	beq.n	8005242 <USB_ActivateEndpoint+0x576>
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	4413      	add	r3, r2
 8005214:	881b      	ldrh	r3, [r3, #0]
 8005216:	b29b      	uxth	r3, r3
 8005218:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800521c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005220:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	441a      	add	r2, r3
 800522c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800522e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005232:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800523a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800523e:	b29b      	uxth	r3, r3
 8005240:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4413      	add	r3, r2
 800524c:	881b      	ldrh	r3, [r3, #0]
 800524e:	b29b      	uxth	r3, r3
 8005250:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005258:	873b      	strh	r3, [r7, #56]	; 0x38
 800525a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800525c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005260:	873b      	strh	r3, [r7, #56]	; 0x38
 8005262:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005264:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005268:	873b      	strh	r3, [r7, #56]	; 0x38
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	441a      	add	r2, r3
 8005274:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005276:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800527a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800527e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005286:	b29b      	uxth	r3, r3
 8005288:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4413      	add	r3, r2
 8005294:	881b      	ldrh	r3, [r3, #0]
 8005296:	b29b      	uxth	r3, r3
 8005298:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800529c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052a0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	441a      	add	r2, r3
 80052ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80052ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052be:	b29b      	uxth	r3, r3
 80052c0:	8013      	strh	r3, [r2, #0]
 80052c2:	e0bc      	b.n	800543e <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	881b      	ldrh	r3, [r3, #0]
 80052d0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80052d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80052d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d01d      	beq.n	800531c <USB_ActivateEndpoint+0x650>
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	881b      	ldrh	r3, [r3, #0]
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	441a      	add	r2, r3
 8005304:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005308:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800530c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005310:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005318:	b29b      	uxth	r3, r3
 800531a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4413      	add	r3, r2
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800532c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005334:	2b00      	cmp	r3, #0
 8005336:	d01d      	beq.n	8005374 <USB_ActivateEndpoint+0x6a8>
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	881b      	ldrh	r3, [r3, #0]
 8005344:	b29b      	uxth	r3, r3
 8005346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800534a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	441a      	add	r2, r3
 800535c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005360:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005364:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005368:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800536c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005370:	b29b      	uxth	r3, r3
 8005372:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	78db      	ldrb	r3, [r3, #3]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d024      	beq.n	80053c6 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	881b      	ldrh	r3, [r3, #0]
 8005388:	b29b      	uxth	r3, r3
 800538a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800538e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005392:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005396:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800539a:	f083 0320 	eor.w	r3, r3, #32
 800539e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	441a      	add	r2, r3
 80053ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80053b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	8013      	strh	r3, [r2, #0]
 80053c4:	e01d      	b.n	8005402 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4413      	add	r3, r2
 80053d0:	881b      	ldrh	r3, [r3, #0]
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053dc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	441a      	add	r2, r3
 80053ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80053ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053fe:	b29b      	uxth	r3, r3
 8005400:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	881b      	ldrh	r3, [r3, #0]
 800540e:	b29b      	uxth	r3, r3
 8005410:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005418:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	441a      	add	r2, r3
 8005426:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800542a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800542e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800543a:	b29b      	uxth	r3, r3
 800543c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800543e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005442:	4618      	mov	r0, r3
 8005444:	3774      	adds	r7, #116	; 0x74
 8005446:	46bd      	mov	sp, r7
 8005448:	bc80      	pop	{r7}
 800544a:	4770      	bx	lr

0800544c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800544c:	b480      	push	{r7}
 800544e:	b08d      	sub	sp, #52	; 0x34
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	7b1b      	ldrb	r3, [r3, #12]
 800545a:	2b00      	cmp	r3, #0
 800545c:	f040 808e 	bne.w	800557c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	785b      	ldrb	r3, [r3, #1]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d044      	beq.n	80054f2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	881b      	ldrh	r3, [r3, #0]
 8005474:	81bb      	strh	r3, [r7, #12]
 8005476:	89bb      	ldrh	r3, [r7, #12]
 8005478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547c:	2b00      	cmp	r3, #0
 800547e:	d01b      	beq.n	80054b8 <USB_DeactivateEndpoint+0x6c>
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	881b      	ldrh	r3, [r3, #0]
 800548c:	b29b      	uxth	r3, r3
 800548e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005496:	817b      	strh	r3, [r7, #10]
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	441a      	add	r2, r3
 80054a2:	897b      	ldrh	r3, [r7, #10]
 80054a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4413      	add	r3, r2
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ce:	813b      	strh	r3, [r7, #8]
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	441a      	add	r2, r3
 80054da:	893b      	ldrh	r3, [r7, #8]
 80054dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	8013      	strh	r3, [r2, #0]
 80054f0:	e192      	b.n	8005818 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4413      	add	r3, r2
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	827b      	strh	r3, [r7, #18]
 8005500:	8a7b      	ldrh	r3, [r7, #18]
 8005502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d01b      	beq.n	8005542 <USB_DeactivateEndpoint+0xf6>
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	881b      	ldrh	r3, [r3, #0]
 8005516:	b29b      	uxth	r3, r3
 8005518:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800551c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005520:	823b      	strh	r3, [r7, #16]
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	441a      	add	r2, r3
 800552c:	8a3b      	ldrh	r3, [r7, #16]
 800552e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005536:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800553a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800553e:	b29b      	uxth	r3, r3
 8005540:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	881b      	ldrh	r3, [r3, #0]
 800554e:	b29b      	uxth	r3, r3
 8005550:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005558:	81fb      	strh	r3, [r7, #14]
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	441a      	add	r2, r3
 8005564:	89fb      	ldrh	r3, [r7, #14]
 8005566:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800556a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800556e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005576:	b29b      	uxth	r3, r3
 8005578:	8013      	strh	r3, [r2, #0]
 800557a:	e14d      	b.n	8005818 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	785b      	ldrb	r3, [r3, #1]
 8005580:	2b00      	cmp	r3, #0
 8005582:	f040 80a5 	bne.w	80056d0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4413      	add	r3, r2
 8005590:	881b      	ldrh	r3, [r3, #0]
 8005592:	843b      	strh	r3, [r7, #32]
 8005594:	8c3b      	ldrh	r3, [r7, #32]
 8005596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d01b      	beq.n	80055d6 <USB_DeactivateEndpoint+0x18a>
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	4413      	add	r3, r2
 80055a8:	881b      	ldrh	r3, [r3, #0]
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b4:	83fb      	strh	r3, [r7, #30]
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	441a      	add	r2, r3
 80055c0:	8bfb      	ldrh	r3, [r7, #30]
 80055c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	4413      	add	r3, r2
 80055e0:	881b      	ldrh	r3, [r3, #0]
 80055e2:	83bb      	strh	r3, [r7, #28]
 80055e4:	8bbb      	ldrh	r3, [r7, #28]
 80055e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d01b      	beq.n	8005626 <USB_DeactivateEndpoint+0x1da>
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4413      	add	r3, r2
 80055f8:	881b      	ldrh	r3, [r3, #0]
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005604:	837b      	strh	r3, [r7, #26]
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	441a      	add	r2, r3
 8005610:	8b7b      	ldrh	r3, [r7, #26]
 8005612:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005616:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800561a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800561e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005622:	b29b      	uxth	r3, r3
 8005624:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	4413      	add	r3, r2
 8005630:	881b      	ldrh	r3, [r3, #0]
 8005632:	b29b      	uxth	r3, r3
 8005634:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800563c:	833b      	strh	r3, [r7, #24]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	441a      	add	r2, r3
 8005648:	8b3b      	ldrh	r3, [r7, #24]
 800564a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800564e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005656:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800565a:	b29b      	uxth	r3, r3
 800565c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4413      	add	r3, r2
 8005668:	881b      	ldrh	r3, [r3, #0]
 800566a:	b29b      	uxth	r3, r3
 800566c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005674:	82fb      	strh	r3, [r7, #22]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	441a      	add	r2, r3
 8005680:	8afb      	ldrh	r3, [r7, #22]
 8005682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800568a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800568e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005692:	b29b      	uxth	r3, r3
 8005694:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056ac:	82bb      	strh	r3, [r7, #20]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	441a      	add	r2, r3
 80056b8:	8abb      	ldrh	r3, [r7, #20]
 80056ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	8013      	strh	r3, [r2, #0]
 80056ce:	e0a3      	b.n	8005818 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	4413      	add	r3, r2
 80056da:	881b      	ldrh	r3, [r3, #0]
 80056dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80056de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80056e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d01b      	beq.n	8005720 <USB_DeactivateEndpoint+0x2d4>
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	881b      	ldrh	r3, [r3, #0]
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056fe:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	441a      	add	r2, r3
 800570a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800570c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005710:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005714:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800571c:	b29b      	uxth	r3, r3
 800571e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	881b      	ldrh	r3, [r3, #0]
 800572c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800572e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005734:	2b00      	cmp	r3, #0
 8005736:	d01b      	beq.n	8005770 <USB_DeactivateEndpoint+0x324>
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	881b      	ldrh	r3, [r3, #0]
 8005744:	b29b      	uxth	r3, r3
 8005746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800574a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574e:	853b      	strh	r3, [r7, #40]	; 0x28
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	441a      	add	r2, r3
 800575a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800575c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005760:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005764:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005768:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800576c:	b29b      	uxth	r3, r3
 800576e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	b29b      	uxth	r3, r3
 800577e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005786:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	441a      	add	r2, r3
 8005792:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005794:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005798:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800579c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4413      	add	r3, r2
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057be:	84bb      	strh	r3, [r7, #36]	; 0x24
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	441a      	add	r2, r3
 80057ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057dc:	b29b      	uxth	r3, r3
 80057de:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f6:	847b      	strh	r3, [r7, #34]	; 0x22
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	441a      	add	r2, r3
 8005802:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800580c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005814:	b29b      	uxth	r3, r3
 8005816:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3734      	adds	r7, #52	; 0x34
 800581e:	46bd      	mov	sp, r7
 8005820:	bc80      	pop	{r7}
 8005822:	4770      	bx	lr

08005824 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b0c2      	sub	sp, #264	; 0x108
 8005828:	af00      	add	r7, sp, #0
 800582a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800582e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005832:	6018      	str	r0, [r3, #0]
 8005834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005838:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800583c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800583e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	785b      	ldrb	r3, [r3, #1]
 800584a:	2b01      	cmp	r3, #1
 800584c:	f040 86b7 	bne.w	80065be <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005854:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	699a      	ldr	r2, [r3, #24]
 800585c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	429a      	cmp	r2, r3
 800586a:	d908      	bls.n	800587e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800586c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005870:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800587c:	e007      	b.n	800588e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800587e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005882:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800588e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	7b1b      	ldrb	r3, [r3, #12]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d13a      	bne.n	8005914 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800589e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6959      	ldr	r1, [r3, #20]
 80058aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	88da      	ldrh	r2, [r3, #6]
 80058b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80058c0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80058c4:	6800      	ldr	r0, [r0, #0]
 80058c6:	f001 fc9c 	bl	8007202 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80058ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	613b      	str	r3, [r7, #16]
 80058d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	461a      	mov	r2, r3
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	4413      	add	r3, r2
 80058ec:	613b      	str	r3, [r7, #16]
 80058ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	011a      	lsls	r2, r3, #4
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	4413      	add	r3, r2
 8005900:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005904:	60fb      	str	r3, [r7, #12]
 8005906:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800590a:	b29a      	uxth	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	801a      	strh	r2, [r3, #0]
 8005910:	f000 be1f 	b.w	8006552 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005918:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	78db      	ldrb	r3, [r3, #3]
 8005920:	2b02      	cmp	r3, #2
 8005922:	f040 8462 	bne.w	80061ea <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800592a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6a1a      	ldr	r2, [r3, #32]
 8005932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005936:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	429a      	cmp	r2, r3
 8005940:	f240 83df 	bls.w	8006102 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005948:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005952:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	881b      	ldrh	r3, [r3, #0]
 8005960:	b29b      	uxth	r3, r3
 8005962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800596e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005972:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800597c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	441a      	add	r2, r3
 8005988:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800598c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005990:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005994:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800599c:	b29b      	uxth	r3, r3
 800599e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80059a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6a1a      	ldr	r2, [r3, #32]
 80059ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059b0:	1ad2      	subs	r2, r2, r3
 80059b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80059be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4413      	add	r3, r2
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	b29b      	uxth	r3, r3
 80059dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f000 81c7 	beq.w	8005d74 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80059e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	633b      	str	r3, [r7, #48]	; 0x30
 80059f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	785b      	ldrb	r3, [r3, #1]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d177      	bne.n	8005af2 <USB_EPStartXfer+0x2ce>
 8005a02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	461a      	mov	r2, r3
 8005a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a22:	4413      	add	r3, r2
 8005a24:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	011a      	lsls	r2, r3, #4
 8005a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a36:	4413      	add	r3, r2
 8005a38:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a40:	881b      	ldrh	r3, [r3, #0]
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	801a      	strh	r2, [r3, #0]
 8005a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a52:	2b3e      	cmp	r3, #62	; 0x3e
 8005a54:	d921      	bls.n	8005a9a <USB_EPStartXfer+0x276>
 8005a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a5a:	095b      	lsrs	r3, r3, #5
 8005a5c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a64:	f003 031f 	and.w	r3, r3, #31
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d104      	bne.n	8005a76 <USB_EPStartXfer+0x252>
 8005a6c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a70:	3b01      	subs	r3, #1
 8005a72:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	881b      	ldrh	r3, [r3, #0]
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	029b      	lsls	r3, r3, #10
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	4313      	orrs	r3, r2
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a96:	801a      	strh	r2, [r3, #0]
 8005a98:	e050      	b.n	8005b3c <USB_EPStartXfer+0x318>
 8005a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10a      	bne.n	8005ab8 <USB_EPStartXfer+0x294>
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa4:	881b      	ldrh	r3, [r3, #0]
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	801a      	strh	r2, [r3, #0]
 8005ab6:	e041      	b.n	8005b3c <USB_EPStartXfer+0x318>
 8005ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005abc:	085b      	lsrs	r3, r3, #1
 8005abe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d004      	beq.n	8005ad8 <USB_EPStartXfer+0x2b4>
 8005ace:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	881b      	ldrh	r3, [r3, #0]
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	029b      	lsls	r3, r3, #10
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aee:	801a      	strh	r2, [r3, #0]
 8005af0:	e024      	b.n	8005b3c <USB_EPStartXfer+0x318>
 8005af2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005af6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	785b      	ldrb	r3, [r3, #1]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d11c      	bne.n	8005b3c <USB_EPStartXfer+0x318>
 8005b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	461a      	mov	r2, r3
 8005b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b16:	4413      	add	r3, r2
 8005b18:	633b      	str	r3, [r7, #48]	; 0x30
 8005b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	011a      	lsls	r2, r3, #4
 8005b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	895b      	ldrh	r3, [r3, #10]
 8005b48:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	6959      	ldr	r1, [r3, #20]
 8005b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005b62:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005b66:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005b6a:	6800      	ldr	r0, [r0, #0]
 8005b6c:	f001 fb49 	bl	8007202 <USB_WritePMA>
            ep->xfer_buff += len;
 8005b70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	695a      	ldr	r2, [r3, #20]
 8005b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b80:	441a      	add	r2, r3
 8005b82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005b8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6a1a      	ldr	r2, [r3, #32]
 8005b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d90f      	bls.n	8005bca <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6a1a      	ldr	r2, [r3, #32]
 8005bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bba:	1ad2      	subs	r2, r2, r3
 8005bbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	621a      	str	r2, [r3, #32]
 8005bc8:	e00e      	b.n	8005be8 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2200      	movs	r2, #0
 8005be6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	785b      	ldrb	r3, [r3, #1]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d177      	bne.n	8005ce8 <USB_EPStartXfer+0x4c4>
 8005bf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	61bb      	str	r3, [r7, #24]
 8005c04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	461a      	mov	r2, r3
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	4413      	add	r3, r2
 8005c1a:	61bb      	str	r3, [r7, #24]
 8005c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	011a      	lsls	r2, r3, #4
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c32:	617b      	str	r3, [r7, #20]
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	801a      	strh	r2, [r3, #0]
 8005c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c48:	2b3e      	cmp	r3, #62	; 0x3e
 8005c4a:	d921      	bls.n	8005c90 <USB_EPStartXfer+0x46c>
 8005c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c50:	095b      	lsrs	r3, r3, #5
 8005c52:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c5a:	f003 031f 	and.w	r3, r3, #31
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d104      	bne.n	8005c6c <USB_EPStartXfer+0x448>
 8005c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c66:	3b01      	subs	r3, #1
 8005c68:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	881b      	ldrh	r3, [r3, #0]
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	029b      	lsls	r3, r3, #10
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	801a      	strh	r2, [r3, #0]
 8005c8e:	e056      	b.n	8005d3e <USB_EPStartXfer+0x51a>
 8005c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d10a      	bne.n	8005cae <USB_EPStartXfer+0x48a>
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	881b      	ldrh	r3, [r3, #0]
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	801a      	strh	r2, [r3, #0]
 8005cac:	e047      	b.n	8005d3e <USB_EPStartXfer+0x51a>
 8005cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cb2:	085b      	lsrs	r3, r3, #1
 8005cb4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cbc:	f003 0301 	and.w	r3, r3, #1
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d004      	beq.n	8005cce <USB_EPStartXfer+0x4aa>
 8005cc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cc8:	3301      	adds	r3, #1
 8005cca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	029b      	lsls	r3, r3, #10
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	801a      	strh	r2, [r3, #0]
 8005ce6:	e02a      	b.n	8005d3e <USB_EPStartXfer+0x51a>
 8005ce8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	785b      	ldrb	r3, [r3, #1]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d122      	bne.n	8005d3e <USB_EPStartXfer+0x51a>
 8005cf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	623b      	str	r3, [r7, #32]
 8005d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	461a      	mov	r2, r3
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	4413      	add	r3, r2
 8005d1a:	623b      	str	r3, [r7, #32]
 8005d1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	011a      	lsls	r2, r3, #4
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d32:	61fb      	str	r3, [r7, #28]
 8005d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	891b      	ldrh	r3, [r3, #8]
 8005d4a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6959      	ldr	r1, [r3, #20]
 8005d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005d64:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005d68:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005d6c:	6800      	ldr	r0, [r0, #0]
 8005d6e:	f001 fa48 	bl	8007202 <USB_WritePMA>
 8005d72:	e3ee      	b.n	8006552 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	785b      	ldrb	r3, [r3, #1]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d177      	bne.n	8005e74 <USB_EPStartXfer+0x650>
 8005d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	461a      	mov	r2, r3
 8005da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005da4:	4413      	add	r3, r2
 8005da6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005da8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	011a      	lsls	r2, r3, #4
 8005db6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005db8:	4413      	add	r3, r2
 8005dba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dbe:	647b      	str	r3, [r7, #68]	; 0x44
 8005dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dc2:	881b      	ldrh	r3, [r3, #0]
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dce:	801a      	strh	r2, [r3, #0]
 8005dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dd4:	2b3e      	cmp	r3, #62	; 0x3e
 8005dd6:	d921      	bls.n	8005e1c <USB_EPStartXfer+0x5f8>
 8005dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ddc:	095b      	lsrs	r3, r3, #5
 8005dde:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005de6:	f003 031f 	and.w	r3, r3, #31
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d104      	bne.n	8005df8 <USB_EPStartXfer+0x5d4>
 8005dee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005df2:	3b01      	subs	r3, #1
 8005df4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	029b      	lsls	r3, r3, #10
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e18:	801a      	strh	r2, [r3, #0]
 8005e1a:	e056      	b.n	8005eca <USB_EPStartXfer+0x6a6>
 8005e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10a      	bne.n	8005e3a <USB_EPStartXfer+0x616>
 8005e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e26:	881b      	ldrh	r3, [r3, #0]
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e36:	801a      	strh	r2, [r3, #0]
 8005e38:	e047      	b.n	8005eca <USB_EPStartXfer+0x6a6>
 8005e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e3e:	085b      	lsrs	r3, r3, #1
 8005e40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d004      	beq.n	8005e5a <USB_EPStartXfer+0x636>
 8005e50:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e54:	3301      	adds	r3, #1
 8005e56:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e5c:	881b      	ldrh	r3, [r3, #0]
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	029b      	lsls	r3, r3, #10
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e70:	801a      	strh	r2, [r3, #0]
 8005e72:	e02a      	b.n	8005eca <USB_EPStartXfer+0x6a6>
 8005e74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	785b      	ldrb	r3, [r3, #1]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d122      	bne.n	8005eca <USB_EPStartXfer+0x6a6>
 8005e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	653b      	str	r3, [r7, #80]	; 0x50
 8005e90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ea4:	4413      	add	r3, r2
 8005ea6:	653b      	str	r3, [r7, #80]	; 0x50
 8005ea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	011a      	lsls	r2, r3, #4
 8005eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eb8:	4413      	add	r3, r2
 8005eba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ec8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	891b      	ldrh	r3, [r3, #8]
 8005ed6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6959      	ldr	r1, [r3, #20]
 8005ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005ef0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005ef4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005ef8:	6800      	ldr	r0, [r0, #0]
 8005efa:	f001 f982 	bl	8007202 <USB_WritePMA>
            ep->xfer_buff += len;
 8005efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	695a      	ldr	r2, [r3, #20]
 8005f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f0e:	441a      	add	r2, r3
 8005f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6a1a      	ldr	r2, [r3, #32]
 8005f28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d90f      	bls.n	8005f58 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	6a1a      	ldr	r2, [r3, #32]
 8005f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f48:	1ad2      	subs	r2, r2, r3
 8005f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	621a      	str	r2, [r3, #32]
 8005f56:	e00e      	b.n	8005f76 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2200      	movs	r2, #0
 8005f74:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	643b      	str	r3, [r7, #64]	; 0x40
 8005f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	785b      	ldrb	r3, [r3, #1]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d177      	bne.n	8006082 <USB_EPStartXfer+0x85e>
 8005f92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	461a      	mov	r2, r3
 8005fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb2:	4413      	add	r3, r2
 8005fb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	011a      	lsls	r2, r3, #4
 8005fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8005fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fdc:	801a      	strh	r2, [r3, #0]
 8005fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fe2:	2b3e      	cmp	r3, #62	; 0x3e
 8005fe4:	d921      	bls.n	800602a <USB_EPStartXfer+0x806>
 8005fe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fea:	095b      	lsrs	r3, r3, #5
 8005fec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ff4:	f003 031f 	and.w	r3, r3, #31
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d104      	bne.n	8006006 <USB_EPStartXfer+0x7e2>
 8005ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006000:	3b01      	subs	r3, #1
 8006002:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	b29a      	uxth	r2, r3
 800600c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006010:	b29b      	uxth	r3, r3
 8006012:	029b      	lsls	r3, r3, #10
 8006014:	b29b      	uxth	r3, r3
 8006016:	4313      	orrs	r3, r2
 8006018:	b29b      	uxth	r3, r3
 800601a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800601e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006022:	b29a      	uxth	r2, r3
 8006024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006026:	801a      	strh	r2, [r3, #0]
 8006028:	e050      	b.n	80060cc <USB_EPStartXfer+0x8a8>
 800602a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10a      	bne.n	8006048 <USB_EPStartXfer+0x824>
 8006032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006034:	881b      	ldrh	r3, [r3, #0]
 8006036:	b29b      	uxth	r3, r3
 8006038:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800603c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006040:	b29a      	uxth	r2, r3
 8006042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006044:	801a      	strh	r2, [r3, #0]
 8006046:	e041      	b.n	80060cc <USB_EPStartXfer+0x8a8>
 8006048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800604c:	085b      	lsrs	r3, r3, #1
 800604e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	d004      	beq.n	8006068 <USB_EPStartXfer+0x844>
 800605e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006062:	3301      	adds	r3, #1
 8006064:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800606a:	881b      	ldrh	r3, [r3, #0]
 800606c:	b29a      	uxth	r2, r3
 800606e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006072:	b29b      	uxth	r3, r3
 8006074:	029b      	lsls	r3, r3, #10
 8006076:	b29b      	uxth	r3, r3
 8006078:	4313      	orrs	r3, r2
 800607a:	b29a      	uxth	r2, r3
 800607c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800607e:	801a      	strh	r2, [r3, #0]
 8006080:	e024      	b.n	80060cc <USB_EPStartXfer+0x8a8>
 8006082:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006086:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	785b      	ldrb	r3, [r3, #1]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d11c      	bne.n	80060cc <USB_EPStartXfer+0x8a8>
 8006092:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006096:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	461a      	mov	r2, r3
 80060a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060a6:	4413      	add	r3, r2
 80060a8:	643b      	str	r3, [r7, #64]	; 0x40
 80060aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	011a      	lsls	r2, r3, #4
 80060b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060ba:	4413      	add	r3, r2
 80060bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80060cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	895b      	ldrh	r3, [r3, #10]
 80060d8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6959      	ldr	r1, [r3, #20]
 80060e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80060f2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80060f6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80060fa:	6800      	ldr	r0, [r0, #0]
 80060fc:	f001 f881 	bl	8007202 <USB_WritePMA>
 8006100:	e227      	b.n	8006552 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006106:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006116:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006120:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	4413      	add	r3, r2
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	b29b      	uxth	r3, r3
 8006130:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006138:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800613c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006140:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800614a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	441a      	add	r2, r3
 8006156:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800615a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800615e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800616a:	b29b      	uxth	r3, r3
 800616c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800616e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006172:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	65fb      	str	r3, [r7, #92]	; 0x5c
 800617a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800617e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006188:	b29b      	uxth	r3, r3
 800618a:	461a      	mov	r2, r3
 800618c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800618e:	4413      	add	r3, r2
 8006190:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006196:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	011a      	lsls	r2, r3, #4
 80061a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061a2:	4413      	add	r3, r2
 80061a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80061aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061b2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80061b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	891b      	ldrh	r3, [r3, #8]
 80061c0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	6959      	ldr	r1, [r3, #20]
 80061d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80061da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80061de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80061e2:	6800      	ldr	r0, [r0, #0]
 80061e4:	f001 f80d 	bl	8007202 <USB_WritePMA>
 80061e8:	e1b3      	b.n	8006552 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80061ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6a1a      	ldr	r2, [r3, #32]
 80061f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061fa:	1ad2      	subs	r2, r2, r3
 80061fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006200:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800620c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006216:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	881b      	ldrh	r3, [r3, #0]
 8006224:	b29b      	uxth	r3, r3
 8006226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800622a:	2b00      	cmp	r3, #0
 800622c:	f000 80c6 	beq.w	80063bc <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006234:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	673b      	str	r3, [r7, #112]	; 0x70
 800623c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006240:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	785b      	ldrb	r3, [r3, #1]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d177      	bne.n	800633c <USB_EPStartXfer+0xb18>
 800624c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006250:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	66bb      	str	r3, [r7, #104]	; 0x68
 8006258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800625c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006266:	b29b      	uxth	r3, r3
 8006268:	461a      	mov	r2, r3
 800626a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800626c:	4413      	add	r3, r2
 800626e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006274:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	011a      	lsls	r2, r3, #4
 800627e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006280:	4413      	add	r3, r2
 8006282:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006286:	667b      	str	r3, [r7, #100]	; 0x64
 8006288:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800628a:	881b      	ldrh	r3, [r3, #0]
 800628c:	b29b      	uxth	r3, r3
 800628e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006292:	b29a      	uxth	r2, r3
 8006294:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006296:	801a      	strh	r2, [r3, #0]
 8006298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800629c:	2b3e      	cmp	r3, #62	; 0x3e
 800629e:	d921      	bls.n	80062e4 <USB_EPStartXfer+0xac0>
 80062a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062a4:	095b      	lsrs	r3, r3, #5
 80062a6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80062aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062ae:	f003 031f 	and.w	r3, r3, #31
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d104      	bne.n	80062c0 <USB_EPStartXfer+0xa9c>
 80062b6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80062ba:	3b01      	subs	r3, #1
 80062bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80062c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062c2:	881b      	ldrh	r3, [r3, #0]
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	029b      	lsls	r3, r3, #10
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	4313      	orrs	r3, r2
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062dc:	b29a      	uxth	r2, r3
 80062de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062e0:	801a      	strh	r2, [r3, #0]
 80062e2:	e050      	b.n	8006386 <USB_EPStartXfer+0xb62>
 80062e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10a      	bne.n	8006302 <USB_EPStartXfer+0xade>
 80062ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062ee:	881b      	ldrh	r3, [r3, #0]
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062fe:	801a      	strh	r2, [r3, #0]
 8006300:	e041      	b.n	8006386 <USB_EPStartXfer+0xb62>
 8006302:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006306:	085b      	lsrs	r3, r3, #1
 8006308:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800630c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	2b00      	cmp	r3, #0
 8006316:	d004      	beq.n	8006322 <USB_EPStartXfer+0xafe>
 8006318:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800631c:	3301      	adds	r3, #1
 800631e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006322:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006324:	881b      	ldrh	r3, [r3, #0]
 8006326:	b29a      	uxth	r2, r3
 8006328:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800632c:	b29b      	uxth	r3, r3
 800632e:	029b      	lsls	r3, r3, #10
 8006330:	b29b      	uxth	r3, r3
 8006332:	4313      	orrs	r3, r2
 8006334:	b29a      	uxth	r2, r3
 8006336:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006338:	801a      	strh	r2, [r3, #0]
 800633a:	e024      	b.n	8006386 <USB_EPStartXfer+0xb62>
 800633c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	785b      	ldrb	r3, [r3, #1]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d11c      	bne.n	8006386 <USB_EPStartXfer+0xb62>
 800634c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006350:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800635a:	b29b      	uxth	r3, r3
 800635c:	461a      	mov	r2, r3
 800635e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006360:	4413      	add	r3, r2
 8006362:	673b      	str	r3, [r7, #112]	; 0x70
 8006364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006368:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	011a      	lsls	r2, r3, #4
 8006372:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006374:	4413      	add	r3, r2
 8006376:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800637a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800637c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006380:	b29a      	uxth	r2, r3
 8006382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006384:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800638a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	895b      	ldrh	r3, [r3, #10]
 8006392:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800639a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6959      	ldr	r1, [r3, #20]
 80063a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80063ac:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80063b0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80063b4:	6800      	ldr	r0, [r0, #0]
 80063b6:	f000 ff24 	bl	8007202 <USB_WritePMA>
 80063ba:	e0ca      	b.n	8006552 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80063bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	785b      	ldrb	r3, [r3, #1]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d177      	bne.n	80064bc <USB_EPStartXfer+0xc98>
 80063cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80063d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	461a      	mov	r2, r3
 80063ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80063ec:	4413      	add	r3, r2
 80063ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80063f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	011a      	lsls	r2, r3, #4
 80063fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006400:	4413      	add	r3, r2
 8006402:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006406:	67bb      	str	r3, [r7, #120]	; 0x78
 8006408:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800640a:	881b      	ldrh	r3, [r3, #0]
 800640c:	b29b      	uxth	r3, r3
 800640e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006412:	b29a      	uxth	r2, r3
 8006414:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006416:	801a      	strh	r2, [r3, #0]
 8006418:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800641c:	2b3e      	cmp	r3, #62	; 0x3e
 800641e:	d921      	bls.n	8006464 <USB_EPStartXfer+0xc40>
 8006420:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006424:	095b      	lsrs	r3, r3, #5
 8006426:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800642a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800642e:	f003 031f 	and.w	r3, r3, #31
 8006432:	2b00      	cmp	r3, #0
 8006434:	d104      	bne.n	8006440 <USB_EPStartXfer+0xc1c>
 8006436:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800643a:	3b01      	subs	r3, #1
 800643c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006440:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006442:	881b      	ldrh	r3, [r3, #0]
 8006444:	b29a      	uxth	r2, r3
 8006446:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800644a:	b29b      	uxth	r3, r3
 800644c:	029b      	lsls	r3, r3, #10
 800644e:	b29b      	uxth	r3, r3
 8006450:	4313      	orrs	r3, r2
 8006452:	b29b      	uxth	r3, r3
 8006454:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006458:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800645c:	b29a      	uxth	r2, r3
 800645e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006460:	801a      	strh	r2, [r3, #0]
 8006462:	e05c      	b.n	800651e <USB_EPStartXfer+0xcfa>
 8006464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006468:	2b00      	cmp	r3, #0
 800646a:	d10a      	bne.n	8006482 <USB_EPStartXfer+0xc5e>
 800646c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800646e:	881b      	ldrh	r3, [r3, #0]
 8006470:	b29b      	uxth	r3, r3
 8006472:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006476:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800647a:	b29a      	uxth	r2, r3
 800647c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800647e:	801a      	strh	r2, [r3, #0]
 8006480:	e04d      	b.n	800651e <USB_EPStartXfer+0xcfa>
 8006482:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006486:	085b      	lsrs	r3, r3, #1
 8006488:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800648c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006490:	f003 0301 	and.w	r3, r3, #1
 8006494:	2b00      	cmp	r3, #0
 8006496:	d004      	beq.n	80064a2 <USB_EPStartXfer+0xc7e>
 8006498:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800649c:	3301      	adds	r3, #1
 800649e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80064a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064a4:	881b      	ldrh	r3, [r3, #0]
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	029b      	lsls	r3, r3, #10
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	4313      	orrs	r3, r2
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064b8:	801a      	strh	r2, [r3, #0]
 80064ba:	e030      	b.n	800651e <USB_EPStartXfer+0xcfa>
 80064bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	785b      	ldrb	r3, [r3, #1]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d128      	bne.n	800651e <USB_EPStartXfer+0xcfa>
 80064cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	461a      	mov	r2, r3
 80064ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064f0:	4413      	add	r3, r2
 80064f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	011a      	lsls	r2, r3, #4
 8006504:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006508:	4413      	add	r3, r2
 800650a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800650e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006516:	b29a      	uxth	r2, r3
 8006518:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800651c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800651e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006522:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	891b      	ldrh	r3, [r3, #8]
 800652a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800652e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006532:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6959      	ldr	r1, [r3, #20]
 800653a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800653e:	b29b      	uxth	r3, r3
 8006540:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006544:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006548:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800654c:	6800      	ldr	r0, [r0, #0]
 800654e:	f000 fe58 	bl	8007202 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006556:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006560:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4413      	add	r3, r2
 800656c:	881b      	ldrh	r3, [r3, #0]
 800656e:	b29b      	uxth	r3, r3
 8006570:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006574:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006578:	817b      	strh	r3, [r7, #10]
 800657a:	897b      	ldrh	r3, [r7, #10]
 800657c:	f083 0310 	eor.w	r3, r3, #16
 8006580:	817b      	strh	r3, [r7, #10]
 8006582:	897b      	ldrh	r3, [r7, #10]
 8006584:	f083 0320 	eor.w	r3, r3, #32
 8006588:	817b      	strh	r3, [r7, #10]
 800658a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800658e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006598:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	441a      	add	r2, r3
 80065a4:	897b      	ldrh	r3, [r7, #10]
 80065a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	8013      	strh	r3, [r2, #0]
 80065ba:	f000 bcde 	b.w	8006f7a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80065be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	7b1b      	ldrb	r3, [r3, #12]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f040 80bb 	bne.w	8006746 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80065d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	699a      	ldr	r2, [r3, #24]
 80065dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d917      	bls.n	800661c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80065ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80065fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006600:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	699a      	ldr	r2, [r3, #24]
 8006608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800660c:	1ad2      	subs	r2, r2, r3
 800660e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	619a      	str	r2, [r3, #24]
 800661a:	e00e      	b.n	800663a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800661c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800662c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2200      	movs	r2, #0
 8006638:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800663a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800663e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800664c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006656:	b29b      	uxth	r3, r3
 8006658:	461a      	mov	r2, r3
 800665a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800665e:	4413      	add	r3, r2
 8006660:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006668:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	011a      	lsls	r2, r3, #4
 8006672:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006676:	4413      	add	r3, r2
 8006678:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800667c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006680:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006684:	881b      	ldrh	r3, [r3, #0]
 8006686:	b29b      	uxth	r3, r3
 8006688:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800668c:	b29a      	uxth	r2, r3
 800668e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006692:	801a      	strh	r2, [r3, #0]
 8006694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006698:	2b3e      	cmp	r3, #62	; 0x3e
 800669a:	d924      	bls.n	80066e6 <USB_EPStartXfer+0xec2>
 800669c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066a0:	095b      	lsrs	r3, r3, #5
 80066a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80066a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066aa:	f003 031f 	and.w	r3, r3, #31
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d104      	bne.n	80066bc <USB_EPStartXfer+0xe98>
 80066b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066b6:	3b01      	subs	r3, #1
 80066b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80066bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066c0:	881b      	ldrh	r3, [r3, #0]
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	029b      	lsls	r3, r3, #10
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	4313      	orrs	r3, r2
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066da:	b29a      	uxth	r2, r3
 80066dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066e0:	801a      	strh	r2, [r3, #0]
 80066e2:	f000 bc10 	b.w	8006f06 <USB_EPStartXfer+0x16e2>
 80066e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d10c      	bne.n	8006708 <USB_EPStartXfer+0xee4>
 80066ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066f2:	881b      	ldrh	r3, [r3, #0]
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066fe:	b29a      	uxth	r2, r3
 8006700:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006704:	801a      	strh	r2, [r3, #0]
 8006706:	e3fe      	b.n	8006f06 <USB_EPStartXfer+0x16e2>
 8006708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800670c:	085b      	lsrs	r3, r3, #1
 800670e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006712:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b00      	cmp	r3, #0
 800671c:	d004      	beq.n	8006728 <USB_EPStartXfer+0xf04>
 800671e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006722:	3301      	adds	r3, #1
 8006724:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006728:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800672c:	881b      	ldrh	r3, [r3, #0]
 800672e:	b29a      	uxth	r2, r3
 8006730:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006734:	b29b      	uxth	r3, r3
 8006736:	029b      	lsls	r3, r3, #10
 8006738:	b29b      	uxth	r3, r3
 800673a:	4313      	orrs	r3, r2
 800673c:	b29a      	uxth	r2, r3
 800673e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006742:	801a      	strh	r2, [r3, #0]
 8006744:	e3df      	b.n	8006f06 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800674a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	78db      	ldrb	r3, [r3, #3]
 8006752:	2b02      	cmp	r3, #2
 8006754:	f040 8218 	bne.w	8006b88 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800675c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	785b      	ldrb	r3, [r3, #1]
 8006764:	2b00      	cmp	r3, #0
 8006766:	f040 809d 	bne.w	80068a4 <USB_EPStartXfer+0x1080>
 800676a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800676e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800677c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006786:	b29b      	uxth	r3, r3
 8006788:	461a      	mov	r2, r3
 800678a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800678e:	4413      	add	r3, r2
 8006790:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006794:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006798:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	011a      	lsls	r2, r3, #4
 80067a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067a6:	4413      	add	r3, r2
 80067a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80067b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80067b4:	881b      	ldrh	r3, [r3, #0]
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067bc:	b29a      	uxth	r2, r3
 80067be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80067c2:	801a      	strh	r2, [r3, #0]
 80067c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	2b3e      	cmp	r3, #62	; 0x3e
 80067d2:	d92b      	bls.n	800682c <USB_EPStartXfer+0x1008>
 80067d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	095b      	lsrs	r3, r3, #5
 80067e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80067e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	f003 031f 	and.w	r3, r3, #31
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d104      	bne.n	8006804 <USB_EPStartXfer+0xfe0>
 80067fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067fe:	3b01      	subs	r3, #1
 8006800:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006804:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006808:	881b      	ldrh	r3, [r3, #0]
 800680a:	b29a      	uxth	r2, r3
 800680c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006810:	b29b      	uxth	r3, r3
 8006812:	029b      	lsls	r3, r3, #10
 8006814:	b29b      	uxth	r3, r3
 8006816:	4313      	orrs	r3, r2
 8006818:	b29b      	uxth	r3, r3
 800681a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800681e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006822:	b29a      	uxth	r2, r3
 8006824:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006828:	801a      	strh	r2, [r3, #0]
 800682a:	e070      	b.n	800690e <USB_EPStartXfer+0x10ea>
 800682c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10c      	bne.n	8006856 <USB_EPStartXfer+0x1032>
 800683c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006840:	881b      	ldrh	r3, [r3, #0]
 8006842:	b29b      	uxth	r3, r3
 8006844:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006848:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800684c:	b29a      	uxth	r2, r3
 800684e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006852:	801a      	strh	r2, [r3, #0]
 8006854:	e05b      	b.n	800690e <USB_EPStartXfer+0x10ea>
 8006856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800685a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	085b      	lsrs	r3, r3, #1
 8006864:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800686c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	f003 0301 	and.w	r3, r3, #1
 8006878:	2b00      	cmp	r3, #0
 800687a:	d004      	beq.n	8006886 <USB_EPStartXfer+0x1062>
 800687c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006880:	3301      	adds	r3, #1
 8006882:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006886:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800688a:	881b      	ldrh	r3, [r3, #0]
 800688c:	b29a      	uxth	r2, r3
 800688e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006892:	b29b      	uxth	r3, r3
 8006894:	029b      	lsls	r3, r3, #10
 8006896:	b29b      	uxth	r3, r3
 8006898:	4313      	orrs	r3, r2
 800689a:	b29a      	uxth	r2, r3
 800689c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068a0:	801a      	strh	r2, [r3, #0]
 80068a2:	e034      	b.n	800690e <USB_EPStartXfer+0x10ea>
 80068a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	785b      	ldrb	r3, [r3, #1]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d12c      	bne.n	800690e <USB_EPStartXfer+0x10ea>
 80068b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	461a      	mov	r2, r3
 80068d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80068d8:	4413      	add	r3, r2
 80068da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	011a      	lsls	r2, r3, #4
 80068ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80068f0:	4413      	add	r3, r2
 80068f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	b29a      	uxth	r2, r3
 8006908:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800690c:	801a      	strh	r2, [r3, #0]
 800690e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006912:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800691c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006920:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	785b      	ldrb	r3, [r3, #1]
 8006928:	2b00      	cmp	r3, #0
 800692a:	f040 809d 	bne.w	8006a68 <USB_EPStartXfer+0x1244>
 800692e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006932:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800693c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006940:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800694a:	b29b      	uxth	r3, r3
 800694c:	461a      	mov	r2, r3
 800694e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006952:	4413      	add	r3, r2
 8006954:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800695c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	011a      	lsls	r2, r3, #4
 8006966:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800696a:	4413      	add	r3, r2
 800696c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006970:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006974:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	b29b      	uxth	r3, r3
 800697c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006980:	b29a      	uxth	r2, r3
 8006982:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006986:	801a      	strh	r2, [r3, #0]
 8006988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800698c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	2b3e      	cmp	r3, #62	; 0x3e
 8006996:	d92b      	bls.n	80069f0 <USB_EPStartXfer+0x11cc>
 8006998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800699c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	095b      	lsrs	r3, r3, #5
 80069a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80069aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	f003 031f 	and.w	r3, r3, #31
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d104      	bne.n	80069c8 <USB_EPStartXfer+0x11a4>
 80069be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069c2:	3b01      	subs	r3, #1
 80069c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80069c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069cc:	881b      	ldrh	r3, [r3, #0]
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	029b      	lsls	r3, r3, #10
 80069d8:	b29b      	uxth	r3, r3
 80069da:	4313      	orrs	r3, r2
 80069dc:	b29b      	uxth	r3, r3
 80069de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069ec:	801a      	strh	r2, [r3, #0]
 80069ee:	e069      	b.n	8006ac4 <USB_EPStartXfer+0x12a0>
 80069f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d10c      	bne.n	8006a1a <USB_EPStartXfer+0x11f6>
 8006a00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a04:	881b      	ldrh	r3, [r3, #0]
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a16:	801a      	strh	r2, [r3, #0]
 8006a18:	e054      	b.n	8006ac4 <USB_EPStartXfer+0x12a0>
 8006a1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	085b      	lsrs	r3, r3, #1
 8006a28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	f003 0301 	and.w	r3, r3, #1
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d004      	beq.n	8006a4a <USB_EPStartXfer+0x1226>
 8006a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a44:	3301      	adds	r3, #1
 8006a46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a4e:	881b      	ldrh	r3, [r3, #0]
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	029b      	lsls	r3, r3, #10
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a64:	801a      	strh	r2, [r3, #0]
 8006a66:	e02d      	b.n	8006ac4 <USB_EPStartXfer+0x12a0>
 8006a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	785b      	ldrb	r3, [r3, #1]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d125      	bne.n	8006ac4 <USB_EPStartXfer+0x12a0>
 8006a78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	461a      	mov	r2, r3
 8006a8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006a8e:	4413      	add	r3, r2
 8006a90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006a94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	011a      	lsls	r2, r3, #4
 8006aa2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006aac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ac2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006ac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ac8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	69db      	ldr	r3, [r3, #28]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f000 8218 	beq.w	8006f06 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006ad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ada:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4413      	add	r3, r2
 8006af0:	881b      	ldrh	r3, [r3, #0]
 8006af2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006af6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d005      	beq.n	8006b0e <USB_EPStartXfer+0x12ea>
 8006b02:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10d      	bne.n	8006b2a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006b0e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	f040 81f5 	bne.w	8006f06 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006b1c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f040 81ee 	bne.w	8006f06 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006b2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	881b      	ldrh	r3, [r3, #0]
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b50:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006b54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	441a      	add	r2, r3
 8006b6e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006b72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	8013      	strh	r3, [r2, #0]
 8006b86:	e1be      	b.n	8006f06 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006b88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	78db      	ldrb	r3, [r3, #3]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	f040 81b4 	bne.w	8006f02 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	699a      	ldr	r2, [r3, #24]
 8006ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006baa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d917      	bls.n	8006be6 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006bb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006bc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	699a      	ldr	r2, [r3, #24]
 8006bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bd6:	1ad2      	subs	r2, r2, r3
 8006bd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	619a      	str	r2, [r3, #24]
 8006be4:	e00e      	b.n	8006c04 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2200      	movs	r2, #0
 8006c02:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006c04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	785b      	ldrb	r3, [r3, #1]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f040 8085 	bne.w	8006d20 <USB_EPStartXfer+0x14fc>
 8006c16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	461a      	mov	r2, r3
 8006c36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	011a      	lsls	r2, r3, #4
 8006c4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c52:	4413      	add	r3, r2
 8006c54:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c60:	881b      	ldrh	r3, [r3, #0]
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c6e:	801a      	strh	r2, [r3, #0]
 8006c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c74:	2b3e      	cmp	r3, #62	; 0x3e
 8006c76:	d923      	bls.n	8006cc0 <USB_EPStartXfer+0x149c>
 8006c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c7c:	095b      	lsrs	r3, r3, #5
 8006c7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c86:	f003 031f 	and.w	r3, r3, #31
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d104      	bne.n	8006c98 <USB_EPStartXfer+0x1474>
 8006c8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c92:	3b01      	subs	r3, #1
 8006c94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006c98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c9c:	881b      	ldrh	r3, [r3, #0]
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	029b      	lsls	r3, r3, #10
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	4313      	orrs	r3, r2
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cbc:	801a      	strh	r2, [r3, #0]
 8006cbe:	e060      	b.n	8006d82 <USB_EPStartXfer+0x155e>
 8006cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d10c      	bne.n	8006ce2 <USB_EPStartXfer+0x14be>
 8006cc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ccc:	881b      	ldrh	r3, [r3, #0]
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cd8:	b29a      	uxth	r2, r3
 8006cda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cde:	801a      	strh	r2, [r3, #0]
 8006ce0:	e04f      	b.n	8006d82 <USB_EPStartXfer+0x155e>
 8006ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce6:	085b      	lsrs	r3, r3, #1
 8006ce8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d004      	beq.n	8006d02 <USB_EPStartXfer+0x14de>
 8006cf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006d02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d06:	881b      	ldrh	r3, [r3, #0]
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	029b      	lsls	r3, r3, #10
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	4313      	orrs	r3, r2
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d1c:	801a      	strh	r2, [r3, #0]
 8006d1e:	e030      	b.n	8006d82 <USB_EPStartXfer+0x155e>
 8006d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	785b      	ldrb	r3, [r3, #1]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d128      	bne.n	8006d82 <USB_EPStartXfer+0x155e>
 8006d30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	461a      	mov	r2, r3
 8006d50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d54:	4413      	add	r3, r2
 8006d56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	011a      	lsls	r2, r3, #4
 8006d68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006d80:	801a      	strh	r2, [r3, #0]
 8006d82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	785b      	ldrb	r3, [r3, #1]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f040 8085 	bne.w	8006eac <USB_EPStartXfer+0x1688>
 8006da2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	011a      	lsls	r2, r3, #4
 8006dda:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006dde:	4413      	add	r3, r2
 8006de0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006de4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006de8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006dec:	881b      	ldrh	r3, [r3, #0]
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006dfa:	801a      	strh	r2, [r3, #0]
 8006dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e00:	2b3e      	cmp	r3, #62	; 0x3e
 8006e02:	d923      	bls.n	8006e4c <USB_EPStartXfer+0x1628>
 8006e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e08:	095b      	lsrs	r3, r3, #5
 8006e0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e12:	f003 031f 	and.w	r3, r3, #31
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d104      	bne.n	8006e24 <USB_EPStartXfer+0x1600>
 8006e1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e28:	881b      	ldrh	r3, [r3, #0]
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	029b      	lsls	r3, r3, #10
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	4313      	orrs	r3, r2
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e48:	801a      	strh	r2, [r3, #0]
 8006e4a:	e05c      	b.n	8006f06 <USB_EPStartXfer+0x16e2>
 8006e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d10c      	bne.n	8006e6e <USB_EPStartXfer+0x164a>
 8006e54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e58:	881b      	ldrh	r3, [r3, #0]
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e6a:	801a      	strh	r2, [r3, #0]
 8006e6c:	e04b      	b.n	8006f06 <USB_EPStartXfer+0x16e2>
 8006e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e72:	085b      	lsrs	r3, r3, #1
 8006e74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e7c:	f003 0301 	and.w	r3, r3, #1
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d004      	beq.n	8006e8e <USB_EPStartXfer+0x166a>
 8006e84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e88:	3301      	adds	r3, #1
 8006e8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e92:	881b      	ldrh	r3, [r3, #0]
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	029b      	lsls	r3, r3, #10
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ea8:	801a      	strh	r2, [r3, #0]
 8006eaa:	e02c      	b.n	8006f06 <USB_EPStartXfer+0x16e2>
 8006eac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	785b      	ldrb	r3, [r3, #1]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d124      	bne.n	8006f06 <USB_EPStartXfer+0x16e2>
 8006ebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ec0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	461a      	mov	r2, r3
 8006ece:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006edc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	011a      	lsls	r2, r3, #4
 8006ee6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006eea:	4413      	add	r3, r2
 8006eec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ef0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006efe:	801a      	strh	r2, [r3, #0]
 8006f00:	e001      	b.n	8006f06 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e03a      	b.n	8006f7c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	4413      	add	r3, r2
 8006f20:	881b      	ldrh	r3, [r3, #0]
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f2c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006f30:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006f34:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f38:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006f3c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006f40:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f44:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	441a      	add	r2, r3
 8006f62:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006f66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f86:	b480      	push	{r7}
 8006f88:	b085      	sub	sp, #20
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
 8006f8e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	785b      	ldrb	r3, [r3, #1]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d020      	beq.n	8006fda <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4413      	add	r3, r2
 8006fa2:	881b      	ldrh	r3, [r3, #0]
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006faa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fae:	81bb      	strh	r3, [r7, #12]
 8006fb0:	89bb      	ldrh	r3, [r7, #12]
 8006fb2:	f083 0310 	eor.w	r3, r3, #16
 8006fb6:	81bb      	strh	r3, [r7, #12]
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	441a      	add	r2, r3
 8006fc2:	89bb      	ldrh	r3, [r7, #12]
 8006fc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	8013      	strh	r3, [r2, #0]
 8006fd8:	e01f      	b.n	800701a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4413      	add	r3, r2
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff0:	81fb      	strh	r3, [r7, #14]
 8006ff2:	89fb      	ldrh	r3, [r7, #14]
 8006ff4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ff8:	81fb      	strh	r3, [r7, #14]
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	441a      	add	r2, r3
 8007004:	89fb      	ldrh	r3, [r7, #14]
 8007006:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800700a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800700e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007016:	b29b      	uxth	r3, r3
 8007018:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3714      	adds	r7, #20
 8007020:	46bd      	mov	sp, r7
 8007022:	bc80      	pop	{r7}
 8007024:	4770      	bx	lr

08007026 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007026:	b480      	push	{r7}
 8007028:	b087      	sub	sp, #28
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
 800702e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	7b1b      	ldrb	r3, [r3, #12]
 8007034:	2b00      	cmp	r3, #0
 8007036:	f040 809d 	bne.w	8007174 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	785b      	ldrb	r3, [r3, #1]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d04c      	beq.n	80070dc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4413      	add	r3, r2
 800704c:	881b      	ldrh	r3, [r3, #0]
 800704e:	823b      	strh	r3, [r7, #16]
 8007050:	8a3b      	ldrh	r3, [r7, #16]
 8007052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007056:	2b00      	cmp	r3, #0
 8007058:	d01b      	beq.n	8007092 <USB_EPClearStall+0x6c>
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	4413      	add	r3, r2
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	b29b      	uxth	r3, r3
 8007068:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800706c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007070:	81fb      	strh	r3, [r7, #14]
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	441a      	add	r2, r3
 800707c:	89fb      	ldrh	r3, [r7, #14]
 800707e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007082:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800708a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800708e:	b29b      	uxth	r3, r3
 8007090:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	78db      	ldrb	r3, [r3, #3]
 8007096:	2b01      	cmp	r3, #1
 8007098:	d06c      	beq.n	8007174 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	4413      	add	r3, r2
 80070a4:	881b      	ldrh	r3, [r3, #0]
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070b0:	81bb      	strh	r3, [r7, #12]
 80070b2:	89bb      	ldrh	r3, [r7, #12]
 80070b4:	f083 0320 	eor.w	r3, r3, #32
 80070b8:	81bb      	strh	r3, [r7, #12]
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	441a      	add	r2, r3
 80070c4:	89bb      	ldrh	r3, [r7, #12]
 80070c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	8013      	strh	r3, [r2, #0]
 80070da:	e04b      	b.n	8007174 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	4413      	add	r3, r2
 80070e6:	881b      	ldrh	r3, [r3, #0]
 80070e8:	82fb      	strh	r3, [r7, #22]
 80070ea:	8afb      	ldrh	r3, [r7, #22]
 80070ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d01b      	beq.n	800712c <USB_EPClearStall+0x106>
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	881b      	ldrh	r3, [r3, #0]
 8007100:	b29b      	uxth	r3, r3
 8007102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800710a:	82bb      	strh	r3, [r7, #20]
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	441a      	add	r2, r3
 8007116:	8abb      	ldrh	r3, [r7, #20]
 8007118:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800711c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007120:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007128:	b29b      	uxth	r3, r3
 800712a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4413      	add	r3, r2
 8007136:	881b      	ldrh	r3, [r3, #0]
 8007138:	b29b      	uxth	r3, r3
 800713a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800713e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007142:	827b      	strh	r3, [r7, #18]
 8007144:	8a7b      	ldrh	r3, [r7, #18]
 8007146:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800714a:	827b      	strh	r3, [r7, #18]
 800714c:	8a7b      	ldrh	r3, [r7, #18]
 800714e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007152:	827b      	strh	r3, [r7, #18]
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	441a      	add	r2, r3
 800715e:	8a7b      	ldrh	r3, [r7, #18]
 8007160:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007164:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007168:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800716c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007170:	b29b      	uxth	r3, r3
 8007172:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	371c      	adds	r7, #28
 800717a:	46bd      	mov	sp, r7
 800717c:	bc80      	pop	{r7}
 800717e:	4770      	bx	lr

08007180 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	460b      	mov	r3, r1
 800718a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800718c:	78fb      	ldrb	r3, [r7, #3]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d103      	bne.n	800719a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2280      	movs	r2, #128	; 0x80
 8007196:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bc80      	pop	{r7}
 80071a4:	4770      	bx	lr

080071a6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80071a6:	b480      	push	{r7}
 80071a8:	b083      	sub	sp, #12
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bc80      	pop	{r7}
 80071b8:	4770      	bx	lr

080071ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80071ba:	b480      	push	{r7}
 80071bc:	b083      	sub	sp, #12
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bc80      	pop	{r7}
 80071cc:	4770      	bx	lr

080071ce <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80071ce:	b480      	push	{r7}
 80071d0:	b085      	sub	sp, #20
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80071dc:	b29b      	uxth	r3, r3
 80071de:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80071e0:	68fb      	ldr	r3, [r7, #12]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3714      	adds	r7, #20
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bc80      	pop	{r7}
 80071ea:	4770      	bx	lr

080071ec <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bc80      	pop	{r7}
 8007200:	4770      	bx	lr

08007202 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007202:	b480      	push	{r7}
 8007204:	b08b      	sub	sp, #44	; 0x2c
 8007206:	af00      	add	r7, sp, #0
 8007208:	60f8      	str	r0, [r7, #12]
 800720a:	60b9      	str	r1, [r7, #8]
 800720c:	4611      	mov	r1, r2
 800720e:	461a      	mov	r2, r3
 8007210:	460b      	mov	r3, r1
 8007212:	80fb      	strh	r3, [r7, #6]
 8007214:	4613      	mov	r3, r2
 8007216:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007218:	88bb      	ldrh	r3, [r7, #4]
 800721a:	3301      	adds	r3, #1
 800721c:	085b      	lsrs	r3, r3, #1
 800721e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007228:	88fb      	ldrh	r3, [r7, #6]
 800722a:	005a      	lsls	r2, r3, #1
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	4413      	add	r3, r2
 8007230:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007234:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	627b      	str	r3, [r7, #36]	; 0x24
 800723a:	e01e      	b.n	800727a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	3301      	adds	r3, #1
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	021b      	lsls	r3, r3, #8
 800724a:	b21a      	sxth	r2, r3
 800724c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007250:	4313      	orrs	r3, r2
 8007252:	b21b      	sxth	r3, r3
 8007254:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007256:	6a3b      	ldr	r3, [r7, #32]
 8007258:	8a7a      	ldrh	r2, [r7, #18]
 800725a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800725c:	6a3b      	ldr	r3, [r7, #32]
 800725e:	3302      	adds	r3, #2
 8007260:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007262:	6a3b      	ldr	r3, [r7, #32]
 8007264:	3302      	adds	r3, #2
 8007266:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	3301      	adds	r3, #1
 800726c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	3301      	adds	r3, #1
 8007272:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007276:	3b01      	subs	r3, #1
 8007278:	627b      	str	r3, [r7, #36]	; 0x24
 800727a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1dd      	bne.n	800723c <USB_WritePMA+0x3a>
  }
}
 8007280:	bf00      	nop
 8007282:	bf00      	nop
 8007284:	372c      	adds	r7, #44	; 0x2c
 8007286:	46bd      	mov	sp, r7
 8007288:	bc80      	pop	{r7}
 800728a:	4770      	bx	lr

0800728c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800728c:	b480      	push	{r7}
 800728e:	b08b      	sub	sp, #44	; 0x2c
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	4611      	mov	r1, r2
 8007298:	461a      	mov	r2, r3
 800729a:	460b      	mov	r3, r1
 800729c:	80fb      	strh	r3, [r7, #6]
 800729e:	4613      	mov	r3, r2
 80072a0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80072a2:	88bb      	ldrh	r3, [r7, #4]
 80072a4:	085b      	lsrs	r3, r3, #1
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80072b2:	88fb      	ldrh	r3, [r7, #6]
 80072b4:	005a      	lsls	r2, r3, #1
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	4413      	add	r3, r2
 80072ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072be:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	627b      	str	r3, [r7, #36]	; 0x24
 80072c4:	e01b      	b.n	80072fe <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80072c6:	6a3b      	ldr	r3, [r7, #32]
 80072c8:	881b      	ldrh	r3, [r3, #0]
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80072ce:	6a3b      	ldr	r3, [r7, #32]
 80072d0:	3302      	adds	r3, #2
 80072d2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	b2da      	uxtb	r2, r3
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	3301      	adds	r3, #1
 80072e0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	0a1b      	lsrs	r3, r3, #8
 80072e6:	b2da      	uxtb	r2, r3
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	3301      	adds	r3, #1
 80072f0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80072f2:	6a3b      	ldr	r3, [r7, #32]
 80072f4:	3302      	adds	r3, #2
 80072f6:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80072f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fa:	3b01      	subs	r3, #1
 80072fc:	627b      	str	r3, [r7, #36]	; 0x24
 80072fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1e0      	bne.n	80072c6 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007304:	88bb      	ldrh	r3, [r7, #4]
 8007306:	f003 0301 	and.w	r3, r3, #1
 800730a:	b29b      	uxth	r3, r3
 800730c:	2b00      	cmp	r3, #0
 800730e:	d007      	beq.n	8007320 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007310:	6a3b      	ldr	r3, [r7, #32]
 8007312:	881b      	ldrh	r3, [r3, #0]
 8007314:	b29b      	uxth	r3, r3
 8007316:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	b2da      	uxtb	r2, r3
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	701a      	strb	r2, [r3, #0]
  }
}
 8007320:	bf00      	nop
 8007322:	372c      	adds	r7, #44	; 0x2c
 8007324:	46bd      	mov	sp, r7
 8007326:	bc80      	pop	{r7}
 8007328:	4770      	bx	lr

0800732a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800732a:	b580      	push	{r7, lr}
 800732c:	b084      	sub	sp, #16
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
 8007332:	460b      	mov	r3, r1
 8007334:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007336:	2300      	movs	r3, #0
 8007338:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	7c1b      	ldrb	r3, [r3, #16]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d115      	bne.n	800736e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007342:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007346:	2202      	movs	r2, #2
 8007348:	2181      	movs	r1, #129	; 0x81
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f001 fee7 	bl	800911e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007356:	f44f 7300 	mov.w	r3, #512	; 0x200
 800735a:	2202      	movs	r2, #2
 800735c:	2101      	movs	r1, #1
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f001 fedd 	bl	800911e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800736c:	e012      	b.n	8007394 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800736e:	2340      	movs	r3, #64	; 0x40
 8007370:	2202      	movs	r2, #2
 8007372:	2181      	movs	r1, #129	; 0x81
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f001 fed2 	bl	800911e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007380:	2340      	movs	r3, #64	; 0x40
 8007382:	2202      	movs	r2, #2
 8007384:	2101      	movs	r1, #1
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f001 fec9 	bl	800911e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007394:	2308      	movs	r3, #8
 8007396:	2203      	movs	r2, #3
 8007398:	2182      	movs	r1, #130	; 0x82
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f001 febf 	bl	800911e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80073a6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80073aa:	f001 ffdf 	bl	800936c <USBD_static_malloc>
 80073ae:	4602      	mov	r2, r0
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d102      	bne.n	80073c6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80073c0:	2301      	movs	r3, #1
 80073c2:	73fb      	strb	r3, [r7, #15]
 80073c4:	e026      	b.n	8007414 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073cc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	2200      	movs	r2, #0
 80073dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	7c1b      	ldrb	r3, [r3, #16]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d109      	bne.n	8007404 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073fa:	2101      	movs	r1, #1
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f001 ff7f 	bl	8009300 <USBD_LL_PrepareReceive>
 8007402:	e007      	b.n	8007414 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800740a:	2340      	movs	r3, #64	; 0x40
 800740c:	2101      	movs	r1, #1
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f001 ff76 	bl	8009300 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007414:	7bfb      	ldrb	r3, [r7, #15]
}
 8007416:	4618      	mov	r0, r3
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b084      	sub	sp, #16
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
 8007426:	460b      	mov	r3, r1
 8007428:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800742a:	2300      	movs	r3, #0
 800742c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800742e:	2181      	movs	r1, #129	; 0x81
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f001 fe9a 	bl	800916a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800743c:	2101      	movs	r1, #1
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f001 fe93 	bl	800916a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800744c:	2182      	movs	r1, #130	; 0x82
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f001 fe8b 	bl	800916a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00e      	beq.n	8007482 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007474:	4618      	mov	r0, r3
 8007476:	f001 ff85 	bl	8009384 <USBD_static_free>
    pdev->pClassData = NULL;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007482:	7bfb      	ldrb	r3, [r7, #15]
}
 8007484:	4618      	mov	r0, r3
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b086      	sub	sp, #24
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800749c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800749e:	2300      	movs	r3, #0
 80074a0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80074a2:	2300      	movs	r3, #0
 80074a4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80074a6:	2300      	movs	r3, #0
 80074a8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d039      	beq.n	800752a <USBD_CDC_Setup+0x9e>
 80074b6:	2b20      	cmp	r3, #32
 80074b8:	d17f      	bne.n	80075ba <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	88db      	ldrh	r3, [r3, #6]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d029      	beq.n	8007516 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	b25b      	sxtb	r3, r3
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	da11      	bge.n	80074f0 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	683a      	ldr	r2, [r7, #0]
 80074d6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80074d8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80074da:	683a      	ldr	r2, [r7, #0]
 80074dc:	88d2      	ldrh	r2, [r2, #6]
 80074de:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80074e0:	6939      	ldr	r1, [r7, #16]
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	88db      	ldrh	r3, [r3, #6]
 80074e6:	461a      	mov	r2, r3
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f001 fa0a 	bl	8008902 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80074ee:	e06b      	b.n	80075c8 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	785a      	ldrb	r2, [r3, #1]
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	88db      	ldrh	r3, [r3, #6]
 80074fe:	b2da      	uxtb	r2, r3
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007506:	6939      	ldr	r1, [r7, #16]
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	88db      	ldrh	r3, [r3, #6]
 800750c:	461a      	mov	r2, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f001 fa25 	bl	800895e <USBD_CtlPrepareRx>
      break;
 8007514:	e058      	b.n	80075c8 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	683a      	ldr	r2, [r7, #0]
 8007520:	7850      	ldrb	r0, [r2, #1]
 8007522:	2200      	movs	r2, #0
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	4798      	blx	r3
      break;
 8007528:	e04e      	b.n	80075c8 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	785b      	ldrb	r3, [r3, #1]
 800752e:	2b0b      	cmp	r3, #11
 8007530:	d02e      	beq.n	8007590 <USBD_CDC_Setup+0x104>
 8007532:	2b0b      	cmp	r3, #11
 8007534:	dc38      	bgt.n	80075a8 <USBD_CDC_Setup+0x11c>
 8007536:	2b00      	cmp	r3, #0
 8007538:	d002      	beq.n	8007540 <USBD_CDC_Setup+0xb4>
 800753a:	2b0a      	cmp	r3, #10
 800753c:	d014      	beq.n	8007568 <USBD_CDC_Setup+0xdc>
 800753e:	e033      	b.n	80075a8 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007546:	2b03      	cmp	r3, #3
 8007548:	d107      	bne.n	800755a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800754a:	f107 030c 	add.w	r3, r7, #12
 800754e:	2202      	movs	r2, #2
 8007550:	4619      	mov	r1, r3
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f001 f9d5 	bl	8008902 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007558:	e02e      	b.n	80075b8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800755a:	6839      	ldr	r1, [r7, #0]
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f001 f966 	bl	800882e <USBD_CtlError>
            ret = USBD_FAIL;
 8007562:	2302      	movs	r3, #2
 8007564:	75fb      	strb	r3, [r7, #23]
          break;
 8007566:	e027      	b.n	80075b8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800756e:	2b03      	cmp	r3, #3
 8007570:	d107      	bne.n	8007582 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007572:	f107 030f 	add.w	r3, r7, #15
 8007576:	2201      	movs	r2, #1
 8007578:	4619      	mov	r1, r3
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f001 f9c1 	bl	8008902 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007580:	e01a      	b.n	80075b8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007582:	6839      	ldr	r1, [r7, #0]
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f001 f952 	bl	800882e <USBD_CtlError>
            ret = USBD_FAIL;
 800758a:	2302      	movs	r3, #2
 800758c:	75fb      	strb	r3, [r7, #23]
          break;
 800758e:	e013      	b.n	80075b8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007596:	2b03      	cmp	r3, #3
 8007598:	d00d      	beq.n	80075b6 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800759a:	6839      	ldr	r1, [r7, #0]
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f001 f946 	bl	800882e <USBD_CtlError>
            ret = USBD_FAIL;
 80075a2:	2302      	movs	r3, #2
 80075a4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80075a6:	e006      	b.n	80075b6 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80075a8:	6839      	ldr	r1, [r7, #0]
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f001 f93f 	bl	800882e <USBD_CtlError>
          ret = USBD_FAIL;
 80075b0:	2302      	movs	r3, #2
 80075b2:	75fb      	strb	r3, [r7, #23]
          break;
 80075b4:	e000      	b.n	80075b8 <USBD_CDC_Setup+0x12c>
          break;
 80075b6:	bf00      	nop
      }
      break;
 80075b8:	e006      	b.n	80075c8 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f001 f936 	bl	800882e <USBD_CtlError>
      ret = USBD_FAIL;
 80075c2:	2302      	movs	r3, #2
 80075c4:	75fb      	strb	r3, [r7, #23]
      break;
 80075c6:	bf00      	nop
  }

  return ret;
 80075c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3718      	adds	r7, #24
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b084      	sub	sp, #16
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
 80075da:	460b      	mov	r3, r1
 80075dc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075e4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075ec:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d03a      	beq.n	800766e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80075f8:	78fa      	ldrb	r2, [r7, #3]
 80075fa:	6879      	ldr	r1, [r7, #4]
 80075fc:	4613      	mov	r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	4413      	add	r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	440b      	add	r3, r1
 8007606:	331c      	adds	r3, #28
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d029      	beq.n	8007662 <USBD_CDC_DataIn+0x90>
 800760e:	78fa      	ldrb	r2, [r7, #3]
 8007610:	6879      	ldr	r1, [r7, #4]
 8007612:	4613      	mov	r3, r2
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	4413      	add	r3, r2
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	440b      	add	r3, r1
 800761c:	331c      	adds	r3, #28
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	78f9      	ldrb	r1, [r7, #3]
 8007622:	68b8      	ldr	r0, [r7, #8]
 8007624:	460b      	mov	r3, r1
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	440b      	add	r3, r1
 800762a:	00db      	lsls	r3, r3, #3
 800762c:	4403      	add	r3, r0
 800762e:	3338      	adds	r3, #56	; 0x38
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	fbb2 f1f3 	udiv	r1, r2, r3
 8007636:	fb01 f303 	mul.w	r3, r1, r3
 800763a:	1ad3      	subs	r3, r2, r3
 800763c:	2b00      	cmp	r3, #0
 800763e:	d110      	bne.n	8007662 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007640:	78fa      	ldrb	r2, [r7, #3]
 8007642:	6879      	ldr	r1, [r7, #4]
 8007644:	4613      	mov	r3, r2
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	4413      	add	r3, r2
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	440b      	add	r3, r1
 800764e:	331c      	adds	r3, #28
 8007650:	2200      	movs	r2, #0
 8007652:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007654:	78f9      	ldrb	r1, [r7, #3]
 8007656:	2300      	movs	r3, #0
 8007658:	2200      	movs	r2, #0
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f001 fe2d 	bl	80092ba <USBD_LL_Transmit>
 8007660:	e003      	b.n	800766a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2200      	movs	r2, #0
 8007666:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800766a:	2300      	movs	r3, #0
 800766c:	e000      	b.n	8007670 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800766e:	2302      	movs	r3, #2
  }
}
 8007670:	4618      	mov	r0, r3
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	460b      	mov	r3, r1
 8007682:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800768a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800768c:	78fb      	ldrb	r3, [r7, #3]
 800768e:	4619      	mov	r1, r3
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f001 fe58 	bl	8009346 <USBD_LL_GetRxDataSize>
 8007696:	4602      	mov	r2, r0
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00d      	beq.n	80076c4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80076bc:	4611      	mov	r1, r2
 80076be:	4798      	blx	r3

    return USBD_OK;
 80076c0:	2300      	movs	r3, #0
 80076c2:	e000      	b.n	80076c6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80076c4:	2302      	movs	r3, #2
  }
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b084      	sub	sp, #16
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076dc:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d015      	beq.n	8007714 <USBD_CDC_EP0_RxReady+0x46>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80076ee:	2bff      	cmp	r3, #255	; 0xff
 80076f0:	d010      	beq.n	8007714 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007700:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007708:	b292      	uxth	r2, r2
 800770a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	22ff      	movs	r2, #255	; 0xff
 8007710:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
	...

08007720 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2243      	movs	r2, #67	; 0x43
 800772c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800772e:	4b03      	ldr	r3, [pc, #12]	; (800773c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007730:	4618      	mov	r0, r3
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	bc80      	pop	{r7}
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	20000094 	.word	0x20000094

08007740 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2243      	movs	r2, #67	; 0x43
 800774c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800774e:	4b03      	ldr	r3, [pc, #12]	; (800775c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007750:	4618      	mov	r0, r3
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	bc80      	pop	{r7}
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	20000050 	.word	0x20000050

08007760 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2243      	movs	r2, #67	; 0x43
 800776c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800776e:	4b03      	ldr	r3, [pc, #12]	; (800777c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007770:	4618      	mov	r0, r3
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	bc80      	pop	{r7}
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	200000d8 	.word	0x200000d8

08007780 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	220a      	movs	r2, #10
 800778c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800778e:	4b03      	ldr	r3, [pc, #12]	; (800779c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007790:	4618      	mov	r0, r3
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	bc80      	pop	{r7}
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	2000000c 	.word	0x2000000c

080077a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80077aa:	2302      	movs	r3, #2
 80077ac:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d005      	beq.n	80077c0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	683a      	ldr	r2, [r7, #0]
 80077b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80077bc:	2300      	movs	r3, #0
 80077be:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3714      	adds	r7, #20
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bc80      	pop	{r7}
 80077ca:	4770      	bx	lr

080077cc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b087      	sub	sp, #28
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	4613      	mov	r3, r2
 80077d8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077e0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80077ea:	88fa      	ldrh	r2, [r7, #6]
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80077f2:	2300      	movs	r3, #0
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	371c      	adds	r7, #28
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bc80      	pop	{r7}
 80077fc:	4770      	bx	lr

080077fe <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80077fe:	b480      	push	{r7}
 8007800:	b085      	sub	sp, #20
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
 8007806:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800780e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	683a      	ldr	r2, [r7, #0]
 8007814:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3714      	adds	r7, #20
 800781e:	46bd      	mov	sp, r7
 8007820:	bc80      	pop	{r7}
 8007822:	4770      	bx	lr

08007824 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007832:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800783a:	2b00      	cmp	r3, #0
 800783c:	d01c      	beq.n	8007878 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007844:	2b00      	cmp	r3, #0
 8007846:	d115      	bne.n	8007874 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2201      	movs	r2, #1
 800784c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007866:	b29b      	uxth	r3, r3
 8007868:	2181      	movs	r1, #129	; 0x81
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f001 fd25 	bl	80092ba <USBD_LL_Transmit>

      return USBD_OK;
 8007870:	2300      	movs	r3, #0
 8007872:	e002      	b.n	800787a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007874:	2301      	movs	r3, #1
 8007876:	e000      	b.n	800787a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007878:	2302      	movs	r3, #2
  }
}
 800787a:	4618      	mov	r0, r3
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b084      	sub	sp, #16
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007890:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007898:	2b00      	cmp	r3, #0
 800789a:	d017      	beq.n	80078cc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	7c1b      	ldrb	r3, [r3, #16]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d109      	bne.n	80078b8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078ae:	2101      	movs	r1, #1
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f001 fd25 	bl	8009300 <USBD_LL_PrepareReceive>
 80078b6:	e007      	b.n	80078c8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078be:	2340      	movs	r3, #64	; 0x40
 80078c0:	2101      	movs	r1, #1
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f001 fd1c 	bl	8009300 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80078c8:	2300      	movs	r3, #0
 80078ca:	e000      	b.n	80078ce <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80078cc:	2302      	movs	r3, #2
  }
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b084      	sub	sp, #16
 80078da:	af00      	add	r7, sp, #0
 80078dc:	60f8      	str	r0, [r7, #12]
 80078de:	60b9      	str	r1, [r7, #8]
 80078e0:	4613      	mov	r3, r2
 80078e2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d101      	bne.n	80078ee <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80078ea:	2302      	movs	r3, #2
 80078ec:	e01a      	b.n	8007924 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d003      	beq.n	8007900 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d003      	beq.n	800790e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2201      	movs	r2, #1
 8007912:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	79fa      	ldrb	r2, [r7, #7]
 800791a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f001 fb89 	bl	8009034 <USBD_LL_Init>

  return USBD_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007936:	2300      	movs	r3, #0
 8007938:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d006      	beq.n	800794e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	683a      	ldr	r2, [r7, #0]
 8007944:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007948:	2300      	movs	r3, #0
 800794a:	73fb      	strb	r3, [r7, #15]
 800794c:	e001      	b.n	8007952 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800794e:	2302      	movs	r3, #2
 8007950:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007952:	7bfb      	ldrb	r3, [r7, #15]
}
 8007954:	4618      	mov	r0, r3
 8007956:	3714      	adds	r7, #20
 8007958:	46bd      	mov	sp, r7
 800795a:	bc80      	pop	{r7}
 800795c:	4770      	bx	lr

0800795e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b082      	sub	sp, #8
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f001 fbbe 	bl	80090e8 <USBD_LL_Start>

  return USBD_OK;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3708      	adds	r7, #8
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007976:	b480      	push	{r7}
 8007978:	b083      	sub	sp, #12
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	bc80      	pop	{r7}
 8007988:	4770      	bx	lr

0800798a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b084      	sub	sp, #16
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
 8007992:	460b      	mov	r3, r1
 8007994:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007996:	2302      	movs	r3, #2
 8007998:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00c      	beq.n	80079be <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	78fa      	ldrb	r2, [r7, #3]
 80079ae:	4611      	mov	r1, r2
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	4798      	blx	r3
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d101      	bne.n	80079be <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80079ba:	2300      	movs	r3, #0
 80079bc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80079be:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3710      	adds	r7, #16
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	460b      	mov	r3, r1
 80079d2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	78fa      	ldrb	r2, [r7, #3]
 80079de:	4611      	mov	r1, r2
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	4798      	blx	r3

  return USBD_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3708      	adds	r7, #8
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b082      	sub	sp, #8
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
 80079f6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80079fe:	6839      	ldr	r1, [r7, #0]
 8007a00:	4618      	mov	r0, r3
 8007a02:	f000 fed8 	bl	80087b6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a14:	461a      	mov	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007a22:	f003 031f 	and.w	r3, r3, #31
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d016      	beq.n	8007a58 <USBD_LL_SetupStage+0x6a>
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d81c      	bhi.n	8007a68 <USBD_LL_SetupStage+0x7a>
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d002      	beq.n	8007a38 <USBD_LL_SetupStage+0x4a>
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d008      	beq.n	8007a48 <USBD_LL_SetupStage+0x5a>
 8007a36:	e017      	b.n	8007a68 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007a3e:	4619      	mov	r1, r3
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 f9cb 	bl	8007ddc <USBD_StdDevReq>
      break;
 8007a46:	e01a      	b.n	8007a7e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007a4e:	4619      	mov	r1, r3
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 fa2d 	bl	8007eb0 <USBD_StdItfReq>
      break;
 8007a56:	e012      	b.n	8007a7e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007a5e:	4619      	mov	r1, r3
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 fa6d 	bl	8007f40 <USBD_StdEPReq>
      break;
 8007a66:	e00a      	b.n	8007a7e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007a6e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	4619      	mov	r1, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f001 fb96 	bl	80091a8 <USBD_LL_StallEP>
      break;
 8007a7c:	bf00      	nop
  }

  return USBD_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3708      	adds	r7, #8
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	460b      	mov	r3, r1
 8007a92:	607a      	str	r2, [r7, #4]
 8007a94:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007a96:	7afb      	ldrb	r3, [r7, #11]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d14b      	bne.n	8007b34 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007aa2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007aaa:	2b03      	cmp	r3, #3
 8007aac:	d134      	bne.n	8007b18 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	68da      	ldr	r2, [r3, #12]
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d919      	bls.n	8007aee <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	68da      	ldr	r2, [r3, #12]
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	1ad2      	subs	r2, r2, r3
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	68da      	ldr	r2, [r3, #12]
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d203      	bcs.n	8007adc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	e002      	b.n	8007ae2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	6879      	ldr	r1, [r7, #4]
 8007ae6:	68f8      	ldr	r0, [r7, #12]
 8007ae8:	f000 ff57 	bl	800899a <USBD_CtlContinueRx>
 8007aec:	e038      	b.n	8007b60 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00a      	beq.n	8007b10 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007b00:	2b03      	cmp	r3, #3
 8007b02:	d105      	bne.n	8007b10 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	f000 ff54 	bl	80089be <USBD_CtlSendStatus>
 8007b16:	e023      	b.n	8007b60 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b1e:	2b05      	cmp	r3, #5
 8007b20:	d11e      	bne.n	8007b60 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007b2a:	2100      	movs	r1, #0
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f001 fb3b 	bl	80091a8 <USBD_LL_StallEP>
 8007b32:	e015      	b.n	8007b60 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b3a:	699b      	ldr	r3, [r3, #24]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00d      	beq.n	8007b5c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007b46:	2b03      	cmp	r3, #3
 8007b48:	d108      	bne.n	8007b5c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b50:	699b      	ldr	r3, [r3, #24]
 8007b52:	7afa      	ldrb	r2, [r7, #11]
 8007b54:	4611      	mov	r1, r2
 8007b56:	68f8      	ldr	r0, [r7, #12]
 8007b58:	4798      	blx	r3
 8007b5a:	e001      	b.n	8007b60 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007b5c:	2302      	movs	r3, #2
 8007b5e:	e000      	b.n	8007b62 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3718      	adds	r7, #24
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b086      	sub	sp, #24
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	60f8      	str	r0, [r7, #12]
 8007b72:	460b      	mov	r3, r1
 8007b74:	607a      	str	r2, [r7, #4]
 8007b76:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007b78:	7afb      	ldrb	r3, [r7, #11]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d17f      	bne.n	8007c7e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	3314      	adds	r3, #20
 8007b82:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b8a:	2b02      	cmp	r3, #2
 8007b8c:	d15c      	bne.n	8007c48 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	68da      	ldr	r2, [r3, #12]
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d915      	bls.n	8007bc6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	68da      	ldr	r2, [r3, #12]
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	1ad2      	subs	r2, r2, r3
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	461a      	mov	r2, r3
 8007bb0:	6879      	ldr	r1, [r7, #4]
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f000 fec1 	bl	800893a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bb8:	2300      	movs	r3, #0
 8007bba:	2200      	movs	r2, #0
 8007bbc:	2100      	movs	r1, #0
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	f001 fb9e 	bl	8009300 <USBD_LL_PrepareReceive>
 8007bc4:	e04e      	b.n	8007c64 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	6912      	ldr	r2, [r2, #16]
 8007bce:	fbb3 f1f2 	udiv	r1, r3, r2
 8007bd2:	fb01 f202 	mul.w	r2, r1, r2
 8007bd6:	1a9b      	subs	r3, r3, r2
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d11c      	bne.n	8007c16 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	689a      	ldr	r2, [r3, #8]
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d316      	bcc.n	8007c16 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	689a      	ldr	r2, [r3, #8]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d20f      	bcs.n	8007c16 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	2100      	movs	r1, #0
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 fe9d 	bl	800893a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c08:	2300      	movs	r3, #0
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f001 fb76 	bl	8009300 <USBD_LL_PrepareReceive>
 8007c14:	e026      	b.n	8007c64 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00a      	beq.n	8007c38 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007c28:	2b03      	cmp	r3, #3
 8007c2a:	d105      	bne.n	8007c38 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007c38:	2180      	movs	r1, #128	; 0x80
 8007c3a:	68f8      	ldr	r0, [r7, #12]
 8007c3c:	f001 fab4 	bl	80091a8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f000 fecf 	bl	80089e4 <USBD_CtlReceiveStatus>
 8007c46:	e00d      	b.n	8007c64 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c4e:	2b04      	cmp	r3, #4
 8007c50:	d004      	beq.n	8007c5c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d103      	bne.n	8007c64 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007c5c:	2180      	movs	r1, #128	; 0x80
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f001 faa2 	bl	80091a8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d11d      	bne.n	8007caa <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	f7ff fe81 	bl	8007976 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007c7c:	e015      	b.n	8007caa <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c84:	695b      	ldr	r3, [r3, #20]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00d      	beq.n	8007ca6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007c90:	2b03      	cmp	r3, #3
 8007c92:	d108      	bne.n	8007ca6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c9a:	695b      	ldr	r3, [r3, #20]
 8007c9c:	7afa      	ldrb	r2, [r7, #11]
 8007c9e:	4611      	mov	r1, r2
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	4798      	blx	r3
 8007ca4:	e001      	b.n	8007caa <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007ca6:	2302      	movs	r3, #2
 8007ca8:	e000      	b.n	8007cac <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3718      	adds	r7, #24
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007cbc:	2340      	movs	r3, #64	; 0x40
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f001 fa2b 	bl	800911e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2240      	movs	r2, #64	; 0x40
 8007cd4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007cd8:	2340      	movs	r3, #64	; 0x40
 8007cda:	2200      	movs	r2, #0
 8007cdc:	2180      	movs	r1, #128	; 0x80
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f001 fa1d 	bl	800911e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2240      	movs	r2, #64	; 0x40
 8007cee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d009      	beq.n	8007d2c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	6852      	ldr	r2, [r2, #4]
 8007d24:	b2d2      	uxtb	r2, r2
 8007d26:	4611      	mov	r1, r2
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	4798      	blx	r3
  }

  return USBD_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3708      	adds	r7, #8
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b083      	sub	sp, #12
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
 8007d3e:	460b      	mov	r3, r1
 8007d40:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	78fa      	ldrb	r2, [r7, #3]
 8007d46:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	370c      	adds	r7, #12
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bc80      	pop	{r7}
 8007d52:	4770      	bx	lr

08007d54 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2204      	movs	r2, #4
 8007d6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	370c      	adds	r7, #12
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bc80      	pop	{r7}
 8007d7a:	4770      	bx	lr

08007d7c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d8a:	2b04      	cmp	r3, #4
 8007d8c:	d105      	bne.n	8007d9a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	370c      	adds	r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bc80      	pop	{r7}
 8007da4:	4770      	bx	lr

08007da6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b082      	sub	sp, #8
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007db4:	2b03      	cmp	r3, #3
 8007db6:	d10b      	bne.n	8007dd0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dbe:	69db      	ldr	r3, [r3, #28]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d005      	beq.n	8007dd0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dca:	69db      	ldr	r3, [r3, #28]
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
	...

08007ddc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007de6:	2300      	movs	r3, #0
 8007de8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007df2:	2b40      	cmp	r3, #64	; 0x40
 8007df4:	d005      	beq.n	8007e02 <USBD_StdDevReq+0x26>
 8007df6:	2b40      	cmp	r3, #64	; 0x40
 8007df8:	d84f      	bhi.n	8007e9a <USBD_StdDevReq+0xbe>
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d009      	beq.n	8007e12 <USBD_StdDevReq+0x36>
 8007dfe:	2b20      	cmp	r3, #32
 8007e00:	d14b      	bne.n	8007e9a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	6839      	ldr	r1, [r7, #0]
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	4798      	blx	r3
      break;
 8007e10:	e048      	b.n	8007ea4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	785b      	ldrb	r3, [r3, #1]
 8007e16:	2b09      	cmp	r3, #9
 8007e18:	d839      	bhi.n	8007e8e <USBD_StdDevReq+0xb2>
 8007e1a:	a201      	add	r2, pc, #4	; (adr r2, 8007e20 <USBD_StdDevReq+0x44>)
 8007e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e20:	08007e71 	.word	0x08007e71
 8007e24:	08007e85 	.word	0x08007e85
 8007e28:	08007e8f 	.word	0x08007e8f
 8007e2c:	08007e7b 	.word	0x08007e7b
 8007e30:	08007e8f 	.word	0x08007e8f
 8007e34:	08007e53 	.word	0x08007e53
 8007e38:	08007e49 	.word	0x08007e49
 8007e3c:	08007e8f 	.word	0x08007e8f
 8007e40:	08007e67 	.word	0x08007e67
 8007e44:	08007e5d 	.word	0x08007e5d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007e48:	6839      	ldr	r1, [r7, #0]
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 f9dc 	bl	8008208 <USBD_GetDescriptor>
          break;
 8007e50:	e022      	b.n	8007e98 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007e52:	6839      	ldr	r1, [r7, #0]
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 fb3f 	bl	80084d8 <USBD_SetAddress>
          break;
 8007e5a:	e01d      	b.n	8007e98 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007e5c:	6839      	ldr	r1, [r7, #0]
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fb7e 	bl	8008560 <USBD_SetConfig>
          break;
 8007e64:	e018      	b.n	8007e98 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007e66:	6839      	ldr	r1, [r7, #0]
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 fc07 	bl	800867c <USBD_GetConfig>
          break;
 8007e6e:	e013      	b.n	8007e98 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007e70:	6839      	ldr	r1, [r7, #0]
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fc37 	bl	80086e6 <USBD_GetStatus>
          break;
 8007e78:	e00e      	b.n	8007e98 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007e7a:	6839      	ldr	r1, [r7, #0]
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 fc65 	bl	800874c <USBD_SetFeature>
          break;
 8007e82:	e009      	b.n	8007e98 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007e84:	6839      	ldr	r1, [r7, #0]
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 fc74 	bl	8008774 <USBD_ClrFeature>
          break;
 8007e8c:	e004      	b.n	8007e98 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007e8e:	6839      	ldr	r1, [r7, #0]
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 fccc 	bl	800882e <USBD_CtlError>
          break;
 8007e96:	bf00      	nop
      }
      break;
 8007e98:	e004      	b.n	8007ea4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007e9a:	6839      	ldr	r1, [r7, #0]
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 fcc6 	bl	800882e <USBD_CtlError>
      break;
 8007ea2:	bf00      	nop
  }

  return ret;
 8007ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop

08007eb0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ec6:	2b40      	cmp	r3, #64	; 0x40
 8007ec8:	d005      	beq.n	8007ed6 <USBD_StdItfReq+0x26>
 8007eca:	2b40      	cmp	r3, #64	; 0x40
 8007ecc:	d82e      	bhi.n	8007f2c <USBD_StdItfReq+0x7c>
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d001      	beq.n	8007ed6 <USBD_StdItfReq+0x26>
 8007ed2:	2b20      	cmp	r3, #32
 8007ed4:	d12a      	bne.n	8007f2c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007edc:	3b01      	subs	r3, #1
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d81d      	bhi.n	8007f1e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	889b      	ldrh	r3, [r3, #4]
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d813      	bhi.n	8007f14 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	6839      	ldr	r1, [r7, #0]
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	4798      	blx	r3
 8007efa:	4603      	mov	r3, r0
 8007efc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	88db      	ldrh	r3, [r3, #6]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d110      	bne.n	8007f28 <USBD_StdItfReq+0x78>
 8007f06:	7bfb      	ldrb	r3, [r7, #15]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d10d      	bne.n	8007f28 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 fd56 	bl	80089be <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007f12:	e009      	b.n	8007f28 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007f14:	6839      	ldr	r1, [r7, #0]
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 fc89 	bl	800882e <USBD_CtlError>
          break;
 8007f1c:	e004      	b.n	8007f28 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007f1e:	6839      	ldr	r1, [r7, #0]
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 fc84 	bl	800882e <USBD_CtlError>
          break;
 8007f26:	e000      	b.n	8007f2a <USBD_StdItfReq+0x7a>
          break;
 8007f28:	bf00      	nop
      }
      break;
 8007f2a:	e004      	b.n	8007f36 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007f2c:	6839      	ldr	r1, [r7, #0]
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 fc7d 	bl	800882e <USBD_CtlError>
      break;
 8007f34:	bf00      	nop
  }

  return USBD_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3710      	adds	r7, #16
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	889b      	ldrh	r3, [r3, #4]
 8007f52:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f5c:	2b40      	cmp	r3, #64	; 0x40
 8007f5e:	d007      	beq.n	8007f70 <USBD_StdEPReq+0x30>
 8007f60:	2b40      	cmp	r3, #64	; 0x40
 8007f62:	f200 8146 	bhi.w	80081f2 <USBD_StdEPReq+0x2b2>
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00a      	beq.n	8007f80 <USBD_StdEPReq+0x40>
 8007f6a:	2b20      	cmp	r3, #32
 8007f6c:	f040 8141 	bne.w	80081f2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	6839      	ldr	r1, [r7, #0]
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	4798      	blx	r3
      break;
 8007f7e:	e13d      	b.n	80081fc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f88:	2b20      	cmp	r3, #32
 8007f8a:	d10a      	bne.n	8007fa2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	6839      	ldr	r1, [r7, #0]
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	4798      	blx	r3
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007f9e:	7bfb      	ldrb	r3, [r7, #15]
 8007fa0:	e12d      	b.n	80081fe <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	785b      	ldrb	r3, [r3, #1]
 8007fa6:	2b03      	cmp	r3, #3
 8007fa8:	d007      	beq.n	8007fba <USBD_StdEPReq+0x7a>
 8007faa:	2b03      	cmp	r3, #3
 8007fac:	f300 811b 	bgt.w	80081e6 <USBD_StdEPReq+0x2a6>
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d072      	beq.n	800809a <USBD_StdEPReq+0x15a>
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d03a      	beq.n	800802e <USBD_StdEPReq+0xee>
 8007fb8:	e115      	b.n	80081e6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fc0:	2b02      	cmp	r3, #2
 8007fc2:	d002      	beq.n	8007fca <USBD_StdEPReq+0x8a>
 8007fc4:	2b03      	cmp	r3, #3
 8007fc6:	d015      	beq.n	8007ff4 <USBD_StdEPReq+0xb4>
 8007fc8:	e02b      	b.n	8008022 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fca:	7bbb      	ldrb	r3, [r7, #14]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00c      	beq.n	8007fea <USBD_StdEPReq+0xaa>
 8007fd0:	7bbb      	ldrb	r3, [r7, #14]
 8007fd2:	2b80      	cmp	r3, #128	; 0x80
 8007fd4:	d009      	beq.n	8007fea <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007fd6:	7bbb      	ldrb	r3, [r7, #14]
 8007fd8:	4619      	mov	r1, r3
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f001 f8e4 	bl	80091a8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007fe0:	2180      	movs	r1, #128	; 0x80
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f001 f8e0 	bl	80091a8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007fe8:	e020      	b.n	800802c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007fea:	6839      	ldr	r1, [r7, #0]
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fc1e 	bl	800882e <USBD_CtlError>
              break;
 8007ff2:	e01b      	b.n	800802c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	885b      	ldrh	r3, [r3, #2]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d10e      	bne.n	800801a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007ffc:	7bbb      	ldrb	r3, [r7, #14]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00b      	beq.n	800801a <USBD_StdEPReq+0xda>
 8008002:	7bbb      	ldrb	r3, [r7, #14]
 8008004:	2b80      	cmp	r3, #128	; 0x80
 8008006:	d008      	beq.n	800801a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	88db      	ldrh	r3, [r3, #6]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d104      	bne.n	800801a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008010:	7bbb      	ldrb	r3, [r7, #14]
 8008012:	4619      	mov	r1, r3
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f001 f8c7 	bl	80091a8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fccf 	bl	80089be <USBD_CtlSendStatus>

              break;
 8008020:	e004      	b.n	800802c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008022:	6839      	ldr	r1, [r7, #0]
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 fc02 	bl	800882e <USBD_CtlError>
              break;
 800802a:	bf00      	nop
          }
          break;
 800802c:	e0e0      	b.n	80081f0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008034:	2b02      	cmp	r3, #2
 8008036:	d002      	beq.n	800803e <USBD_StdEPReq+0xfe>
 8008038:	2b03      	cmp	r3, #3
 800803a:	d015      	beq.n	8008068 <USBD_StdEPReq+0x128>
 800803c:	e026      	b.n	800808c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800803e:	7bbb      	ldrb	r3, [r7, #14]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00c      	beq.n	800805e <USBD_StdEPReq+0x11e>
 8008044:	7bbb      	ldrb	r3, [r7, #14]
 8008046:	2b80      	cmp	r3, #128	; 0x80
 8008048:	d009      	beq.n	800805e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800804a:	7bbb      	ldrb	r3, [r7, #14]
 800804c:	4619      	mov	r1, r3
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f001 f8aa 	bl	80091a8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008054:	2180      	movs	r1, #128	; 0x80
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f001 f8a6 	bl	80091a8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800805c:	e01c      	b.n	8008098 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800805e:	6839      	ldr	r1, [r7, #0]
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 fbe4 	bl	800882e <USBD_CtlError>
              break;
 8008066:	e017      	b.n	8008098 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	885b      	ldrh	r3, [r3, #2]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d112      	bne.n	8008096 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008070:	7bbb      	ldrb	r3, [r7, #14]
 8008072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008076:	2b00      	cmp	r3, #0
 8008078:	d004      	beq.n	8008084 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800807a:	7bbb      	ldrb	r3, [r7, #14]
 800807c:	4619      	mov	r1, r3
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f001 f8b1 	bl	80091e6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fc9a 	bl	80089be <USBD_CtlSendStatus>
              }
              break;
 800808a:	e004      	b.n	8008096 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800808c:	6839      	ldr	r1, [r7, #0]
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fbcd 	bl	800882e <USBD_CtlError>
              break;
 8008094:	e000      	b.n	8008098 <USBD_StdEPReq+0x158>
              break;
 8008096:	bf00      	nop
          }
          break;
 8008098:	e0aa      	b.n	80081f0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	d002      	beq.n	80080aa <USBD_StdEPReq+0x16a>
 80080a4:	2b03      	cmp	r3, #3
 80080a6:	d032      	beq.n	800810e <USBD_StdEPReq+0x1ce>
 80080a8:	e097      	b.n	80081da <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080aa:	7bbb      	ldrb	r3, [r7, #14]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d007      	beq.n	80080c0 <USBD_StdEPReq+0x180>
 80080b0:	7bbb      	ldrb	r3, [r7, #14]
 80080b2:	2b80      	cmp	r3, #128	; 0x80
 80080b4:	d004      	beq.n	80080c0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80080b6:	6839      	ldr	r1, [r7, #0]
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 fbb8 	bl	800882e <USBD_CtlError>
                break;
 80080be:	e091      	b.n	80081e4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	da0b      	bge.n	80080e0 <USBD_StdEPReq+0x1a0>
 80080c8:	7bbb      	ldrb	r3, [r7, #14]
 80080ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080ce:	4613      	mov	r3, r2
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	4413      	add	r3, r2
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	3310      	adds	r3, #16
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	4413      	add	r3, r2
 80080dc:	3304      	adds	r3, #4
 80080de:	e00b      	b.n	80080f8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80080e0:	7bbb      	ldrb	r3, [r7, #14]
 80080e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080e6:	4613      	mov	r3, r2
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	4413      	add	r3, r2
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	4413      	add	r3, r2
 80080f6:	3304      	adds	r3, #4
 80080f8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	2200      	movs	r2, #0
 80080fe:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	2202      	movs	r2, #2
 8008104:	4619      	mov	r1, r3
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fbfb 	bl	8008902 <USBD_CtlSendData>
              break;
 800810c:	e06a      	b.n	80081e4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800810e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008112:	2b00      	cmp	r3, #0
 8008114:	da11      	bge.n	800813a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008116:	7bbb      	ldrb	r3, [r7, #14]
 8008118:	f003 020f 	and.w	r2, r3, #15
 800811c:	6879      	ldr	r1, [r7, #4]
 800811e:	4613      	mov	r3, r2
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	4413      	add	r3, r2
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	440b      	add	r3, r1
 8008128:	3318      	adds	r3, #24
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d117      	bne.n	8008160 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008130:	6839      	ldr	r1, [r7, #0]
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 fb7b 	bl	800882e <USBD_CtlError>
                  break;
 8008138:	e054      	b.n	80081e4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800813a:	7bbb      	ldrb	r3, [r7, #14]
 800813c:	f003 020f 	and.w	r2, r3, #15
 8008140:	6879      	ldr	r1, [r7, #4]
 8008142:	4613      	mov	r3, r2
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	4413      	add	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	440b      	add	r3, r1
 800814c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d104      	bne.n	8008160 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008156:	6839      	ldr	r1, [r7, #0]
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 fb68 	bl	800882e <USBD_CtlError>
                  break;
 800815e:	e041      	b.n	80081e4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008160:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008164:	2b00      	cmp	r3, #0
 8008166:	da0b      	bge.n	8008180 <USBD_StdEPReq+0x240>
 8008168:	7bbb      	ldrb	r3, [r7, #14]
 800816a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800816e:	4613      	mov	r3, r2
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	4413      	add	r3, r2
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	3310      	adds	r3, #16
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	4413      	add	r3, r2
 800817c:	3304      	adds	r3, #4
 800817e:	e00b      	b.n	8008198 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008180:	7bbb      	ldrb	r3, [r7, #14]
 8008182:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008186:	4613      	mov	r3, r2
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	4413      	add	r3, r2
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	4413      	add	r3, r2
 8008196:	3304      	adds	r3, #4
 8008198:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800819a:	7bbb      	ldrb	r3, [r7, #14]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d002      	beq.n	80081a6 <USBD_StdEPReq+0x266>
 80081a0:	7bbb      	ldrb	r3, [r7, #14]
 80081a2:	2b80      	cmp	r3, #128	; 0x80
 80081a4:	d103      	bne.n	80081ae <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	2200      	movs	r2, #0
 80081aa:	601a      	str	r2, [r3, #0]
 80081ac:	e00e      	b.n	80081cc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80081ae:	7bbb      	ldrb	r3, [r7, #14]
 80081b0:	4619      	mov	r1, r3
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f001 f836 	bl	8009224 <USBD_LL_IsStallEP>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d003      	beq.n	80081c6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	2201      	movs	r2, #1
 80081c2:	601a      	str	r2, [r3, #0]
 80081c4:	e002      	b.n	80081cc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	2200      	movs	r2, #0
 80081ca:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	2202      	movs	r2, #2
 80081d0:	4619      	mov	r1, r3
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 fb95 	bl	8008902 <USBD_CtlSendData>
              break;
 80081d8:	e004      	b.n	80081e4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80081da:	6839      	ldr	r1, [r7, #0]
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fb26 	bl	800882e <USBD_CtlError>
              break;
 80081e2:	bf00      	nop
          }
          break;
 80081e4:	e004      	b.n	80081f0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80081e6:	6839      	ldr	r1, [r7, #0]
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 fb20 	bl	800882e <USBD_CtlError>
          break;
 80081ee:	bf00      	nop
      }
      break;
 80081f0:	e004      	b.n	80081fc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80081f2:	6839      	ldr	r1, [r7, #0]
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 fb1a 	bl	800882e <USBD_CtlError>
      break;
 80081fa:	bf00      	nop
  }

  return ret;
 80081fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3710      	adds	r7, #16
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
	...

08008208 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008212:	2300      	movs	r3, #0
 8008214:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008216:	2300      	movs	r3, #0
 8008218:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800821a:	2300      	movs	r3, #0
 800821c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	885b      	ldrh	r3, [r3, #2]
 8008222:	0a1b      	lsrs	r3, r3, #8
 8008224:	b29b      	uxth	r3, r3
 8008226:	3b01      	subs	r3, #1
 8008228:	2b06      	cmp	r3, #6
 800822a:	f200 8128 	bhi.w	800847e <USBD_GetDescriptor+0x276>
 800822e:	a201      	add	r2, pc, #4	; (adr r2, 8008234 <USBD_GetDescriptor+0x2c>)
 8008230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008234:	08008251 	.word	0x08008251
 8008238:	08008269 	.word	0x08008269
 800823c:	080082a9 	.word	0x080082a9
 8008240:	0800847f 	.word	0x0800847f
 8008244:	0800847f 	.word	0x0800847f
 8008248:	0800841f 	.word	0x0800841f
 800824c:	0800844b 	.word	0x0800844b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	7c12      	ldrb	r2, [r2, #16]
 800825c:	f107 0108 	add.w	r1, r7, #8
 8008260:	4610      	mov	r0, r2
 8008262:	4798      	blx	r3
 8008264:	60f8      	str	r0, [r7, #12]
      break;
 8008266:	e112      	b.n	800848e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	7c1b      	ldrb	r3, [r3, #16]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10d      	bne.n	800828c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008278:	f107 0208 	add.w	r2, r7, #8
 800827c:	4610      	mov	r0, r2
 800827e:	4798      	blx	r3
 8008280:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	3301      	adds	r3, #1
 8008286:	2202      	movs	r2, #2
 8008288:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800828a:	e100      	b.n	800848e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008294:	f107 0208 	add.w	r2, r7, #8
 8008298:	4610      	mov	r0, r2
 800829a:	4798      	blx	r3
 800829c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	3301      	adds	r3, #1
 80082a2:	2202      	movs	r2, #2
 80082a4:	701a      	strb	r2, [r3, #0]
      break;
 80082a6:	e0f2      	b.n	800848e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	885b      	ldrh	r3, [r3, #2]
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	2b05      	cmp	r3, #5
 80082b0:	f200 80ac 	bhi.w	800840c <USBD_GetDescriptor+0x204>
 80082b4:	a201      	add	r2, pc, #4	; (adr r2, 80082bc <USBD_GetDescriptor+0xb4>)
 80082b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ba:	bf00      	nop
 80082bc:	080082d5 	.word	0x080082d5
 80082c0:	08008309 	.word	0x08008309
 80082c4:	0800833d 	.word	0x0800833d
 80082c8:	08008371 	.word	0x08008371
 80082cc:	080083a5 	.word	0x080083a5
 80082d0:	080083d9 	.word	0x080083d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00b      	beq.n	80082f8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	7c12      	ldrb	r2, [r2, #16]
 80082ec:	f107 0108 	add.w	r1, r7, #8
 80082f0:	4610      	mov	r0, r2
 80082f2:	4798      	blx	r3
 80082f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082f6:	e091      	b.n	800841c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082f8:	6839      	ldr	r1, [r7, #0]
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 fa97 	bl	800882e <USBD_CtlError>
            err++;
 8008300:	7afb      	ldrb	r3, [r7, #11]
 8008302:	3301      	adds	r3, #1
 8008304:	72fb      	strb	r3, [r7, #11]
          break;
 8008306:	e089      	b.n	800841c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d00b      	beq.n	800832c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	7c12      	ldrb	r2, [r2, #16]
 8008320:	f107 0108 	add.w	r1, r7, #8
 8008324:	4610      	mov	r0, r2
 8008326:	4798      	blx	r3
 8008328:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800832a:	e077      	b.n	800841c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800832c:	6839      	ldr	r1, [r7, #0]
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fa7d 	bl	800882e <USBD_CtlError>
            err++;
 8008334:	7afb      	ldrb	r3, [r7, #11]
 8008336:	3301      	adds	r3, #1
 8008338:	72fb      	strb	r3, [r7, #11]
          break;
 800833a:	e06f      	b.n	800841c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d00b      	beq.n	8008360 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	7c12      	ldrb	r2, [r2, #16]
 8008354:	f107 0108 	add.w	r1, r7, #8
 8008358:	4610      	mov	r0, r2
 800835a:	4798      	blx	r3
 800835c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800835e:	e05d      	b.n	800841c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008360:	6839      	ldr	r1, [r7, #0]
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fa63 	bl	800882e <USBD_CtlError>
            err++;
 8008368:	7afb      	ldrb	r3, [r7, #11]
 800836a:	3301      	adds	r3, #1
 800836c:	72fb      	strb	r3, [r7, #11]
          break;
 800836e:	e055      	b.n	800841c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008376:	691b      	ldr	r3, [r3, #16]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d00b      	beq.n	8008394 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	7c12      	ldrb	r2, [r2, #16]
 8008388:	f107 0108 	add.w	r1, r7, #8
 800838c:	4610      	mov	r0, r2
 800838e:	4798      	blx	r3
 8008390:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008392:	e043      	b.n	800841c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008394:	6839      	ldr	r1, [r7, #0]
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 fa49 	bl	800882e <USBD_CtlError>
            err++;
 800839c:	7afb      	ldrb	r3, [r7, #11]
 800839e:	3301      	adds	r3, #1
 80083a0:	72fb      	strb	r3, [r7, #11]
          break;
 80083a2:	e03b      	b.n	800841c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083aa:	695b      	ldr	r3, [r3, #20]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00b      	beq.n	80083c8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083b6:	695b      	ldr	r3, [r3, #20]
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	7c12      	ldrb	r2, [r2, #16]
 80083bc:	f107 0108 	add.w	r1, r7, #8
 80083c0:	4610      	mov	r0, r2
 80083c2:	4798      	blx	r3
 80083c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083c6:	e029      	b.n	800841c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083c8:	6839      	ldr	r1, [r7, #0]
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 fa2f 	bl	800882e <USBD_CtlError>
            err++;
 80083d0:	7afb      	ldrb	r3, [r7, #11]
 80083d2:	3301      	adds	r3, #1
 80083d4:	72fb      	strb	r3, [r7, #11]
          break;
 80083d6:	e021      	b.n	800841c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083de:	699b      	ldr	r3, [r3, #24]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d00b      	beq.n	80083fc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083ea:	699b      	ldr	r3, [r3, #24]
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	7c12      	ldrb	r2, [r2, #16]
 80083f0:	f107 0108 	add.w	r1, r7, #8
 80083f4:	4610      	mov	r0, r2
 80083f6:	4798      	blx	r3
 80083f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083fa:	e00f      	b.n	800841c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083fc:	6839      	ldr	r1, [r7, #0]
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 fa15 	bl	800882e <USBD_CtlError>
            err++;
 8008404:	7afb      	ldrb	r3, [r7, #11]
 8008406:	3301      	adds	r3, #1
 8008408:	72fb      	strb	r3, [r7, #11]
          break;
 800840a:	e007      	b.n	800841c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800840c:	6839      	ldr	r1, [r7, #0]
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 fa0d 	bl	800882e <USBD_CtlError>
          err++;
 8008414:	7afb      	ldrb	r3, [r7, #11]
 8008416:	3301      	adds	r3, #1
 8008418:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800841a:	e038      	b.n	800848e <USBD_GetDescriptor+0x286>
 800841c:	e037      	b.n	800848e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	7c1b      	ldrb	r3, [r3, #16]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d109      	bne.n	800843a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800842c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800842e:	f107 0208 	add.w	r2, r7, #8
 8008432:	4610      	mov	r0, r2
 8008434:	4798      	blx	r3
 8008436:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008438:	e029      	b.n	800848e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800843a:	6839      	ldr	r1, [r7, #0]
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 f9f6 	bl	800882e <USBD_CtlError>
        err++;
 8008442:	7afb      	ldrb	r3, [r7, #11]
 8008444:	3301      	adds	r3, #1
 8008446:	72fb      	strb	r3, [r7, #11]
      break;
 8008448:	e021      	b.n	800848e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	7c1b      	ldrb	r3, [r3, #16]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d10d      	bne.n	800846e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800845a:	f107 0208 	add.w	r2, r7, #8
 800845e:	4610      	mov	r0, r2
 8008460:	4798      	blx	r3
 8008462:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	3301      	adds	r3, #1
 8008468:	2207      	movs	r2, #7
 800846a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800846c:	e00f      	b.n	800848e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800846e:	6839      	ldr	r1, [r7, #0]
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 f9dc 	bl	800882e <USBD_CtlError>
        err++;
 8008476:	7afb      	ldrb	r3, [r7, #11]
 8008478:	3301      	adds	r3, #1
 800847a:	72fb      	strb	r3, [r7, #11]
      break;
 800847c:	e007      	b.n	800848e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800847e:	6839      	ldr	r1, [r7, #0]
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 f9d4 	bl	800882e <USBD_CtlError>
      err++;
 8008486:	7afb      	ldrb	r3, [r7, #11]
 8008488:	3301      	adds	r3, #1
 800848a:	72fb      	strb	r3, [r7, #11]
      break;
 800848c:	bf00      	nop
  }

  if (err != 0U)
 800848e:	7afb      	ldrb	r3, [r7, #11]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d11c      	bne.n	80084ce <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008494:	893b      	ldrh	r3, [r7, #8]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d011      	beq.n	80084be <USBD_GetDescriptor+0x2b6>
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	88db      	ldrh	r3, [r3, #6]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d00d      	beq.n	80084be <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	88da      	ldrh	r2, [r3, #6]
 80084a6:	893b      	ldrh	r3, [r7, #8]
 80084a8:	4293      	cmp	r3, r2
 80084aa:	bf28      	it	cs
 80084ac:	4613      	movcs	r3, r2
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80084b2:	893b      	ldrh	r3, [r7, #8]
 80084b4:	461a      	mov	r2, r3
 80084b6:	68f9      	ldr	r1, [r7, #12]
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 fa22 	bl	8008902 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	88db      	ldrh	r3, [r3, #6]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d104      	bne.n	80084d0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 fa79 	bl	80089be <USBD_CtlSendStatus>
 80084cc:	e000      	b.n	80084d0 <USBD_GetDescriptor+0x2c8>
    return;
 80084ce:	bf00      	nop
    }
  }
}
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop

080084d8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	889b      	ldrh	r3, [r3, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d130      	bne.n	800854c <USBD_SetAddress+0x74>
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	88db      	ldrh	r3, [r3, #6]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d12c      	bne.n	800854c <USBD_SetAddress+0x74>
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	885b      	ldrh	r3, [r3, #2]
 80084f6:	2b7f      	cmp	r3, #127	; 0x7f
 80084f8:	d828      	bhi.n	800854c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	885b      	ldrh	r3, [r3, #2]
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008504:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800850c:	2b03      	cmp	r3, #3
 800850e:	d104      	bne.n	800851a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008510:	6839      	ldr	r1, [r7, #0]
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 f98b 	bl	800882e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008518:	e01d      	b.n	8008556 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	7bfa      	ldrb	r2, [r7, #15]
 800851e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008522:	7bfb      	ldrb	r3, [r7, #15]
 8008524:	4619      	mov	r1, r3
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 fea8 	bl	800927c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 fa46 	bl	80089be <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008532:	7bfb      	ldrb	r3, [r7, #15]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d004      	beq.n	8008542 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2202      	movs	r2, #2
 800853c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008540:	e009      	b.n	8008556 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2201      	movs	r2, #1
 8008546:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800854a:	e004      	b.n	8008556 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800854c:	6839      	ldr	r1, [r7, #0]
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 f96d 	bl	800882e <USBD_CtlError>
  }
}
 8008554:	bf00      	nop
 8008556:	bf00      	nop
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
	...

08008560 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	885b      	ldrh	r3, [r3, #2]
 800856e:	b2da      	uxtb	r2, r3
 8008570:	4b41      	ldr	r3, [pc, #260]	; (8008678 <USBD_SetConfig+0x118>)
 8008572:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008574:	4b40      	ldr	r3, [pc, #256]	; (8008678 <USBD_SetConfig+0x118>)
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	2b01      	cmp	r3, #1
 800857a:	d904      	bls.n	8008586 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800857c:	6839      	ldr	r1, [r7, #0]
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 f955 	bl	800882e <USBD_CtlError>
 8008584:	e075      	b.n	8008672 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800858c:	2b02      	cmp	r3, #2
 800858e:	d002      	beq.n	8008596 <USBD_SetConfig+0x36>
 8008590:	2b03      	cmp	r3, #3
 8008592:	d023      	beq.n	80085dc <USBD_SetConfig+0x7c>
 8008594:	e062      	b.n	800865c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008596:	4b38      	ldr	r3, [pc, #224]	; (8008678 <USBD_SetConfig+0x118>)
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d01a      	beq.n	80085d4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800859e:	4b36      	ldr	r3, [pc, #216]	; (8008678 <USBD_SetConfig+0x118>)
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	461a      	mov	r2, r3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2203      	movs	r2, #3
 80085ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80085b0:	4b31      	ldr	r3, [pc, #196]	; (8008678 <USBD_SetConfig+0x118>)
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	4619      	mov	r1, r3
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f7ff f9e7 	bl	800798a <USBD_SetClassConfig>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b02      	cmp	r3, #2
 80085c0:	d104      	bne.n	80085cc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80085c2:	6839      	ldr	r1, [r7, #0]
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 f932 	bl	800882e <USBD_CtlError>
            return;
 80085ca:	e052      	b.n	8008672 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 f9f6 	bl	80089be <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80085d2:	e04e      	b.n	8008672 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 f9f2 	bl	80089be <USBD_CtlSendStatus>
        break;
 80085da:	e04a      	b.n	8008672 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80085dc:	4b26      	ldr	r3, [pc, #152]	; (8008678 <USBD_SetConfig+0x118>)
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d112      	bne.n	800860a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2202      	movs	r2, #2
 80085e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80085ec:	4b22      	ldr	r3, [pc, #136]	; (8008678 <USBD_SetConfig+0x118>)
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	461a      	mov	r2, r3
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80085f6:	4b20      	ldr	r3, [pc, #128]	; (8008678 <USBD_SetConfig+0x118>)
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	4619      	mov	r1, r3
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f7ff f9e3 	bl	80079c8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f9db 	bl	80089be <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008608:	e033      	b.n	8008672 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800860a:	4b1b      	ldr	r3, [pc, #108]	; (8008678 <USBD_SetConfig+0x118>)
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	461a      	mov	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	429a      	cmp	r2, r3
 8008616:	d01d      	beq.n	8008654 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	b2db      	uxtb	r3, r3
 800861e:	4619      	mov	r1, r3
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f7ff f9d1 	bl	80079c8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008626:	4b14      	ldr	r3, [pc, #80]	; (8008678 <USBD_SetConfig+0x118>)
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	461a      	mov	r2, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008630:	4b11      	ldr	r3, [pc, #68]	; (8008678 <USBD_SetConfig+0x118>)
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	4619      	mov	r1, r3
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f7ff f9a7 	bl	800798a <USBD_SetClassConfig>
 800863c:	4603      	mov	r3, r0
 800863e:	2b02      	cmp	r3, #2
 8008640:	d104      	bne.n	800864c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008642:	6839      	ldr	r1, [r7, #0]
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 f8f2 	bl	800882e <USBD_CtlError>
            return;
 800864a:	e012      	b.n	8008672 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 f9b6 	bl	80089be <USBD_CtlSendStatus>
        break;
 8008652:	e00e      	b.n	8008672 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 f9b2 	bl	80089be <USBD_CtlSendStatus>
        break;
 800865a:	e00a      	b.n	8008672 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800865c:	6839      	ldr	r1, [r7, #0]
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 f8e5 	bl	800882e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008664:	4b04      	ldr	r3, [pc, #16]	; (8008678 <USBD_SetConfig+0x118>)
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	4619      	mov	r1, r3
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f7ff f9ac 	bl	80079c8 <USBD_ClrClassConfig>
        break;
 8008670:	bf00      	nop
    }
  }
}
 8008672:	3708      	adds	r7, #8
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	20000444 	.word	0x20000444

0800867c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	88db      	ldrh	r3, [r3, #6]
 800868a:	2b01      	cmp	r3, #1
 800868c:	d004      	beq.n	8008698 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800868e:	6839      	ldr	r1, [r7, #0]
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 f8cc 	bl	800882e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008696:	e022      	b.n	80086de <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800869e:	2b02      	cmp	r3, #2
 80086a0:	dc02      	bgt.n	80086a8 <USBD_GetConfig+0x2c>
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	dc03      	bgt.n	80086ae <USBD_GetConfig+0x32>
 80086a6:	e015      	b.n	80086d4 <USBD_GetConfig+0x58>
 80086a8:	2b03      	cmp	r3, #3
 80086aa:	d00b      	beq.n	80086c4 <USBD_GetConfig+0x48>
 80086ac:	e012      	b.n	80086d4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	3308      	adds	r3, #8
 80086b8:	2201      	movs	r2, #1
 80086ba:	4619      	mov	r1, r3
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 f920 	bl	8008902 <USBD_CtlSendData>
        break;
 80086c2:	e00c      	b.n	80086de <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	3304      	adds	r3, #4
 80086c8:	2201      	movs	r2, #1
 80086ca:	4619      	mov	r1, r3
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 f918 	bl	8008902 <USBD_CtlSendData>
        break;
 80086d2:	e004      	b.n	80086de <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80086d4:	6839      	ldr	r1, [r7, #0]
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 f8a9 	bl	800882e <USBD_CtlError>
        break;
 80086dc:	bf00      	nop
}
 80086de:	bf00      	nop
 80086e0:	3708      	adds	r7, #8
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b082      	sub	sp, #8
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
 80086ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086f6:	3b01      	subs	r3, #1
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d81e      	bhi.n	800873a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	88db      	ldrh	r3, [r3, #6]
 8008700:	2b02      	cmp	r3, #2
 8008702:	d004      	beq.n	800870e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008704:	6839      	ldr	r1, [r7, #0]
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 f891 	bl	800882e <USBD_CtlError>
        break;
 800870c:	e01a      	b.n	8008744 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2201      	movs	r2, #1
 8008712:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800871a:	2b00      	cmp	r3, #0
 800871c:	d005      	beq.n	800872a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	f043 0202 	orr.w	r2, r3, #2
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	330c      	adds	r3, #12
 800872e:	2202      	movs	r2, #2
 8008730:	4619      	mov	r1, r3
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 f8e5 	bl	8008902 <USBD_CtlSendData>
      break;
 8008738:	e004      	b.n	8008744 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800873a:	6839      	ldr	r1, [r7, #0]
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 f876 	bl	800882e <USBD_CtlError>
      break;
 8008742:	bf00      	nop
  }
}
 8008744:	bf00      	nop
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	885b      	ldrh	r3, [r3, #2]
 800875a:	2b01      	cmp	r3, #1
 800875c:	d106      	bne.n	800876c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2201      	movs	r2, #1
 8008762:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f929 	bl	80089be <USBD_CtlSendStatus>
  }
}
 800876c:	bf00      	nop
 800876e:	3708      	adds	r7, #8
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008784:	3b01      	subs	r3, #1
 8008786:	2b02      	cmp	r3, #2
 8008788:	d80b      	bhi.n	80087a2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	885b      	ldrh	r3, [r3, #2]
 800878e:	2b01      	cmp	r3, #1
 8008790:	d10c      	bne.n	80087ac <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 f90f 	bl	80089be <USBD_CtlSendStatus>
      }
      break;
 80087a0:	e004      	b.n	80087ac <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80087a2:	6839      	ldr	r1, [r7, #0]
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 f842 	bl	800882e <USBD_CtlError>
      break;
 80087aa:	e000      	b.n	80087ae <USBD_ClrFeature+0x3a>
      break;
 80087ac:	bf00      	nop
  }
}
 80087ae:	bf00      	nop
 80087b0:	3708      	adds	r7, #8
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80087b6:	b480      	push	{r7}
 80087b8:	b083      	sub	sp, #12
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
 80087be:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	781a      	ldrb	r2, [r3, #0]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	785a      	ldrb	r2, [r3, #1]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	3302      	adds	r3, #2
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	3303      	adds	r3, #3
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	b29b      	uxth	r3, r3
 80087e0:	021b      	lsls	r3, r3, #8
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	4413      	add	r3, r2
 80087e6:	b29a      	uxth	r2, r3
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	3304      	adds	r3, #4
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	b29a      	uxth	r2, r3
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	3305      	adds	r3, #5
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	021b      	lsls	r3, r3, #8
 80087fe:	b29b      	uxth	r3, r3
 8008800:	4413      	add	r3, r2
 8008802:	b29a      	uxth	r2, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	3306      	adds	r3, #6
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	b29a      	uxth	r2, r3
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	3307      	adds	r3, #7
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	b29b      	uxth	r3, r3
 8008818:	021b      	lsls	r3, r3, #8
 800881a:	b29b      	uxth	r3, r3
 800881c:	4413      	add	r3, r2
 800881e:	b29a      	uxth	r2, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	80da      	strh	r2, [r3, #6]

}
 8008824:	bf00      	nop
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	bc80      	pop	{r7}
 800882c:	4770      	bx	lr

0800882e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b082      	sub	sp, #8
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
 8008836:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008838:	2180      	movs	r1, #128	; 0x80
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 fcb4 	bl	80091a8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008840:	2100      	movs	r1, #0
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 fcb0 	bl	80091a8 <USBD_LL_StallEP>
}
 8008848:	bf00      	nop
 800884a:	3708      	adds	r7, #8
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b086      	sub	sp, #24
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800885c:	2300      	movs	r3, #0
 800885e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d032      	beq.n	80088cc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008866:	68f8      	ldr	r0, [r7, #12]
 8008868:	f000 f834 	bl	80088d4 <USBD_GetLen>
 800886c:	4603      	mov	r3, r0
 800886e:	3301      	adds	r3, #1
 8008870:	b29b      	uxth	r3, r3
 8008872:	005b      	lsls	r3, r3, #1
 8008874:	b29a      	uxth	r2, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800887a:	7dfb      	ldrb	r3, [r7, #23]
 800887c:	1c5a      	adds	r2, r3, #1
 800887e:	75fa      	strb	r2, [r7, #23]
 8008880:	461a      	mov	r2, r3
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	4413      	add	r3, r2
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	7812      	ldrb	r2, [r2, #0]
 800888a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800888c:	7dfb      	ldrb	r3, [r7, #23]
 800888e:	1c5a      	adds	r2, r3, #1
 8008890:	75fa      	strb	r2, [r7, #23]
 8008892:	461a      	mov	r2, r3
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	4413      	add	r3, r2
 8008898:	2203      	movs	r2, #3
 800889a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800889c:	e012      	b.n	80088c4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	1c5a      	adds	r2, r3, #1
 80088a2:	60fa      	str	r2, [r7, #12]
 80088a4:	7dfa      	ldrb	r2, [r7, #23]
 80088a6:	1c51      	adds	r1, r2, #1
 80088a8:	75f9      	strb	r1, [r7, #23]
 80088aa:	4611      	mov	r1, r2
 80088ac:	68ba      	ldr	r2, [r7, #8]
 80088ae:	440a      	add	r2, r1
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80088b4:	7dfb      	ldrb	r3, [r7, #23]
 80088b6:	1c5a      	adds	r2, r3, #1
 80088b8:	75fa      	strb	r2, [r7, #23]
 80088ba:	461a      	mov	r2, r3
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	4413      	add	r3, r2
 80088c0:	2200      	movs	r2, #0
 80088c2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d1e8      	bne.n	800889e <USBD_GetString+0x4e>
    }
  }
}
 80088cc:	bf00      	nop
 80088ce:	3718      	adds	r7, #24
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80088dc:	2300      	movs	r3, #0
 80088de:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80088e0:	e005      	b.n	80088ee <USBD_GetLen+0x1a>
  {
    len++;
 80088e2:	7bfb      	ldrb	r3, [r7, #15]
 80088e4:	3301      	adds	r3, #1
 80088e6:	73fb      	strb	r3, [r7, #15]
    buf++;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	3301      	adds	r3, #1
 80088ec:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1f5      	bne.n	80088e2 <USBD_GetLen+0xe>
  }

  return len;
 80088f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3714      	adds	r7, #20
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bc80      	pop	{r7}
 8008900:	4770      	bx	lr

08008902 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b084      	sub	sp, #16
 8008906:	af00      	add	r7, sp, #0
 8008908:	60f8      	str	r0, [r7, #12]
 800890a:	60b9      	str	r1, [r7, #8]
 800890c:	4613      	mov	r3, r2
 800890e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2202      	movs	r2, #2
 8008914:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008918:	88fa      	ldrh	r2, [r7, #6]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800891e:	88fa      	ldrh	r2, [r7, #6]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008924:	88fb      	ldrh	r3, [r7, #6]
 8008926:	68ba      	ldr	r2, [r7, #8]
 8008928:	2100      	movs	r1, #0
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f000 fcc5 	bl	80092ba <USBD_LL_Transmit>

  return USBD_OK;
 8008930:	2300      	movs	r3, #0
}
 8008932:	4618      	mov	r0, r3
 8008934:	3710      	adds	r7, #16
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800893a:	b580      	push	{r7, lr}
 800893c:	b084      	sub	sp, #16
 800893e:	af00      	add	r7, sp, #0
 8008940:	60f8      	str	r0, [r7, #12]
 8008942:	60b9      	str	r1, [r7, #8]
 8008944:	4613      	mov	r3, r2
 8008946:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008948:	88fb      	ldrh	r3, [r7, #6]
 800894a:	68ba      	ldr	r2, [r7, #8]
 800894c:	2100      	movs	r1, #0
 800894e:	68f8      	ldr	r0, [r7, #12]
 8008950:	f000 fcb3 	bl	80092ba <USBD_LL_Transmit>

  return USBD_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800895e:	b580      	push	{r7, lr}
 8008960:	b084      	sub	sp, #16
 8008962:	af00      	add	r7, sp, #0
 8008964:	60f8      	str	r0, [r7, #12]
 8008966:	60b9      	str	r1, [r7, #8]
 8008968:	4613      	mov	r3, r2
 800896a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2203      	movs	r2, #3
 8008970:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008974:	88fa      	ldrh	r2, [r7, #6]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800897c:	88fa      	ldrh	r2, [r7, #6]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008984:	88fb      	ldrh	r3, [r7, #6]
 8008986:	68ba      	ldr	r2, [r7, #8]
 8008988:	2100      	movs	r1, #0
 800898a:	68f8      	ldr	r0, [r7, #12]
 800898c:	f000 fcb8 	bl	8009300 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008990:	2300      	movs	r3, #0
}
 8008992:	4618      	mov	r0, r3
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b084      	sub	sp, #16
 800899e:	af00      	add	r7, sp, #0
 80089a0:	60f8      	str	r0, [r7, #12]
 80089a2:	60b9      	str	r1, [r7, #8]
 80089a4:	4613      	mov	r3, r2
 80089a6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089a8:	88fb      	ldrh	r3, [r7, #6]
 80089aa:	68ba      	ldr	r2, [r7, #8]
 80089ac:	2100      	movs	r1, #0
 80089ae:	68f8      	ldr	r0, [r7, #12]
 80089b0:	f000 fca6 	bl	8009300 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b082      	sub	sp, #8
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2204      	movs	r2, #4
 80089ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80089ce:	2300      	movs	r3, #0
 80089d0:	2200      	movs	r2, #0
 80089d2:	2100      	movs	r1, #0
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 fc70 	bl	80092ba <USBD_LL_Transmit>

  return USBD_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2205      	movs	r2, #5
 80089f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089f4:	2300      	movs	r3, #0
 80089f6:	2200      	movs	r2, #0
 80089f8:	2100      	movs	r1, #0
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 fc80 	bl	8009300 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3708      	adds	r7, #8
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
	...

08008a0c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008a10:	2200      	movs	r2, #0
 8008a12:	4912      	ldr	r1, [pc, #72]	; (8008a5c <MX_USB_DEVICE_Init+0x50>)
 8008a14:	4812      	ldr	r0, [pc, #72]	; (8008a60 <MX_USB_DEVICE_Init+0x54>)
 8008a16:	f7fe ff5e 	bl	80078d6 <USBD_Init>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d001      	beq.n	8008a24 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008a20:	f7f7 ff5c 	bl	80008dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008a24:	490f      	ldr	r1, [pc, #60]	; (8008a64 <MX_USB_DEVICE_Init+0x58>)
 8008a26:	480e      	ldr	r0, [pc, #56]	; (8008a60 <MX_USB_DEVICE_Init+0x54>)
 8008a28:	f7fe ff80 	bl	800792c <USBD_RegisterClass>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d001      	beq.n	8008a36 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008a32:	f7f7 ff53 	bl	80008dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008a36:	490c      	ldr	r1, [pc, #48]	; (8008a68 <MX_USB_DEVICE_Init+0x5c>)
 8008a38:	4809      	ldr	r0, [pc, #36]	; (8008a60 <MX_USB_DEVICE_Init+0x54>)
 8008a3a:	f7fe feb1 	bl	80077a0 <USBD_CDC_RegisterInterface>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d001      	beq.n	8008a48 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008a44:	f7f7 ff4a 	bl	80008dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008a48:	4805      	ldr	r0, [pc, #20]	; (8008a60 <MX_USB_DEVICE_Init+0x54>)
 8008a4a:	f7fe ff88 	bl	800795e <USBD_Start>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d001      	beq.n	8008a58 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008a54:	f7f7 ff42 	bl	80008dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008a58:	bf00      	nop
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	2000012c 	.word	0x2000012c
 8008a60:	20000448 	.word	0x20000448
 8008a64:	20000018 	.word	0x20000018
 8008a68:	2000011c 	.word	0x2000011c

08008a6c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008a70:	2200      	movs	r2, #0
 8008a72:	4905      	ldr	r1, [pc, #20]	; (8008a88 <CDC_Init_FS+0x1c>)
 8008a74:	4805      	ldr	r0, [pc, #20]	; (8008a8c <CDC_Init_FS+0x20>)
 8008a76:	f7fe fea9 	bl	80077cc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008a7a:	4905      	ldr	r1, [pc, #20]	; (8008a90 <CDC_Init_FS+0x24>)
 8008a7c:	4803      	ldr	r0, [pc, #12]	; (8008a8c <CDC_Init_FS+0x20>)
 8008a7e:	f7fe febe 	bl	80077fe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008a82:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	2000080c 	.word	0x2000080c
 8008a8c:	20000448 	.word	0x20000448
 8008a90:	2000070c 	.word	0x2000070c

08008a94 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008a94:	b480      	push	{r7}
 8008a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008a98:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bc80      	pop	{r7}
 8008aa0:	4770      	bx	lr
	...

08008aa4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	4603      	mov	r3, r0
 8008aac:	6039      	str	r1, [r7, #0]
 8008aae:	71fb      	strb	r3, [r7, #7]
 8008ab0:	4613      	mov	r3, r2
 8008ab2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008ab4:	79fb      	ldrb	r3, [r7, #7]
 8008ab6:	2b23      	cmp	r3, #35	; 0x23
 8008ab8:	f200 808c 	bhi.w	8008bd4 <CDC_Control_FS+0x130>
 8008abc:	a201      	add	r2, pc, #4	; (adr r2, 8008ac4 <CDC_Control_FS+0x20>)
 8008abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac2:	bf00      	nop
 8008ac4:	08008bd5 	.word	0x08008bd5
 8008ac8:	08008bd5 	.word	0x08008bd5
 8008acc:	08008bd5 	.word	0x08008bd5
 8008ad0:	08008bd5 	.word	0x08008bd5
 8008ad4:	08008bd5 	.word	0x08008bd5
 8008ad8:	08008bd5 	.word	0x08008bd5
 8008adc:	08008bd5 	.word	0x08008bd5
 8008ae0:	08008bd5 	.word	0x08008bd5
 8008ae4:	08008bd5 	.word	0x08008bd5
 8008ae8:	08008bd5 	.word	0x08008bd5
 8008aec:	08008bd5 	.word	0x08008bd5
 8008af0:	08008bd5 	.word	0x08008bd5
 8008af4:	08008bd5 	.word	0x08008bd5
 8008af8:	08008bd5 	.word	0x08008bd5
 8008afc:	08008bd5 	.word	0x08008bd5
 8008b00:	08008bd5 	.word	0x08008bd5
 8008b04:	08008bd5 	.word	0x08008bd5
 8008b08:	08008bd5 	.word	0x08008bd5
 8008b0c:	08008bd5 	.word	0x08008bd5
 8008b10:	08008bd5 	.word	0x08008bd5
 8008b14:	08008bd5 	.word	0x08008bd5
 8008b18:	08008bd5 	.word	0x08008bd5
 8008b1c:	08008bd5 	.word	0x08008bd5
 8008b20:	08008bd5 	.word	0x08008bd5
 8008b24:	08008bd5 	.word	0x08008bd5
 8008b28:	08008bd5 	.word	0x08008bd5
 8008b2c:	08008bd5 	.word	0x08008bd5
 8008b30:	08008bd5 	.word	0x08008bd5
 8008b34:	08008bd5 	.word	0x08008bd5
 8008b38:	08008bd5 	.word	0x08008bd5
 8008b3c:	08008bd5 	.word	0x08008bd5
 8008b40:	08008bd5 	.word	0x08008bd5
 8008b44:	08008b55 	.word	0x08008b55
 8008b48:	08008b8f 	.word	0x08008b8f
 8008b4c:	08008bd5 	.word	0x08008bd5
 8008b50:	08008bd5 	.word	0x08008bd5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	mylineCodeBuf[0] = pbuf[0];
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	781a      	ldrb	r2, [r3, #0]
 8008b58:	4b22      	ldr	r3, [pc, #136]	; (8008be4 <CDC_Control_FS+0x140>)
 8008b5a:	701a      	strb	r2, [r3, #0]
    	mylineCodeBuf[1] = pbuf[1];
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	785a      	ldrb	r2, [r3, #1]
 8008b60:	4b20      	ldr	r3, [pc, #128]	; (8008be4 <CDC_Control_FS+0x140>)
 8008b62:	705a      	strb	r2, [r3, #1]
    	mylineCodeBuf[2] = pbuf[2];
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	789a      	ldrb	r2, [r3, #2]
 8008b68:	4b1e      	ldr	r3, [pc, #120]	; (8008be4 <CDC_Control_FS+0x140>)
 8008b6a:	709a      	strb	r2, [r3, #2]
    	mylineCodeBuf[3] = pbuf[3];
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	78da      	ldrb	r2, [r3, #3]
 8008b70:	4b1c      	ldr	r3, [pc, #112]	; (8008be4 <CDC_Control_FS+0x140>)
 8008b72:	70da      	strb	r2, [r3, #3]
    	mylineCodeBuf[4] = pbuf[4];
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	791a      	ldrb	r2, [r3, #4]
 8008b78:	4b1a      	ldr	r3, [pc, #104]	; (8008be4 <CDC_Control_FS+0x140>)
 8008b7a:	711a      	strb	r2, [r3, #4]
    	mylineCodeBuf[5] = pbuf[5];
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	795a      	ldrb	r2, [r3, #5]
 8008b80:	4b18      	ldr	r3, [pc, #96]	; (8008be4 <CDC_Control_FS+0x140>)
 8008b82:	715a      	strb	r2, [r3, #5]
    	mylineCodeBuf[6] = pbuf[6];
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	799a      	ldrb	r2, [r3, #6]
 8008b88:	4b16      	ldr	r3, [pc, #88]	; (8008be4 <CDC_Control_FS+0x140>)
 8008b8a:	719a      	strb	r2, [r3, #6]
    break;
 8008b8c:	e023      	b.n	8008bd6 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = mylineCodeBuf[0];
 8008b8e:	4b15      	ldr	r3, [pc, #84]	; (8008be4 <CDC_Control_FS+0x140>)
 8008b90:	781a      	ldrb	r2, [r3, #0]
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = mylineCodeBuf[1];
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	4a12      	ldr	r2, [pc, #72]	; (8008be4 <CDC_Control_FS+0x140>)
 8008b9c:	7852      	ldrb	r2, [r2, #1]
 8008b9e:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = mylineCodeBuf[2];
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	3302      	adds	r3, #2
 8008ba4:	4a0f      	ldr	r2, [pc, #60]	; (8008be4 <CDC_Control_FS+0x140>)
 8008ba6:	7892      	ldrb	r2, [r2, #2]
 8008ba8:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = mylineCodeBuf[3];
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	3303      	adds	r3, #3
 8008bae:	4a0d      	ldr	r2, [pc, #52]	; (8008be4 <CDC_Control_FS+0x140>)
 8008bb0:	78d2      	ldrb	r2, [r2, #3]
 8008bb2:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = mylineCodeBuf[4];
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	3304      	adds	r3, #4
 8008bb8:	4a0a      	ldr	r2, [pc, #40]	; (8008be4 <CDC_Control_FS+0x140>)
 8008bba:	7912      	ldrb	r2, [r2, #4]
 8008bbc:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = mylineCodeBuf[5];
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	3305      	adds	r3, #5
 8008bc2:	4a08      	ldr	r2, [pc, #32]	; (8008be4 <CDC_Control_FS+0x140>)
 8008bc4:	7952      	ldrb	r2, [r2, #5]
 8008bc6:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = mylineCodeBuf[6];
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	3306      	adds	r3, #6
 8008bcc:	4a05      	ldr	r2, [pc, #20]	; (8008be4 <CDC_Control_FS+0x140>)
 8008bce:	7992      	ldrb	r2, [r2, #6]
 8008bd0:	701a      	strb	r2, [r3, #0]
    break;
 8008bd2:	e000      	b.n	8008bd6 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008bd4:	bf00      	nop
  }

  return (USBD_OK);
 8008bd6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bc80      	pop	{r7}
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	2000090c 	.word	0x2000090c

08008be8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(aPtrFunRx != NULL)
 8008bf2:	4b0c      	ldr	r3, [pc, #48]	; (8008c24 <CDC_Receive_FS+0x3c>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d007      	beq.n	8008c0a <CDC_Receive_FS+0x22>
		aPtrFunRx(Buf, *Len);
 8008bfa:	4b0a      	ldr	r3, [pc, #40]	; (8008c24 <CDC_Receive_FS+0x3c>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	683a      	ldr	r2, [r7, #0]
 8008c00:	6812      	ldr	r2, [r2, #0]
 8008c02:	b292      	uxth	r2, r2
 8008c04:	4611      	mov	r1, r2
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	4798      	blx	r3

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008c0a:	6879      	ldr	r1, [r7, #4]
 8008c0c:	4806      	ldr	r0, [pc, #24]	; (8008c28 <CDC_Receive_FS+0x40>)
 8008c0e:	f7fe fdf6 	bl	80077fe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008c12:	4805      	ldr	r0, [pc, #20]	; (8008c28 <CDC_Receive_FS+0x40>)
 8008c14:	f7fe fe35 	bl	8007882 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008c18:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3708      	adds	r7, #8
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	20000914 	.word	0x20000914
 8008c28:	20000448 	.word	0x20000448

08008c2c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	460b      	mov	r3, r1
 8008c36:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008c3c:	4b0d      	ldr	r3, [pc, #52]	; (8008c74 <CDC_Transmit_FS+0x48>)
 8008c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c42:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d001      	beq.n	8008c52 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e00b      	b.n	8008c6a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008c52:	887b      	ldrh	r3, [r7, #2]
 8008c54:	461a      	mov	r2, r3
 8008c56:	6879      	ldr	r1, [r7, #4]
 8008c58:	4806      	ldr	r0, [pc, #24]	; (8008c74 <CDC_Transmit_FS+0x48>)
 8008c5a:	f7fe fdb7 	bl	80077cc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008c5e:	4805      	ldr	r0, [pc, #20]	; (8008c74 <CDC_Transmit_FS+0x48>)
 8008c60:	f7fe fde0 	bl	8007824 <USBD_CDC_TransmitPacket>
 8008c64:	4603      	mov	r3, r0
 8008c66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3710      	adds	r7, #16
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	20000448 	.word	0x20000448

08008c78 <CDC_AttachRxData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len)){
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;
 8008c80:	4a03      	ldr	r2, [pc, #12]	; (8008c90 <CDC_AttachRxData+0x18>)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6013      	str	r3, [r2, #0]
}
 8008c86:	bf00      	nop
 8008c88:	370c      	adds	r7, #12
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bc80      	pop	{r7}
 8008c8e:	4770      	bx	lr
 8008c90:	20000914 	.word	0x20000914

08008c94 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	6039      	str	r1, [r7, #0]
 8008c9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	2212      	movs	r2, #18
 8008ca4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008ca6:	4b03      	ldr	r3, [pc, #12]	; (8008cb4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bc80      	pop	{r7}
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	20000148 	.word	0x20000148

08008cb8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	6039      	str	r1, [r7, #0]
 8008cc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	2204      	movs	r2, #4
 8008cc8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008cca:	4b03      	ldr	r3, [pc, #12]	; (8008cd8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bc80      	pop	{r7}
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop
 8008cd8:	2000015c 	.word	0x2000015c

08008cdc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	6039      	str	r1, [r7, #0]
 8008ce6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ce8:	79fb      	ldrb	r3, [r7, #7]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d105      	bne.n	8008cfa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008cee:	683a      	ldr	r2, [r7, #0]
 8008cf0:	4907      	ldr	r1, [pc, #28]	; (8008d10 <USBD_FS_ProductStrDescriptor+0x34>)
 8008cf2:	4808      	ldr	r0, [pc, #32]	; (8008d14 <USBD_FS_ProductStrDescriptor+0x38>)
 8008cf4:	f7ff fdac 	bl	8008850 <USBD_GetString>
 8008cf8:	e004      	b.n	8008d04 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008cfa:	683a      	ldr	r2, [r7, #0]
 8008cfc:	4904      	ldr	r1, [pc, #16]	; (8008d10 <USBD_FS_ProductStrDescriptor+0x34>)
 8008cfe:	4805      	ldr	r0, [pc, #20]	; (8008d14 <USBD_FS_ProductStrDescriptor+0x38>)
 8008d00:	f7ff fda6 	bl	8008850 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d04:	4b02      	ldr	r3, [pc, #8]	; (8008d10 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3708      	adds	r7, #8
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	20000918 	.word	0x20000918
 8008d14:	08009474 	.word	0x08009474

08008d18 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	4603      	mov	r3, r0
 8008d20:	6039      	str	r1, [r7, #0]
 8008d22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008d24:	683a      	ldr	r2, [r7, #0]
 8008d26:	4904      	ldr	r1, [pc, #16]	; (8008d38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008d28:	4804      	ldr	r0, [pc, #16]	; (8008d3c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008d2a:	f7ff fd91 	bl	8008850 <USBD_GetString>
  return USBD_StrDesc;
 8008d2e:	4b02      	ldr	r3, [pc, #8]	; (8008d38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3708      	adds	r7, #8
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	20000918 	.word	0x20000918
 8008d3c:	0800948c 	.word	0x0800948c

08008d40 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	4603      	mov	r3, r0
 8008d48:	6039      	str	r1, [r7, #0]
 8008d4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	221a      	movs	r2, #26
 8008d50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d52:	f000 f843 	bl	8008ddc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008d56:	4b02      	ldr	r3, [pc, #8]	; (8008d60 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3708      	adds	r7, #8
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	20000160 	.word	0x20000160

08008d64 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	6039      	str	r1, [r7, #0]
 8008d6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d70:	79fb      	ldrb	r3, [r7, #7]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d105      	bne.n	8008d82 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d76:	683a      	ldr	r2, [r7, #0]
 8008d78:	4907      	ldr	r1, [pc, #28]	; (8008d98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d7a:	4808      	ldr	r0, [pc, #32]	; (8008d9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d7c:	f7ff fd68 	bl	8008850 <USBD_GetString>
 8008d80:	e004      	b.n	8008d8c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d82:	683a      	ldr	r2, [r7, #0]
 8008d84:	4904      	ldr	r1, [pc, #16]	; (8008d98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d86:	4805      	ldr	r0, [pc, #20]	; (8008d9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d88:	f7ff fd62 	bl	8008850 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d8c:	4b02      	ldr	r3, [pc, #8]	; (8008d98 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3708      	adds	r7, #8
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	20000918 	.word	0x20000918
 8008d9c:	080094a0 	.word	0x080094a0

08008da0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	4603      	mov	r3, r0
 8008da8:	6039      	str	r1, [r7, #0]
 8008daa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008dac:	79fb      	ldrb	r3, [r7, #7]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d105      	bne.n	8008dbe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008db2:	683a      	ldr	r2, [r7, #0]
 8008db4:	4907      	ldr	r1, [pc, #28]	; (8008dd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008db6:	4808      	ldr	r0, [pc, #32]	; (8008dd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008db8:	f7ff fd4a 	bl	8008850 <USBD_GetString>
 8008dbc:	e004      	b.n	8008dc8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008dbe:	683a      	ldr	r2, [r7, #0]
 8008dc0:	4904      	ldr	r1, [pc, #16]	; (8008dd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008dc2:	4805      	ldr	r0, [pc, #20]	; (8008dd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008dc4:	f7ff fd44 	bl	8008850 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008dc8:	4b02      	ldr	r3, [pc, #8]	; (8008dd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	20000918 	.word	0x20000918
 8008dd8:	080094ac 	.word	0x080094ac

08008ddc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008de2:	4b0f      	ldr	r3, [pc, #60]	; (8008e20 <Get_SerialNum+0x44>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008de8:	4b0e      	ldr	r3, [pc, #56]	; (8008e24 <Get_SerialNum+0x48>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008dee:	4b0e      	ldr	r3, [pc, #56]	; (8008e28 <Get_SerialNum+0x4c>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008df4:	68fa      	ldr	r2, [r7, #12]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4413      	add	r3, r2
 8008dfa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d009      	beq.n	8008e16 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008e02:	2208      	movs	r2, #8
 8008e04:	4909      	ldr	r1, [pc, #36]	; (8008e2c <Get_SerialNum+0x50>)
 8008e06:	68f8      	ldr	r0, [r7, #12]
 8008e08:	f000 f814 	bl	8008e34 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008e0c:	2204      	movs	r2, #4
 8008e0e:	4908      	ldr	r1, [pc, #32]	; (8008e30 <Get_SerialNum+0x54>)
 8008e10:	68b8      	ldr	r0, [r7, #8]
 8008e12:	f000 f80f 	bl	8008e34 <IntToUnicode>
  }
}
 8008e16:	bf00      	nop
 8008e18:	3710      	adds	r7, #16
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	1ffff7e8 	.word	0x1ffff7e8
 8008e24:	1ffff7ec 	.word	0x1ffff7ec
 8008e28:	1ffff7f0 	.word	0x1ffff7f0
 8008e2c:	20000162 	.word	0x20000162
 8008e30:	20000172 	.word	0x20000172

08008e34 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b087      	sub	sp, #28
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	4613      	mov	r3, r2
 8008e40:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008e42:	2300      	movs	r3, #0
 8008e44:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008e46:	2300      	movs	r3, #0
 8008e48:	75fb      	strb	r3, [r7, #23]
 8008e4a:	e027      	b.n	8008e9c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	0f1b      	lsrs	r3, r3, #28
 8008e50:	2b09      	cmp	r3, #9
 8008e52:	d80b      	bhi.n	8008e6c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	0f1b      	lsrs	r3, r3, #28
 8008e58:	b2da      	uxtb	r2, r3
 8008e5a:	7dfb      	ldrb	r3, [r7, #23]
 8008e5c:	005b      	lsls	r3, r3, #1
 8008e5e:	4619      	mov	r1, r3
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	440b      	add	r3, r1
 8008e64:	3230      	adds	r2, #48	; 0x30
 8008e66:	b2d2      	uxtb	r2, r2
 8008e68:	701a      	strb	r2, [r3, #0]
 8008e6a:	e00a      	b.n	8008e82 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	0f1b      	lsrs	r3, r3, #28
 8008e70:	b2da      	uxtb	r2, r3
 8008e72:	7dfb      	ldrb	r3, [r7, #23]
 8008e74:	005b      	lsls	r3, r3, #1
 8008e76:	4619      	mov	r1, r3
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	440b      	add	r3, r1
 8008e7c:	3237      	adds	r2, #55	; 0x37
 8008e7e:	b2d2      	uxtb	r2, r2
 8008e80:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	011b      	lsls	r3, r3, #4
 8008e86:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008e88:	7dfb      	ldrb	r3, [r7, #23]
 8008e8a:	005b      	lsls	r3, r3, #1
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	68ba      	ldr	r2, [r7, #8]
 8008e90:	4413      	add	r3, r2
 8008e92:	2200      	movs	r2, #0
 8008e94:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008e96:	7dfb      	ldrb	r3, [r7, #23]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	75fb      	strb	r3, [r7, #23]
 8008e9c:	7dfa      	ldrb	r2, [r7, #23]
 8008e9e:	79fb      	ldrb	r3, [r7, #7]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d3d3      	bcc.n	8008e4c <IntToUnicode+0x18>
  }
}
 8008ea4:	bf00      	nop
 8008ea6:	bf00      	nop
 8008ea8:	371c      	adds	r7, #28
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bc80      	pop	{r7}
 8008eae:	4770      	bx	lr

08008eb0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a0d      	ldr	r2, [pc, #52]	; (8008ef4 <HAL_PCD_MspInit+0x44>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d113      	bne.n	8008eea <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008ec2:	4b0d      	ldr	r3, [pc, #52]	; (8008ef8 <HAL_PCD_MspInit+0x48>)
 8008ec4:	69db      	ldr	r3, [r3, #28]
 8008ec6:	4a0c      	ldr	r2, [pc, #48]	; (8008ef8 <HAL_PCD_MspInit+0x48>)
 8008ec8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008ecc:	61d3      	str	r3, [r2, #28]
 8008ece:	4b0a      	ldr	r3, [pc, #40]	; (8008ef8 <HAL_PCD_MspInit+0x48>)
 8008ed0:	69db      	ldr	r3, [r3, #28]
 8008ed2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ed6:	60fb      	str	r3, [r7, #12]
 8008ed8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008eda:	2200      	movs	r2, #0
 8008edc:	2100      	movs	r1, #0
 8008ede:	2014      	movs	r0, #20
 8008ee0:	f7f7 ff59 	bl	8000d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008ee4:	2014      	movs	r0, #20
 8008ee6:	f7f7 ff72 	bl	8000dce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008eea:	bf00      	nop
 8008eec:	3710      	adds	r7, #16
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop
 8008ef4:	40005c00 	.word	0x40005c00
 8008ef8:	40021000 	.word	0x40021000

08008efc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008f10:	4619      	mov	r1, r3
 8008f12:	4610      	mov	r0, r2
 8008f14:	f7fe fd6b 	bl	80079ee <USBD_LL_SetupStage>
}
 8008f18:	bf00      	nop
 8008f1a:	3708      	adds	r7, #8
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	460b      	mov	r3, r1
 8008f2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8008f32:	78fa      	ldrb	r2, [r7, #3]
 8008f34:	6879      	ldr	r1, [r7, #4]
 8008f36:	4613      	mov	r3, r2
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	4413      	add	r3, r2
 8008f3c:	00db      	lsls	r3, r3, #3
 8008f3e:	440b      	add	r3, r1
 8008f40:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	78fb      	ldrb	r3, [r7, #3]
 8008f48:	4619      	mov	r1, r3
 8008f4a:	f7fe fd9d 	bl	8007a88 <USBD_LL_DataOutStage>
}
 8008f4e:	bf00      	nop
 8008f50:	3708      	adds	r7, #8
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b082      	sub	sp, #8
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
 8008f5e:	460b      	mov	r3, r1
 8008f60:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8008f68:	78fa      	ldrb	r2, [r7, #3]
 8008f6a:	6879      	ldr	r1, [r7, #4]
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	4413      	add	r3, r2
 8008f72:	00db      	lsls	r3, r3, #3
 8008f74:	440b      	add	r3, r1
 8008f76:	333c      	adds	r3, #60	; 0x3c
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	78fb      	ldrb	r3, [r7, #3]
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	f7fe fdf4 	bl	8007b6a <USBD_LL_DataInStage>
}
 8008f82:	bf00      	nop
 8008f84:	3708      	adds	r7, #8
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b082      	sub	sp, #8
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f7fe ff04 	bl	8007da6 <USBD_LL_SOF>
}
 8008f9e:	bf00      	nop
 8008fa0:	3708      	adds	r7, #8
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b084      	sub	sp, #16
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	d001      	beq.n	8008fbe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008fba:	f7f7 fc8f 	bl	80008dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008fc4:	7bfa      	ldrb	r2, [r7, #15]
 8008fc6:	4611      	mov	r1, r2
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f7fe feb4 	bl	8007d36 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7fe fe6d 	bl	8007cb4 <USBD_LL_Reset>
}
 8008fda:	bf00      	nop
 8008fdc:	3710      	adds	r7, #16
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
	...

08008fe4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f7fe feae 	bl	8007d54 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	699b      	ldr	r3, [r3, #24]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d005      	beq.n	800900c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009000:	4b04      	ldr	r3, [pc, #16]	; (8009014 <HAL_PCD_SuspendCallback+0x30>)
 8009002:	691b      	ldr	r3, [r3, #16]
 8009004:	4a03      	ldr	r2, [pc, #12]	; (8009014 <HAL_PCD_SuspendCallback+0x30>)
 8009006:	f043 0306 	orr.w	r3, r3, #6
 800900a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800900c:	bf00      	nop
 800900e:	3708      	adds	r7, #8
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}
 8009014:	e000ed00 	.word	0xe000ed00

08009018 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8009026:	4618      	mov	r0, r3
 8009028:	f7fe fea8 	bl	8007d7c <USBD_LL_Resume>
}
 800902c:	bf00      	nop
 800902e:	3708      	adds	r7, #8
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800903c:	4a28      	ldr	r2, [pc, #160]	; (80090e0 <USBD_LL_Init+0xac>)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4a26      	ldr	r2, [pc, #152]	; (80090e0 <USBD_LL_Init+0xac>)
 8009048:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800904c:	4b24      	ldr	r3, [pc, #144]	; (80090e0 <USBD_LL_Init+0xac>)
 800904e:	4a25      	ldr	r2, [pc, #148]	; (80090e4 <USBD_LL_Init+0xb0>)
 8009050:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009052:	4b23      	ldr	r3, [pc, #140]	; (80090e0 <USBD_LL_Init+0xac>)
 8009054:	2208      	movs	r2, #8
 8009056:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009058:	4b21      	ldr	r3, [pc, #132]	; (80090e0 <USBD_LL_Init+0xac>)
 800905a:	2202      	movs	r2, #2
 800905c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800905e:	4b20      	ldr	r3, [pc, #128]	; (80090e0 <USBD_LL_Init+0xac>)
 8009060:	2200      	movs	r2, #0
 8009062:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009064:	4b1e      	ldr	r3, [pc, #120]	; (80090e0 <USBD_LL_Init+0xac>)
 8009066:	2200      	movs	r2, #0
 8009068:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800906a:	4b1d      	ldr	r3, [pc, #116]	; (80090e0 <USBD_LL_Init+0xac>)
 800906c:	2200      	movs	r2, #0
 800906e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009070:	481b      	ldr	r0, [pc, #108]	; (80090e0 <USBD_LL_Init+0xac>)
 8009072:	f7f8 f915 	bl	80012a0 <HAL_PCD_Init>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d001      	beq.n	8009080 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800907c:	f7f7 fc2e 	bl	80008dc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009086:	2318      	movs	r3, #24
 8009088:	2200      	movs	r2, #0
 800908a:	2100      	movs	r1, #0
 800908c:	f7f9 fe34 	bl	8002cf8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009096:	2358      	movs	r3, #88	; 0x58
 8009098:	2200      	movs	r2, #0
 800909a:	2180      	movs	r1, #128	; 0x80
 800909c:	f7f9 fe2c 	bl	8002cf8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80090a6:	23c0      	movs	r3, #192	; 0xc0
 80090a8:	2200      	movs	r2, #0
 80090aa:	2181      	movs	r1, #129	; 0x81
 80090ac:	f7f9 fe24 	bl	8002cf8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80090b6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80090ba:	2200      	movs	r2, #0
 80090bc:	2101      	movs	r1, #1
 80090be:	f7f9 fe1b 	bl	8002cf8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80090c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090cc:	2200      	movs	r2, #0
 80090ce:	2182      	movs	r1, #130	; 0x82
 80090d0:	f7f9 fe12 	bl	8002cf8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3708      	adds	r7, #8
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	20000b18 	.word	0x20000b18
 80090e4:	40005c00 	.word	0x40005c00

080090e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090f0:	2300      	movs	r3, #0
 80090f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090f4:	2300      	movs	r3, #0
 80090f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090fe:	4618      	mov	r0, r3
 8009100:	f7f8 f9cd 	bl	800149e <HAL_PCD_Start>
 8009104:	4603      	mov	r3, r0
 8009106:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009108:	7bfb      	ldrb	r3, [r7, #15]
 800910a:	4618      	mov	r0, r3
 800910c:	f000 f94e 	bl	80093ac <USBD_Get_USB_Status>
 8009110:	4603      	mov	r3, r0
 8009112:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009114:	7bbb      	ldrb	r3, [r7, #14]
}
 8009116:	4618      	mov	r0, r3
 8009118:	3710      	adds	r7, #16
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}

0800911e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800911e:	b580      	push	{r7, lr}
 8009120:	b084      	sub	sp, #16
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
 8009126:	4608      	mov	r0, r1
 8009128:	4611      	mov	r1, r2
 800912a:	461a      	mov	r2, r3
 800912c:	4603      	mov	r3, r0
 800912e:	70fb      	strb	r3, [r7, #3]
 8009130:	460b      	mov	r3, r1
 8009132:	70bb      	strb	r3, [r7, #2]
 8009134:	4613      	mov	r3, r2
 8009136:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009138:	2300      	movs	r3, #0
 800913a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800913c:	2300      	movs	r3, #0
 800913e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009146:	78bb      	ldrb	r3, [r7, #2]
 8009148:	883a      	ldrh	r2, [r7, #0]
 800914a:	78f9      	ldrb	r1, [r7, #3]
 800914c:	f7f8 fb22 	bl	8001794 <HAL_PCD_EP_Open>
 8009150:	4603      	mov	r3, r0
 8009152:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009154:	7bfb      	ldrb	r3, [r7, #15]
 8009156:	4618      	mov	r0, r3
 8009158:	f000 f928 	bl	80093ac <USBD_Get_USB_Status>
 800915c:	4603      	mov	r3, r0
 800915e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009160:	7bbb      	ldrb	r3, [r7, #14]
}
 8009162:	4618      	mov	r0, r3
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b084      	sub	sp, #16
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
 8009172:	460b      	mov	r3, r1
 8009174:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009176:	2300      	movs	r3, #0
 8009178:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800917a:	2300      	movs	r3, #0
 800917c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009184:	78fa      	ldrb	r2, [r7, #3]
 8009186:	4611      	mov	r1, r2
 8009188:	4618      	mov	r0, r3
 800918a:	f7f8 fb60 	bl	800184e <HAL_PCD_EP_Close>
 800918e:	4603      	mov	r3, r0
 8009190:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009192:	7bfb      	ldrb	r3, [r7, #15]
 8009194:	4618      	mov	r0, r3
 8009196:	f000 f909 	bl	80093ac <USBD_Get_USB_Status>
 800919a:	4603      	mov	r3, r0
 800919c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800919e:	7bbb      	ldrb	r3, [r7, #14]
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3710      	adds	r7, #16
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	460b      	mov	r3, r1
 80091b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091b4:	2300      	movs	r3, #0
 80091b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091b8:	2300      	movs	r3, #0
 80091ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091c2:	78fa      	ldrb	r2, [r7, #3]
 80091c4:	4611      	mov	r1, r2
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7f8 fc08 	bl	80019dc <HAL_PCD_EP_SetStall>
 80091cc:	4603      	mov	r3, r0
 80091ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091d0:	7bfb      	ldrb	r3, [r7, #15]
 80091d2:	4618      	mov	r0, r3
 80091d4:	f000 f8ea 	bl	80093ac <USBD_Get_USB_Status>
 80091d8:	4603      	mov	r3, r0
 80091da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b084      	sub	sp, #16
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	460b      	mov	r3, r1
 80091f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091f2:	2300      	movs	r3, #0
 80091f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091f6:	2300      	movs	r3, #0
 80091f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009200:	78fa      	ldrb	r2, [r7, #3]
 8009202:	4611      	mov	r1, r2
 8009204:	4618      	mov	r0, r3
 8009206:	f7f8 fc49 	bl	8001a9c <HAL_PCD_EP_ClrStall>
 800920a:	4603      	mov	r3, r0
 800920c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800920e:	7bfb      	ldrb	r3, [r7, #15]
 8009210:	4618      	mov	r0, r3
 8009212:	f000 f8cb 	bl	80093ac <USBD_Get_USB_Status>
 8009216:	4603      	mov	r3, r0
 8009218:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800921a:	7bbb      	ldrb	r3, [r7, #14]
}
 800921c:	4618      	mov	r0, r3
 800921e:	3710      	adds	r7, #16
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009224:	b480      	push	{r7}
 8009226:	b085      	sub	sp, #20
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	460b      	mov	r3, r1
 800922e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009236:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009238:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800923c:	2b00      	cmp	r3, #0
 800923e:	da0c      	bge.n	800925a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009240:	78fb      	ldrb	r3, [r7, #3]
 8009242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009246:	68f9      	ldr	r1, [r7, #12]
 8009248:	1c5a      	adds	r2, r3, #1
 800924a:	4613      	mov	r3, r2
 800924c:	009b      	lsls	r3, r3, #2
 800924e:	4413      	add	r3, r2
 8009250:	00db      	lsls	r3, r3, #3
 8009252:	440b      	add	r3, r1
 8009254:	3302      	adds	r3, #2
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	e00b      	b.n	8009272 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800925a:	78fb      	ldrb	r3, [r7, #3]
 800925c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009260:	68f9      	ldr	r1, [r7, #12]
 8009262:	4613      	mov	r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	4413      	add	r3, r2
 8009268:	00db      	lsls	r3, r3, #3
 800926a:	440b      	add	r3, r1
 800926c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009270:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009272:	4618      	mov	r0, r3
 8009274:	3714      	adds	r7, #20
 8009276:	46bd      	mov	sp, r7
 8009278:	bc80      	pop	{r7}
 800927a:	4770      	bx	lr

0800927c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	460b      	mov	r3, r1
 8009286:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009288:	2300      	movs	r3, #0
 800928a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800928c:	2300      	movs	r3, #0
 800928e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009296:	78fa      	ldrb	r2, [r7, #3]
 8009298:	4611      	mov	r1, r2
 800929a:	4618      	mov	r0, r3
 800929c:	f7f8 fa55 	bl	800174a <HAL_PCD_SetAddress>
 80092a0:	4603      	mov	r3, r0
 80092a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092a4:	7bfb      	ldrb	r3, [r7, #15]
 80092a6:	4618      	mov	r0, r3
 80092a8:	f000 f880 	bl	80093ac <USBD_Get_USB_Status>
 80092ac:	4603      	mov	r3, r0
 80092ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3710      	adds	r7, #16
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}

080092ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b086      	sub	sp, #24
 80092be:	af00      	add	r7, sp, #0
 80092c0:	60f8      	str	r0, [r7, #12]
 80092c2:	607a      	str	r2, [r7, #4]
 80092c4:	461a      	mov	r2, r3
 80092c6:	460b      	mov	r3, r1
 80092c8:	72fb      	strb	r3, [r7, #11]
 80092ca:	4613      	mov	r3, r2
 80092cc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092ce:	2300      	movs	r3, #0
 80092d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092d2:	2300      	movs	r3, #0
 80092d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092dc:	893b      	ldrh	r3, [r7, #8]
 80092de:	7af9      	ldrb	r1, [r7, #11]
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	f7f8 fb44 	bl	800196e <HAL_PCD_EP_Transmit>
 80092e6:	4603      	mov	r3, r0
 80092e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092ea:	7dfb      	ldrb	r3, [r7, #23]
 80092ec:	4618      	mov	r0, r3
 80092ee:	f000 f85d 	bl	80093ac <USBD_Get_USB_Status>
 80092f2:	4603      	mov	r3, r0
 80092f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80092f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3718      	adds	r7, #24
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b086      	sub	sp, #24
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	607a      	str	r2, [r7, #4]
 800930a:	461a      	mov	r2, r3
 800930c:	460b      	mov	r3, r1
 800930e:	72fb      	strb	r3, [r7, #11]
 8009310:	4613      	mov	r3, r2
 8009312:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009314:	2300      	movs	r3, #0
 8009316:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009318:	2300      	movs	r3, #0
 800931a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009322:	893b      	ldrh	r3, [r7, #8]
 8009324:	7af9      	ldrb	r1, [r7, #11]
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	f7f8 fad9 	bl	80018de <HAL_PCD_EP_Receive>
 800932c:	4603      	mov	r3, r0
 800932e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009330:	7dfb      	ldrb	r3, [r7, #23]
 8009332:	4618      	mov	r0, r3
 8009334:	f000 f83a 	bl	80093ac <USBD_Get_USB_Status>
 8009338:	4603      	mov	r3, r0
 800933a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800933c:	7dbb      	ldrb	r3, [r7, #22]
}
 800933e:	4618      	mov	r0, r3
 8009340:	3718      	adds	r7, #24
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b082      	sub	sp, #8
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
 800934e:	460b      	mov	r3, r1
 8009350:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009358:	78fa      	ldrb	r2, [r7, #3]
 800935a:	4611      	mov	r1, r2
 800935c:	4618      	mov	r0, r3
 800935e:	f7f8 faef 	bl	8001940 <HAL_PCD_EP_GetRxCount>
 8009362:	4603      	mov	r3, r0
}
 8009364:	4618      	mov	r0, r3
 8009366:	3708      	adds	r7, #8
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009374:	4b02      	ldr	r3, [pc, #8]	; (8009380 <USBD_static_malloc+0x14>)
}
 8009376:	4618      	mov	r0, r3
 8009378:	370c      	adds	r7, #12
 800937a:	46bd      	mov	sp, r7
 800937c:	bc80      	pop	{r7}
 800937e:	4770      	bx	lr
 8009380:	20000e08 	.word	0x20000e08

08009384 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]

}
 800938c:	bf00      	nop
 800938e:	370c      	adds	r7, #12
 8009390:	46bd      	mov	sp, r7
 8009392:	bc80      	pop	{r7}
 8009394:	4770      	bx	lr

08009396 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009396:	b480      	push	{r7}
 8009398:	b083      	sub	sp, #12
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
 800939e:	460b      	mov	r3, r1
 80093a0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80093a2:	bf00      	nop
 80093a4:	370c      	adds	r7, #12
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bc80      	pop	{r7}
 80093aa:	4770      	bx	lr

080093ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b085      	sub	sp, #20
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	4603      	mov	r3, r0
 80093b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093b6:	2300      	movs	r3, #0
 80093b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80093ba:	79fb      	ldrb	r3, [r7, #7]
 80093bc:	2b03      	cmp	r3, #3
 80093be:	d817      	bhi.n	80093f0 <USBD_Get_USB_Status+0x44>
 80093c0:	a201      	add	r2, pc, #4	; (adr r2, 80093c8 <USBD_Get_USB_Status+0x1c>)
 80093c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c6:	bf00      	nop
 80093c8:	080093d9 	.word	0x080093d9
 80093cc:	080093df 	.word	0x080093df
 80093d0:	080093e5 	.word	0x080093e5
 80093d4:	080093eb 	.word	0x080093eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80093d8:	2300      	movs	r3, #0
 80093da:	73fb      	strb	r3, [r7, #15]
    break;
 80093dc:	e00b      	b.n	80093f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80093de:	2302      	movs	r3, #2
 80093e0:	73fb      	strb	r3, [r7, #15]
    break;
 80093e2:	e008      	b.n	80093f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80093e4:	2301      	movs	r3, #1
 80093e6:	73fb      	strb	r3, [r7, #15]
    break;
 80093e8:	e005      	b.n	80093f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80093ea:	2302      	movs	r3, #2
 80093ec:	73fb      	strb	r3, [r7, #15]
    break;
 80093ee:	e002      	b.n	80093f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80093f0:	2302      	movs	r3, #2
 80093f2:	73fb      	strb	r3, [r7, #15]
    break;
 80093f4:	bf00      	nop
  }
  return usb_status;
 80093f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3714      	adds	r7, #20
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bc80      	pop	{r7}
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop

08009404 <memset>:
 8009404:	4603      	mov	r3, r0
 8009406:	4402      	add	r2, r0
 8009408:	4293      	cmp	r3, r2
 800940a:	d100      	bne.n	800940e <memset+0xa>
 800940c:	4770      	bx	lr
 800940e:	f803 1b01 	strb.w	r1, [r3], #1
 8009412:	e7f9      	b.n	8009408 <memset+0x4>

08009414 <__libc_init_array>:
 8009414:	b570      	push	{r4, r5, r6, lr}
 8009416:	2600      	movs	r6, #0
 8009418:	4d0c      	ldr	r5, [pc, #48]	; (800944c <__libc_init_array+0x38>)
 800941a:	4c0d      	ldr	r4, [pc, #52]	; (8009450 <__libc_init_array+0x3c>)
 800941c:	1b64      	subs	r4, r4, r5
 800941e:	10a4      	asrs	r4, r4, #2
 8009420:	42a6      	cmp	r6, r4
 8009422:	d109      	bne.n	8009438 <__libc_init_array+0x24>
 8009424:	f000 f81a 	bl	800945c <_init>
 8009428:	2600      	movs	r6, #0
 800942a:	4d0a      	ldr	r5, [pc, #40]	; (8009454 <__libc_init_array+0x40>)
 800942c:	4c0a      	ldr	r4, [pc, #40]	; (8009458 <__libc_init_array+0x44>)
 800942e:	1b64      	subs	r4, r4, r5
 8009430:	10a4      	asrs	r4, r4, #2
 8009432:	42a6      	cmp	r6, r4
 8009434:	d105      	bne.n	8009442 <__libc_init_array+0x2e>
 8009436:	bd70      	pop	{r4, r5, r6, pc}
 8009438:	f855 3b04 	ldr.w	r3, [r5], #4
 800943c:	4798      	blx	r3
 800943e:	3601      	adds	r6, #1
 8009440:	e7ee      	b.n	8009420 <__libc_init_array+0xc>
 8009442:	f855 3b04 	ldr.w	r3, [r5], #4
 8009446:	4798      	blx	r3
 8009448:	3601      	adds	r6, #1
 800944a:	e7f2      	b.n	8009432 <__libc_init_array+0x1e>
 800944c:	080094e8 	.word	0x080094e8
 8009450:	080094e8 	.word	0x080094e8
 8009454:	080094e8 	.word	0x080094e8
 8009458:	080094ec 	.word	0x080094ec

0800945c <_init>:
 800945c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800945e:	bf00      	nop
 8009460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009462:	bc08      	pop	{r3}
 8009464:	469e      	mov	lr, r3
 8009466:	4770      	bx	lr

08009468 <_fini>:
 8009468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800946a:	bf00      	nop
 800946c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800946e:	bc08      	pop	{r3}
 8009470:	469e      	mov	lr, r3
 8009472:	4770      	bx	lr
